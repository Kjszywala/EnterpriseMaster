@page "/"
@using BlazorBootstrap
@using EnterpriseMaster.DbServices.Models.Database;
@using EnterpriseMaster.DesktopApp.Data.Models;
@using EnterpriseMaster.DesktopApp.Data.Services.DashboardServices;
@inject TaskServices taskServices
@inject WhatsNewInfoService whatsNewServices
@inject WhatsNewInfoService newsServices
@inherits MainLayout

<div class="dashboardGrid">
    <div class="dashboardBox1">
        <div class="dashbordContent">
            <div class="task-list">
                <div class="dashboardTitle">
                    <h3>Tasks List For Today</h3>
                    <div class="spacer"></div>
                    <div class="buttonsDiv">
                        <Button Color="ButtonColor.Success" Outline="true" Size="Size.Small" style="margin:2px;" @onclick="OnShowModalAddTaskClick" title="Completed"><span><iconify-icon icon="mingcute:plus-fill"></iconify-icon></span></Button>
                    </div>
                </div>
                <hr class="dashboardHr" style="color:black;"/>
               <Grid TItem="Tasks"
                    @ref="gridTasks"
                    AllowFiltering="true"
                    AllowPaging="true"
                    AllowSorting="true"
                    AllowRowClick="true"
                    DataProvider="TasksDataProvider"
                    Class="table table-hover table-bordered table-striped"
                    FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                    HeaderRowCssClass="bg-dark text-white border-bottom-0"
                    PageSize="5"
                    PageSizeSelectorVisible="true"
                    PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                    PaginationItemsTextFormat="{0} - {1} of {2} pages"
                    ItemsPerPageText="Items per page"
                    Responsive="true"
                    OnRowClick="OnShowModalClick"
                    >
                    <GridColumn TItem="Tasks" HeaderText="Task" PropertyName="Task" SortKeySelector="item => item.Task" FilterTextboxWidth="80" Style="height: 10px;">
                        @context.Task
                    </GridColumn>
                    <GridColumn TItem="Tasks" HeaderText="Description" PropertyName="Description" SortKeySelector="item => item.Description" SortString="Description">
                        @context.Description
                    </GridColumn>
                    <GridColumn TItem="Tasks" HeaderText="Priority" PropertyName="Notes" SortKeySelector="item => item.Notes" FilterTextboxWidth="40">
                        @context.Notes
                    </GridColumn>
                </Grid>
            </div>
        </div>
    </div>
    <div class="dashboardBox2">
        <div class="dashbordContent">
            <div class="dashboardTitle">
                <h3>Completed Tasks</h3>
            </div>
            <hr class="dashboardHr" style="color:black;" />
            <Grid TItem="Tasks"
                  @ref="gridTasksCompleted"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  Class="table table-hover table-bordered table-striped"
                  DataProvider="TasksCompletedDataProvider"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true"
                  OnRowClick="OnShowCompletedModalClick">
                <GridColumn TItem="Tasks" HeaderText="Task" PropertyName="Task" SortKeySelector="item => item.Task" FilterTextboxWidth="80">
                    @context.Task
                </GridColumn>
                <GridColumn TItem="Tasks" HeaderText="Description" PropertyName="Description" SortKeySelector="item => item.Description" SortString="Description">
                    @context.Description
                </GridColumn>
                <GridColumn TItem="Tasks" HeaderText="Priority" PropertyName="Notes" SortKeySelector="item => item.Notes" FilterTextboxWidth="40">
                    @context.Notes
                </GridColumn>
            </Grid>
        </div>
    </div>
    <div class="dashboardBox3">
        <div class="dashbordContent">
            <div class="dashboardTitle">
                <h3>Tasks in Progress</h3>
            </div>
            <hr class="dashboardHr" style="color:black;" />
            <Grid TItem="Tasks"
                  @ref="gridTasksInProgress"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  Class="table table-hover table-bordered table-striped"
                  DataProvider="TasksProgressDataProvider"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true"
                  OnRowClick="OnShowProgressModalClick">
                <GridColumn TItem="Tasks" HeaderText="Task" PropertyName="Task" SortKeySelector="item => item.Task" FilterTextboxWidth="80">
                    @context.Task
                </GridColumn>
                <GridColumn TItem="Tasks" HeaderText="Description" PropertyName="Description" SortKeySelector="item => item.Description" SortString="Description">
                    @context.Description
                </GridColumn>
                <GridColumn TItem="Tasks" HeaderText="Priority" PropertyName="Notes" SortKeySelector="item => item.Notes" FilterTextboxWidth="40">
                    @context.Notes
                </GridColumn>
            </Grid>
        </div>
    </div>
    <div class="dashboardBox4">
        <div class="dashbordContent">
            <div class="dashboardTitle">
                <h3>What's new</h3>
                <div class="spacer"></div>
                <div class="buttonsDiv">
                    <Button Color="ButtonColor.Info" Outline="true" Size="Size.Small" style="margin:2px;" title="Completed" @onclick="RefreshNews"><span><iconify-icon icon="tdesign:refresh"></iconify-icon></span></Button>
                    <Button Color="ButtonColor.Success" Outline="true" Size="Size.Small" style="margin:2px;" title="Completed" @onclick="OnShowModalNewsAddClick"><span><iconify-icon icon="mingcute:plus-fill"></iconify-icon></span></Button>
                </div>
            </div>
            <hr class="dashboardHr" style="color:black;" />
            @foreach (var whatsNew in news)
            {
                <Card Color="CardColor.Dark" Class="mb-4" Style="width:100%;box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);">
                    <CardHeader class="dashboardTitle">
                        @whatsNew.Notes
                    </CardHeader>
                    <CardBody>
                        <CardTitle>@whatsNew.Title</CardTitle>
                        <div style="display: flex; align-items: center;">

                            @if (whatsNew.Image != null)
                            {
                                <div style="width: 100px; margin-right: 10px;">
                                    <img src="data:image;base64,@Convert.ToBase64String(whatsNew.Image)" style="width: 100%; height: auto; border-radius: 5px;" />
                                </div>
                            }

                            <div style="flex: 1; margin: 2px;">
                                <CardText>@whatsNew.Description</CardText>
                            </div>
                        </div>
                    </CardBody>
                </Card>
            }
        </div>
    </div>
</div>
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

<Modal @ref="modal" Title="@modalTask.Title" IsVerticallyCentered="true">
    <HeaderTemplate>
        @if (!canEdit)
        {
            <Button Color="ButtonColor.Info" @onclick="editTaskFlag" Outline="true"> Edit </Button>
        }
        else
        {
        }
    </HeaderTemplate>
    <BodyTemplate>
        <div class="task-id">
            <span><strong>Task:</strong></span><br />
            @if (canEdit)
            {
                <input type="text" class="custom-input" @bind="@modalTask.Task" />
            }
            else
            {
                <span class="custom-span">@modalTask.Task</span>
            }
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-description">
            <span><strong>Description:</strong></span><br />
            @if (canEdit)
            {
                <input type="text" class="custom-input" @bind="@modalTask.Description" />
            }
            else
            {
                <span class="custom-span">@modalTask.Description</span>
            }
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-status">
            <span><strong>Status:</strong></span><br />
            @if (canEdit)
            {
                @if (taskStatusList == null)
                {
                    <p>Loading...</p>
                }
                else
                {
                    <select class="styled-select" @onchange="OnTaskAccessSelectedEdit" required>
                        <option value="">Select a Task Status</option>
                        @foreach (var access in taskStatusList)
                        {
                            <option value="@access.Id">@access.Status</option>
                        }
                    </select>
                }
            }
            else
            {
                <span class="custom-span">@modalTask.TaskStatus.Status</span>
            }
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-priority">
            <span><strong>Priority:</strong></span><br />
            @if (canEdit)
            {
                @if (tasksPriorities == null)
                {
                    <p>Loading...</p>
                }
                else
                {
                    <select class="styled-select" @onchange="OnTaskPrioritySelectedEdit" required>
                        <option value="">Select a Task Status</option>
                        @foreach (var access in tasksPriorities)
                        {
                            <option value="@access.Id">@access.Priority</option>
                        }
                    </select>
                }
            }
            else
            {
                <span class="custom-span">@modalTask.TasksPriorities.Priority</span>
            }
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-effort">
            <span><strong>Effort Points:</strong></span><br />
            <div class="star-rating">
                @if (canEdit)
                {
                    <span class="star @(1 <= effortPoints ? "filled" : "")" @onclick="(e) => ToggleEffortPoint(1)">★</span>
                    <span class="star @(2 <= effortPoints ? "filled" : "")" @onclick="(e) => ToggleEffortPoint(2)">★</span>
                    <span class="star @(3 <= effortPoints ? "filled" : "")" @onclick="(e) => ToggleEffortPoint(3)">★</span>
                    <span class="star @(4 <= effortPoints ? "filled" : "")" @onclick="(e) => ToggleEffortPoint(4)">★</span>
                    <span class="star @(5 <= effortPoints ? "filled" : "")" @onclick="(e) => ToggleEffortPoint(5)">★</span>
                }
                else
                {
                    <span class="star @(1 <= effortPoints ? "filled" : "")">★</span>
                    <span class="star @(2 <= effortPoints ? "filled" : "")">★</span>
                    <span class="star @(3 <= effortPoints ? "filled" : "")">★</span>
                    <span class="star @(4 <= effortPoints ? "filled" : "")">★</span>
                    <span class="star @(5 <= effortPoints ? "filled" : "")">★</span>
                }
            </div>
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-complete-by">
            <span><strong>Complete By:</strong></span><br />
            @if (canEdit)
            {
                <input type="date" id="completeBy" class="form-control" @bind-value="modalTask.CompleteBy">
            }
            else
            {
                <span class="custom-span">@modalTask.CompleteBy.ToString("yyyy-MM-dd")</span>
            }
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-creation-date">
            <span><strong>Creation Date:</strong></span><br />
            <span class="custom-span">@modalTask.CreationDate.ToString("yyyy-MM-dd")</span>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        @if (!canEdit)
        {
            <Button Color="ButtonColor.Success" @onclick="(e) => setCompleted(modalTask.Id)">Set As Complete</Button>
            <Button Color="ButtonColor.Success" @onclick="(e) => setInProgress(modalTask.Id)">In Progress</Button>
            <Button Color="ButtonColor.Danger" @onclick="(e) => removeTask(modalTask.Id)">Remove</Button>
            <Button Color="ButtonColor.Danger" @onclick="OnHideModalClick">Close</Button>
        }
        else
        {

            <div style="display: flex;">
                <div>
                    <Button Color="ButtonColor.Success" @onclick="() => editTask(modalTask)" Outline="true"> Save </Button>
                </div>
                <div style="margin-left: 5px;">
                    <Button Color="ButtonColor.Danger" @onclick="cancelFlag" Outline="true"> Cancel </Button>
                </div>
            </div>
        }
    </FooterTemplate>
</Modal>

<Modal @ref="modalProgressTask" Title="@modalTask.Title" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="task-id">
            <span><strong>Task:</strong></span><br />
            <span class="custom-span">@modalTask.Task</span>
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-description">
            <span><strong>Description:</strong></span><br />
            <span class="custom-span">@modalTask.Description</span>
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-status">
            <span><strong>Status:</strong></span><br />
            <span class="custom-span">@modalTask.TaskStatus.Status</span>
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-priority">
            <span><strong>Priority:</strong></span><br />
            <span class="custom-span">@modalTask.TasksPriorities.Priority</span>
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-effort">
            <span><strong>Effort Points:</strong></span><br />
            <div class="star-rating">
                <span class="star @(1 <= effortPoints ? "filled" : "")">★</span>
                <span class="star @(2 <= effortPoints ? "filled" : "")">★</span>
                <span class="star @(3 <= effortPoints ? "filled" : "")">★</span>
                <span class="star @(4 <= effortPoints ? "filled" : "")">★</span>
                <span class="star @(5 <= effortPoints ? "filled" : "")">★</span>
            </div>
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-complete-by">
            <span><strong>Complete By:</strong></span><br />
            <span class="custom-span">@modalTask.CompleteBy.ToString("yyyy-MM-dd")</span>
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-creation-date">
            <span><strong>Creation Date:</strong></span><br />
            <span class="custom-span">@modalTask.CreationDate.ToString("yyyy-MM-dd")</span>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Success" @onclick="(e) => setAsOpen(modalTask.Id)">Set As Open</Button>
        <Button Color="ButtonColor.Success" @onclick="(e) => setCompleted(modalTask.Id)">Complete</Button>
        <Button Color="ButtonColor.Danger" @onclick="(e) => removeTask(modalTask.Id)">Remove</Button>
        <Button Color="ButtonColor.Danger" @onclick="OnHideModalProgressClick">Close</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="modalComplete" Title="@modalTask.Title" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="task-id">
            <span><strong>Task:</strong></span><br />
            <span class="custom-span">@modalTask.Task</span>
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-description">
            <span><strong>Description:</strong></span><br />
            <span class="custom-span">@modalTask.Description</span>
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-status">
            <span><strong>Status:</strong></span><br />
            <span class="custom-span">@modalTask.TaskStatus.Status</span>
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-priority">
            <span><strong>Priority:</strong></span><br />
            <span class="custom-span">@modalTask.TasksPriorities.Priority</span>
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-effort">
            <span><strong>Effort Points:</strong></span><br />
            <div class="star-rating">
                <span class="star @(1 <= effortPoints ? "filled" : "")">★</span>
                <span class="star @(2 <= effortPoints ? "filled" : "")">★</span>
                <span class="star @(3 <= effortPoints ? "filled" : "")">★</span>
                <span class="star @(4 <= effortPoints ? "filled" : "")">★</span>
                <span class="star @(5 <= effortPoints ? "filled" : "")">★</span>
            </div>
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-complete-by">
            <span><strong>Complete By:</strong></span><br />
            <span class="custom-span">@modalTask.CompleteBy.ToString("yyyy-MM-dd")</span>
        </div>
        <hr class="dashboardHr" style="color:black;" />
        <div class="task-creation-date">
            <span><strong>Creation Date:</strong></span><br />
            <span class="custom-span">@modalTask.CreationDate.ToString("yyyy-MM-dd")</span>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Success" @onclick="(e) => reverseCompleted(modalTask.Id)">Reverse Task</Button>
        <Button Color="ButtonColor.Danger" @onclick="(e) => removeTask(modalTask.Id)">Remove Task</Button>
        <Button Color="ButtonColor.Danger" @onclick="OnHideModalCompleteClick">Close</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="modalAddTask" Title="@taskModel.Title" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="form-group">
            <label for="task">Task:</label>
            <input type="text" id="task" class="form-control" @bind="taskModel.Task" required>
        </div>

        <div class="form-group">
            <label for="description">Description:</label>
            <textarea id="description" class="form-control" @bind="taskModel.Description" required></textarea>
        </div>

        <div class="form-group">
            <label for="completeBy">Complete By:</label>
            <input type="date" id="completeBy" class="form-control" @bind="taskModel.CompleteBy" required>
        </div>
        <div class="task-effort">
            <span><strong>Effort Points:</strong></span>
            <div class="star-rating">
                <span class="star @(1 <= effortPoints ? "filled" : "")" @onclick="(e) => ToggleEffortPoint(1)">★</span>
                <span class="star @(2 <= effortPoints ? "filled" : "")" @onclick="(e) => ToggleEffortPoint(2)">★</span>
                <span class="star @(3 <= effortPoints ? "filled" : "")" @onclick="(e) => ToggleEffortPoint(3)">★</span>
                <span class="star @(4 <= effortPoints ? "filled" : "")" @onclick="(e) => ToggleEffortPoint(4)">★</span>
                <span class="star @(5 <= effortPoints ? "filled" : "")" @onclick="(e) => ToggleEffortPoint(5)">★</span>
            </div>
        </div>
        <div class="form-group">
            <label for="employeeId">Employee:</label>
            @if (employeesList == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <select class="styled-select" @onchange="OnEmployeeAccessSelected" required>
                    <option value="">Select an Employee</option>
                    @foreach (var access in employeesList)
                    {
                        <option value="@access.Id">@access.User.Email</option>
                    }
                </select>
            }
        </div>

        <div class="form-group">
            <label for="taskStatusId">Task Status:</label>
            @if (taskStatusList == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <select class="styled-select" @onchange="OnTaskAccessSelected" required>
                    <option value="">Select a Task Status</option>
                    @foreach (var access in taskStatusList)
                    {
                        <option value="@access.Id">@access.Status</option>
                    }
                </select>
            }
        </div>
        <div class="form-group">
            <label for="taskStatusId">Task Priority:</label>
            @if (tasksPriorities == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <select class="styled-select" @onchange="OnTaskPrioritySelected" required>
                    <option value="">Select a Task Status</option>
                    @foreach (var access in tasksPriorities)
                    {
                        <option value="@access.Id">@access.Priority</option>
                    }
                </select>
            }
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Success" @onclick="addTask">Add new task</Button>
        <Button Color="ButtonColor.Danger" @onclick="OnHideModalAddClick">Close</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="newsModal" Title="@whatsNewModel.Title" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="task-id">
            <span><strong>Title:</strong></span>
            <span>@whatsNewModel.Title</span>
        </div>
        <div class="task-description">
            <span><strong>Description:</strong></span>
            <span>@whatsNewModel.Description</span>
        </div>
        <div class="task-status">
            <span><strong>Notes:</strong></span>
            <span>@whatsNewModel.Notes</span>
        </div>
        <div class="task-complete-by">
            <span><strong>Date:</strong></span>
            <span>@whatsNewModel.CreationDate.ToString("yyyy-MM-dd")</span>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Danger" @onclick="OnHideModalNewsClick">Close</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="modalAddNews" Title="@whatsNewModel.Title" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="form-group">
            <label for="task">Title:</label>
            <input type="text" id="task" class="form-control" @bind="whatsNewModel.Notes" required>
        </div>

        <div class="form-group">
            <label for="description">Description:</label>
            <textarea id="description" class="form-control" @bind="whatsNewModel.Description" required></textarea>
        </div>

        <div class="form-group">
            <label for="completeBy">Date released:</label>
            <input type="date" id="completeBy" class="form-control" @bind="whatsNewModel.CreationDate" required>
        </div>

        <div class="form-group">
            <label class="custom-file-label">
                <span class="file-icon">&#128193;</span>
                <span class="file-name">Choose File</span>
            </label>
            <div class="custom-file">
                <InputFile class="custom-file-input" OnChange="HandleFileChange" />
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Success" @onclick="AddNews">Add Info</Button>
        <Button Color="ButtonColor.Danger" @onclick="OnHideModalNewsAddClick">Close</Button>
    </FooterTemplate>
</Modal>

<Preload />
@code {
    private IEnumerable<Tasks> tasks;
    private IEnumerable<Tasks> tasksCompleted;
    private List<EnterpriseMaster.DbServices.Models.Database.TaskStatus> taskStatusList = new List<DbServices.Models.Database.TaskStatus>();
    private List<Employees> employeesList = new List<Employees>();
    private Grid<Tasks> gridTasks;
    private Grid<Tasks> gridTasksCompleted;
    private List<TasksPriorities> tasksPriorities = new List<TasksPriorities>();

    protected async override void OnInitialized()
    {
        await updateAllTasks();
        taskStatusList = (await taskServices.GetAllTaskStatuses()).ToList();
        employeesList = (await taskServices.GetAllEmployeesForCurrentCompany()).ToList();
        tasksPriorities = (await taskServices.GetAllTasksPriorities()).ToList();
        news = (await newsServices.GetAllActiveNews()).ToList();
        await gridTasks.RefreshDataAsync();
        await gridTasksCompleted.RefreshDataAsync();
        await gridTasksInProgress.RefreshDataAsync();
        StateHasChanged();
    }

    private int effortPoints;
    private Tasks modalTaskHistory = new Tasks();
    private bool canEdit = false;
    private void ToggleEffortPoint(int starNumber)
    {
        effortPoints = (effortPoints == starNumber) ? 0 : starNumber;
    }

    #region News

    private List<WhatsNew> news = new List<WhatsNew>();
    private Modal newsModal;
    private Modal modalAddNews;
    private WhatsNew whatsNewModel = new WhatsNew();
    private byte[] fileBytes;

    private async Task OnShowModalNewsClick(GridRowEventArgs<Tasks> args)
    {
        whatsNewModel = await whatsNewServices.GetNews(args.Item.Id);
        await newsModal?.ShowAsync();
    }

    private async Task OnHideModalNewsClick()
    {
        await newsModal?.HideAsync();
    } 

    private async Task OnShowModalNewsAddClick()
    {
        whatsNewModel = new WhatsNew();
        whatsNewModel.CreationDate = DateTime.Now;
        await modalAddNews?.ShowAsync();
    }

    private async Task OnHideModalNewsAddClick()
    {
        await modalAddNews?.HideAsync();
    }

    private async Task AddNews()
    {
        try
        {
            whatsNewModel.IsActive = true;
            whatsNewModel.Image = fileBytes;
            whatsNewModel.ModificationDate = DateTime.Now;
            var response = await whatsNewServices.AddNews(whatsNewModel);
            await modalAddNews?.HideAsync();
            if (response)
            {
                ShowMessage(ToastType.Success, "Success!", "Information added succesfully");
                news = (await newsServices.GetAllActiveNews()).ToList();
            }
            else
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a information!");
            }
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", $"{e.Message}");
        }
    }

    private async Task RefreshNews()
    {
        try
        {
            news = (await newsServices.GetAllActiveNews()).ToList();
            ShowMessage(ToastType.Success, "Success!", "Information refreshed succesfully");
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while refreshing this component!");
        }
    }

    private async Task removeNews(int id)
    {
        try
        {
            var response = await whatsNewServices.RemoveNews(id);
            if (response)
            {
                ShowMessage(ToastType.Success, "Success!", "Information removed succesfully");
                news = (await newsServices.GetAllActiveNews()).ToList();
            }
            else
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while removing a information!");
            }
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while removing this component!");
        }
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var selectedFile = e.File;

        if (selectedFile != null)
        {
            using (var stream = selectedFile.OpenReadStream())
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    fileBytes = memoryStream.ToArray();
                }
            }
        }
        else
        {
            fileBytes = null;
        }
    }

    #endregion

    #region DataGrid fillers

    private async Task<GridDataProviderResult<Tasks>> TasksDataProvider(GridDataProviderRequest<Tasks> request)
    {
        if (tasks is null) // pull employees only one time for client-side filtering, sorting, and paging
            tasks = await taskServices.GetAllActiveTasks(); // call a service or an API to pull the employees

        foreach(var item in tasks)
        {
            item.TasksPriorities = await taskServices.GetTaskPrioritiesAsync(item.TasksPriorityId.Value);
            item.Notes = item.TasksPriorities.Priority;
        }
        return await Task.FromResult(request.ApplyTo(tasks));
    }

    private async Task<GridDataProviderResult<Tasks>> TasksCompletedDataProvider(GridDataProviderRequest<Tasks> request)
    {
        if (tasksCompleted is null) // pull employees only one time for client-side filtering, sorting, and paging
            tasksCompleted = await taskServices.GetAllCompletedTasks(); // call a service or an API to pull the employees
        foreach (var item in tasksCompleted)
        {
            item.TasksPriorities = await taskServices.GetTaskPrioritiesAsync(item.TasksPriorityId.Value);
            item.Notes = item.TasksPriorities.Priority;
        }
        return await Task.FromResult(request.ApplyTo(tasksCompleted));
    } 

    private async Task<GridDataProviderResult<Tasks>> TasksProgressDataProvider(GridDataProviderRequest<Tasks> request)
    {
        if (tasksInProgress is null) // pull employees only one time for client-side filtering, sorting, and paging
            tasksInProgress = await taskServices.GetAllInProgressTasks(); // call a service or an API to pull the employees
        foreach (var item in tasksInProgress)
        {
            item.TasksPriorities = await taskServices.GetTaskPrioritiesAsync(item.TasksPriorityId.Value);
            item.Notes = item.TasksPriorities.Priority;
        }
        return await Task.FromResult(request.ApplyTo(tasksInProgress));
    }

    #endregion

    #region TasksMethods

    private async Task setCompleted(int id)
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            var isCompleted = await taskServices.CompleteTask(id);
            var taskCompleted = await taskServices.GetTaskAsync(id);
            tasks = await taskServices.GetAllActiveTasks();
            await updateAllTasks();
            await modal?.HideAsync();
            await modalProgressTask?.HideAsync();
            preloadService.Hide();
            if (isCompleted)
            {
                ShowMessage(ToastType.Success, "Success!", $"Task {taskCompleted.Task} set to copleted");
            }
            else
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while completing a task!");
            }
            await gridTasks.RefreshDataAsync();
            await gridTasksCompleted.RefreshDataAsync();
            await gridTasksInProgress.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
        }
    }

    private async Task reverseCompleted(int id)
    {
        try
        {
            var isReversed = await taskServices.ReverseTask(id);
            await updateAllTasks();
            var taskReversed = await taskServices.GetTaskAsync(id);
            await modalComplete?.HideAsync();
            if (isReversed)
            {
                ShowMessage(ToastType.Success, "Success!", $"Task {taskReversed.Task} reversed");
            }
            else
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while reversing a task!");
            }
            await gridTasks.RefreshDataAsync();
            await gridTasksCompleted.RefreshDataAsync();
            await gridTasksInProgress.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
        }
    }

    private async Task removeTask(int id)
    {
        try
        {
            var taskRemoved = await taskServices.GetTaskAsync(id);
            var isRemoved = await taskServices.RemoveTask(id);
            await updateAllTasks();
            await modalComplete?.HideAsync();
            if (isRemoved)
            {
                ShowMessage(ToastType.Success, "Success!", $"Task {taskRemoved.Task} has been removed");
            }
            else
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while removing a task!");
            }
            await gridTasks.RefreshDataAsync();
            await gridTasksCompleted.RefreshDataAsync();
            await gridTasksInProgress.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
        }
    }

    private async Task setInProgress(int id)
    {
        try
        {
            var taskProgress = await taskServices.GetTaskAsync(id);
            taskProgress.TaskStatusId = 2;
            var isInProgress = await taskServices.UpdateTask(taskProgress);
            await updateAllTasks();
            await modalComplete?.HideAsync();
            await modal?.HideAsync();
            if (isInProgress)
            {
                ShowMessage(ToastType.Success, "Success!", $"Task {taskProgress.Task} has been state as in progress");
            }
            else
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while removing a task!");
            }
            await gridTasksInProgress.RefreshDataAsync();
            await gridTasks.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
        }
    }

    private async Task updateAllTasks()
    {
        tasks = await taskServices.GetAllActiveTasks();
        foreach (var item in tasksInProgress)
        {
            item.TasksPriorities = await taskServices.GetTaskPrioritiesAsync(item.TasksPriorityId.Value);
            item.Notes = item.TasksPriorities.Priority;
        }
        tasksCompleted = await taskServices.GetAllCompletedTasks();
        foreach (var item in tasksInProgress)
        {
            item.TasksPriorities = await taskServices.GetTaskPrioritiesAsync(item.TasksPriorityId.Value);
            item.Notes = item.TasksPriorities.Priority;
        }
        tasksInProgress = await taskServices.GetAllInProgressTasks();
        foreach (var item in tasksInProgress)
        {
            item.TasksPriorities = await taskServices.GetTaskPrioritiesAsync(item.TasksPriorityId.Value);
            item.Notes = item.TasksPriorities.Priority;
        }
    }

    private async Task setAsOpen(int id)
    {
        try
        {
            var taskProgress = await taskServices.GetTaskAsync(id);
            taskProgress.TaskStatusId = 1;
            var isInProgress = await taskServices.UpdateTask(taskProgress);
            await updateAllTasks();
            await modalProgressTask?.HideAsync();
            if (isInProgress)
            {
                ShowMessage(ToastType.Success, "Success!", $"Task {taskProgress.Task} has been state as open");
            }
            else
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while setting a task to open");
            }
            await gridTasks.RefreshDataAsync();
            await gridTasksInProgress.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
        }
    }

    private async Task editTaskFlag()
    {
        modalTaskHistory = modalTask;
        canEdit = !canEdit;
    } 
    private async Task cancelFlag()
    {
        modalTask = modalTaskHistory;
        canEdit = !canEdit;
    }
    private async Task editTask(Tasks task)
    {
        try
        {
            task.EffortPoints = effortPoints;

            if (selectedPriorityIdEdit == 0 || selectedStatusIdEdit == 0)
            {
                ShowMessage(ToastType.Warning, "Warning!", "You must select priority and status of the task!");
                modal?.HideAsync();
                canEdit = false;
                return;
            }

            task.TasksPriorityId = selectedPriorityIdEdit;
            task.TaskStatusId = selectedStatusIdEdit;
            var response = await taskServices.UpdateTask(task);
            await updateAllTasks();
            tasks = (await taskServices.GetAllActiveTasks()).ToList();
            preloadService.Hide();
            modal?.HideAsync();
            if (response)
            {
                ShowMessage(ToastType.Success, "Success!", "Task updated succesfully");
            }
            else
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while updating a task!");
            }
            canEdit = false;
            await gridTasks.RefreshDataAsync();
            await gridTasksCompleted.RefreshDataAsync();
            await gridTasksInProgress.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
        }
    }

    #endregion

    #region InProgress

    private Modal modalProgressTask;
    private Grid<Tasks> gridTasksInProgress;
    private List<Tasks> tasksInProgress = new List<Tasks>();

    #endregion

    #region ModalAddTask

    private Modal modalAddTask;
    private int selectedTaskStatusId; 
    private int selectedEmployeeId; 
    private int selectedPriorityId; 
    private int selectedPriorityIdEdit = 0;
    private int selectedStatusIdEdit = 0;
    private Tasks taskModel = new Tasks();

    private async Task OnShowModalAddTaskClick()
    {
        taskModel = new Tasks();
        taskModel.CompleteBy = DateTime.Now;
        await modalAddTask?.ShowAsync();
    }

    private async Task OnHideModalAddTaskClick()
    {
        await modalAddTask?.HideAsync();
    }

    private void OnTaskPrioritySelectedEdit(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedPriorityIdEdit = selectedId;
        }
    }  
    private void OnTaskAccessSelectedEdit(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedStatusIdEdit = selectedId;
        }
    } 

    private void OnTaskPrioritySelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedPriorityId = selectedId;
        }
    }

    private void OnTaskAccessSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedTaskStatusId = selectedId;
        }
    }
    private void OnEmployeeAccessSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedEmployeeId = selectedId;
        }
    }

    private async Task addTask()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            if (string.IsNullOrEmpty(taskModel.Task) ||
                string.IsNullOrEmpty(taskModel.Description))
            {
                ShowMessage(ToastType.Warning, "Warning!", "Task and Description cannot be empty");
                return;
            }
            taskModel.CreationDate = DateTime.Now;
            taskModel.ModificationDate = DateTime.Now;
            taskModel.EmployeeId = selectedEmployeeId;
            taskModel.IsActive = true;
            taskModel.TaskStatusId = selectedTaskStatusId;
            taskModel.TasksPriorityId = selectedPriorityId;
            taskModel.EffortPoints = effortPoints;
            var response = await taskServices.AddNewTask(taskModel);
            await updateAllTasks();
            preloadService.Hide();
            //NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            if (response)
            {
                ShowMessage(ToastType.Success, "Success!", "Task added succesfully");
            }
            else
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a task!");
            }
            modalAddTask?.HideAsync();
            await gridTasks.RefreshDataAsync();
            await gridTasksCompleted.RefreshDataAsync();
            await gridTasksInProgress.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
        }
    }

    #endregion

    #region ModalRowProperties

    private Modal modal;
    private Modal modalComplete;
    private Tasks modalTask = new Tasks();

    private async Task OnShowModalClick(GridRowEventArgs<Tasks> args)
    {
        modalTask = await taskServices.GetTaskAsync(args.Item.Id);
        modalTask.TasksPriorities = await taskServices.GetTaskPrioritiesAsync(modalTask.TasksPriorityId.Value);
        modalTask.TaskStatus = taskStatusList.Where(item => item.Id == modalTask.TaskStatusId).FirstOrDefault();
        effortPoints = (int)modalTask.EffortPoints;
        await modal?.ShowAsync();
    }

    private async Task OnShowCompletedModalClick(GridRowEventArgs<Tasks> args)
    {
        modalTask = await taskServices.GetTaskAsync(args.Item.Id);
        modalTask.TasksPriorities = await taskServices.GetTaskPrioritiesAsync(modalTask.TasksPriorityId.Value);
        modalTask.TaskStatus = taskStatusList.Where(item => item.Id == modalTask.TaskStatusId).FirstOrDefault();
        effortPoints = (int)modalTask.EffortPoints;
        await modalComplete?.ShowAsync();
    } 

    private async Task OnShowProgressModalClick(GridRowEventArgs<Tasks> args)
    {
        modalTask = await taskServices.GetTaskAsync(args.Item.Id);
        modalTask.TasksPriorities = await taskServices.GetTaskPrioritiesAsync(modalTask.TasksPriorityId.Value);
        modalTask.TaskStatus = taskStatusList.Where(item => item.Id == modalTask.TaskStatusId).FirstOrDefault();
        effortPoints = (int)modalTask.EffortPoints;
        await modalProgressTask?.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }

    private async Task OnHideModalAddClick()
    {
        await modalAddTask?.HideAsync();
    }

    private async Task OnHideModalCompleteClick()
    {
        await modalComplete?.HideAsync();
    }
    
    private async Task OnHideModalProgressClick()
    {
        await modalProgressTask?.HideAsync();
    }
    #endregion
}