@page "/"
@using BlazorBootstrap
@using EnterpriseMaster.DbServices.Models.Database;
@using EnterpriseMaster.DesktopApp.Data.Models;
@using EnterpriseMaster.DesktopApp.Data.Services.DashboardServices;
@inject TaskServices taskServices
@inject WhatsNewInfoService whatsNewServices

<div class="dashboardGrid">
    <div class="dashboardBox1">
        <div class="dashbordContent">
            <div class="task-list">
                <div class="dashboardTitle">
                    <h3>Tasks List For Today</h3>
                    <Button Color="ButtonColor.Success" Outline="true" Size="Size.Small" style="margin:2px;" @onclick="OnShowModalAddTaskClick" title="Completed"><span><iconify-icon icon="mingcute:plus-fill"></iconify-icon></span></Button>
                </div>
                <hr class="dashboardHr" style="color:black;"/>
               <Grid TItem="Tasks"
                      AllowFiltering="true"
                      AllowPaging="true"
                      AllowSorting="true"
                      AllowRowClick="true"
                      Class="table table-hover table-bordered table-striped"
                      DataProvider="TasksDataProvider"
                      FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                      HeaderRowCssClass="bg-dark text-white border-bottom-0"
                      PageSize="5"
                      PageSizeSelectorVisible="true"
                      PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                      PaginationItemsTextFormat="{0} - {1} of {2} pages"
                      ItemsPerPageText="Items per page"
                      Responsive="true"
                      OnRowClick="OnShowModalClick">
                    <GridColumn TItem="Tasks" HeaderText="Id" PropertyName="Id" SortKeySelector="item => item.Id" FilterTextboxWidth="80">
                        @context.Id
                    </GridColumn>
                    <GridColumn TItem="Tasks" HeaderText="Description" PropertyName="Description" SortKeySelector="item => item.Description" SortString="Description">
                        @context.Description
                    </GridColumn>
                    <GridColumn TItem="Tasks" HeaderText="CreationDate" PropertyName="CreationDate" SortKeySelector="item => item.CreationDate" FilterTextboxWidth="40">
                        @context.CreationDate
                    </GridColumn>
                    <GridColumn TItem="Tasks" HeaderText="Actions" Filterable="false" TextAlignment="Alignment.Center">
                        <Button Color="ButtonColor.Success" Outline="true" Size="Size.Small" style="margin:2px;"><span><iconify-icon icon="mdi:check-thick"></iconify-icon></span></Button>
                        <Button Color="ButtonColor.Danger" Outline="true" Size="Size.Small" style="margin:2px;"><span><iconify-icon icon="mdi:remove-bold"></iconify-icon></span></Button>
                    </GridColumn>
                </Grid>
            </div>
        </div>
    </div>
    <div class="dashboardBox2">
        <div class="dashbordContent">
            <div class="dashboardTitle">
                <h3>Completed Tasks</h3>
            </div>
            <hr class="dashboardHr" style="color:black;" />
            <Grid TItem="Tasks"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  Class="table table-hover table-bordered table-striped"
                  DataProvider="TasksDataProvider"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true"
                  OnRowClick="OnShowModalClick">
                <GridColumn TItem="Tasks" HeaderText="Id" PropertyName="Id" SortKeySelector="item => item.Id" FilterTextboxWidth="80">
                    @context.Id
                </GridColumn>
                <GridColumn TItem="Tasks" HeaderText="Description" PropertyName="Description" SortKeySelector="item => item.Description" SortString="Description">
                    @context.Title
                </GridColumn>
                <GridColumn TItem="Tasks" HeaderText="DateCompleted" PropertyName="ModificationDate" SortKeySelector="item => item.ModificationDate" FilterTextboxWidth="40">
                    @context.ModificationDate
                </GridColumn>
                <GridColumn TItem="Tasks" HeaderText="Actions" Filterable="false" TextAlignment="Alignment.Center">
                    <Button Color="ButtonColor.Success" Outline="true" Size="Size.Small" style="margin:2px;" title="Completed"><span><iconify-icon icon="jam:refresh-reverse"></iconify-icon></span></Button>
                    <Button Color="ButtonColor.Danger" Outline="true" Size="Size.Small" style="margin:2px;" title="remove"><span><iconify-icon icon="mdi:remove-bold"></iconify-icon></span></Button>
                </GridColumn>
            </Grid>
        </div>
    </div>
    <div class="dashboardBox3">
        <div class="dashbordContent">
            <div class="dashboardTitle">
                <h3>Reminder</h3>
                <Button Color="ButtonColor.Success" Outline="true" Size="Size.Small" style="margin:2px;" title="Completed"><span><iconify-icon icon="mingcute:plus-fill"></iconify-icon></span></Button>
            </div>
            <hr class="dashboardHr" style="color:black;" />
            3
        </div>
    </div>
    <div class="dashboardBox4">
        <div class="dashbordContent">
            <div class="dashboardTitle">
                <h3>What's new</h3>
                <Button Color="ButtonColor.Success" Outline="true" Size="Size.Small" style="margin:2px;" title="Completed"><span><iconify-icon icon="mingcute:plus-fill"></iconify-icon></span></Button>
            </div>
            <hr class="dashboardHr" style="color:black;" />
            @for(int i = 0; i < 10; i++){
                <Card Color="CardColor.Dark" Class="mb-4" Style="width:100%;box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);">
                    <CardHeader>Header</CardHeader>
                    <CardBody>
                        <CardTitle>Dark card title</CardTitle>
                        <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>
                    </CardBody>
                </Card>
            }
        </div>
    </div>
</div>

<Modal @ref="modal" Title="@modalModel.Title" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="task-id">
            <span><strong>ID:</strong></span>
            <span>@modalModel.Id</span>
        </div>
        <div class="task-description">
            <span><strong>Description:</strong></span>
            <span>@modalModel.Description</span>
        </div>
        <div class="task-status">
            <span><strong>Status:</strong></span>
            <span>@modalModel.Status</span>
        </div>
        <div class="task-complete-by">
            <span><strong>Complete By:</strong></span>
            <span>@modalModel.CompleteBy.ToString("yyyy-MM-dd")</span>
        </div>
        <div class="task-creation-date">
            <span><strong>Creation Date:</strong></span>
            <span>@modalModel.CreationDate.ToString("yyyy-MM-dd")</span>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Success" @onclick="addTask">Set As Complete</Button>
        <Button Color="ButtonColor.Danger" @onclick="OnHideModalClick">Remove</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="modalAddTask" Title="@modalModel.Title" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="form-group">
            <label for="task">Task:</label>
            <input type="text" id="task" class="form-control" @bind="taskModel.Task" required>
        </div>

        <div class="form-group">
            <label for="description">Description:</label>
            <textarea id="description" class="form-control" @bind="taskModel.Description"></textarea>
        </div>

        <div class="form-group">
            <label for="completeBy">Complete By:</label>
            <input type="date" id="completeBy" class="form-control" @bind="taskModel.CompleteBy">
        </div>

        <div class="form-group">
            <label for="employeeId">Employee:</label>
            <select id="employeeId" class="form-control" @bind="taskModel.EmployeeId">
                @foreach (var employee in employees)
                {
                    <option value="@employee.Id">@employee.FirstName</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="taskStatusId">Task Status:</label>
            <select id="taskStatusId" class="form-control" @bind="taskModel.TaskStatusId">
                @foreach (var taskStatus in taskStatuses)
                {
                    <option value="@taskStatus.Id">@taskStatus.Status</option>
                }
            </select>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Success" @onclick="addTask">Add new task</Button>
        <Button Color="ButtonColor.Danger" @onclick="OnHideModalClick">Close</Button>
    </FooterTemplate>
</Modal>

@code {
    private List<Tasks> tasks = new List<Tasks>();
    private List<Tasks> tasksCompleted = new List<Tasks>();

    protected async override Task OnInitializedAsync()
    {
        tasks = (await taskServices.GetAllActiveTasks()).ToList();
        tasksCompleted = (await taskServices.GetAllCompletedTasks()).ToList();
    }

    private async Task<GridDataProviderResult<Tasks>> TasksDataProvider(GridDataProviderRequest<Tasks> request)
    {
        return await Task.FromResult(request.ApplyTo(tasks));
    }

    #region TasksMethods

    private Tasks taskModel = new Tasks();

    private async Task setCompleted(int id)
    {
        await taskServices.CompleteTask(id);
        tasks = await taskServices.GetAllActiveTasks();
        tasksCompleted = await taskServices.GetAllCompletedTasks();
    }

    private async Task addTask()
    {
        taskModel.CreationDate = DateTime.Now;
        taskModel.ModificationDate = DateTime.Now;
        await taskServices.AddNewTask(taskModel);
        tasks = await taskServices.GetAllActiveTasks();
        tasksCompleted = await taskServices.GetAllCompletedTasks();
    }

    private async Task reverseCompleted(int id)
    {
        await taskServices.AddNewTask(taskModel);
        tasks = await taskServices.GetAllActiveTasks();
        tasksCompleted = await taskServices.GetAllCompletedTasks();
    }

    private async Task removeTask(int id)
    {
        await taskServices.RemoveTask(id);
        tasks = await taskServices.GetAllActiveTasks();
        tasksCompleted = await taskServices.GetAllCompletedTasks();
    }

    #endregion

    #region News

    #endregion

    #region Remonder

    #endregion

    #region ModalAddTask

    private Modal modalAddTask;

    private List<Employees> employees = new List<Employees>
    {
        new Employees { Id = 1, FirstName = "Employee 1" },
        new Employees { Id = 2, FirstName = "Employee 2" },
        // Add more employees
    };

    private List<EnterpriseMaster.DbServices.Models.Database.TaskStatus> taskStatuses = new List<EnterpriseMaster.DbServices.Models.Database.TaskStatus>
    {
        new EnterpriseMaster.DbServices.Models.Database.TaskStatus { Id = 1, Status = "Status 1" },
        new EnterpriseMaster.DbServices.Models.Database.TaskStatus { Id = 2, Status = "Status 2" },
        // Add more task statuses
    };

    private async Task OnShowModalAddTaskClick()
    {
        await modalAddTask?.ShowAsync();
    }

    private async Task OnHideModalAddTaskClick()
    {
        await modalAddTask?.HideAsync();
    }

    #endregion

    #region ModalTaskWindow

    private Modal modal;
    private ModalModel modalModel = new ModalModel();
    private string title = "Test Case";

    private async Task OnShowModalClick()
    {
        modalModel = new ModalModel()
        {
            Id = 1,
            Title = "Example Task",
            Description = "This is an example task.",
            Status = "In Progress",
            CompleteBy = DateTime.Now.Add(TimeSpan.FromDays(7)),
            CreationDate = DateTime.Now.Add(TimeSpan.FromDays(-7))
        };
        await modal?.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }

    #endregion
}
