@page "/orders"
@using BlazorBootstrap
@using EnterpriseMaster.DbServices.Models.Database;
@using EnterpriseMaster.DesktopApp.Data.Models;
@using EnterpriseMaster.DesktopApp.Data.Services.Inventory;
@using EnterpriseMaster.DesktopApp.Data.Services.OrdersServices;
@using EnterpriseMaster.DesktopApp.Helpers.Enums;
@inherits MainLayout
@inject OrderService orderService
@inject InventoryService inventoryService

<Tabs EnableFadeEffect="true">
    <Tab IsActive="true">
        <TitleTemplate>
            <Icon Name="IconName.BorderAll" /> Purchase Orders
        </TitleTemplate>
        <Content>
            <br />
            <Grid TItem="OrderViewModel"
                  @ref="gridOrderViewModel"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  DataProvider="OrderViewModelDataProvider"
                  Class="table table-hover table-bordered table-striped"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true">
                <GridColumn TItem="OrderViewModel" HeaderText="Part Name" PropertyName="ProductName" SortKeySelector="item => item.ProductName">
                    @context.ProductName
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Product Code" PropertyName="ProductCode" SortKeySelector="item => item.ProductCode">
                    @context.ProductCode
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Price To Pay($)" PropertyName="PricePaid" SortKeySelector="item => item.PricePaid">
                    @context.PricePaid
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Order Number" PropertyName="OrderNumber" SortKeySelector="item => item.OrderNumber">
                    @context.OrderNumber
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Payment Term" PropertyName="PaymentTerm" SortKeySelector="item => item.PaymentTerm">
                    @context.PaymentTerm
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Quantity" PropertyName="Quantity" SortKeySelector="item => item.Quantity">
                    @context.Quantity
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Quantity Type" PropertyName="QuantityType" SortKeySelector="item => item.QuantityType">
                    @context.QuantityType
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Order Status" PropertyName="OrderStatus" SortKeySelector="item => item.OrderStatus">
                    @context.OrderStatus
                </GridColumn>
            </Grid>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.ArrowDownCircle" /> Parts Orders
        </TitleTemplate>
        <Content>
            <br />
            <Accordion Class="container">
                @foreach (var item in partsOrders)
                {
                    <AccordionItem Title=@item.PartName>
                        <Content>
                            <b>@item.Description</b>
                            <br />
                            <div>
                                <div class="mb-3">
                                    <label class="form-label">Amount</label>
                                    <NumberInput TValue="int" @bind-Value="@item.QuantityInStock" Placeholder="Enter amount" />
                                    <br>
                                    <Button Color="ButtonColor.Success" Size="Size.Medium" @onclick="() => MakeAnOrder(item.Id, item.QuantityInStock)"> Make Purchase Order </Button>
                                </div>
                            </div>
                        </Content>
                    </AccordionItem>
                }
            </Accordion>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.AspectRatio" /> Parts Management
        </TitleTemplate>
        <Content>
            <br />
            <div class="containerPanel">
                <div class="topPanel-panel">
                    <br />
                    <Grid TItem="PartsViewModel"
                            @ref="gridPartsViewModel"
                            AllowFiltering="true"
                            AllowPaging="true"
                            AllowSorting="true"
                            AllowRowClick="true"
                            DataProvider="PartsViewModelDataProvider"
                            Class="table table-hover table-bordered table-striped"
                            FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                            HeaderRowCssClass="bg-dark text-white border-bottom-0"
                            PageSize="5"
                            PageSizeSelectorVisible="true"
                            PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                            PaginationItemsTextFormat="{0} - {1} of {2} pages"
                            ItemsPerPageText="Items per page"
                            Responsive="true">
                        <GridColumn TItem="PartsViewModel" HeaderText="Product Name" PropertyName="ProductName" SortKeySelector="item => item.ProductName">
                            @context.ProductName
                        </GridColumn>
                        <GridColumn TItem="PartsViewModel" HeaderText="Product Code" PropertyName="ProductCode" SortKeySelector="item => item.ProductCode">
                            @context.ProductCode
                        </GridColumn>
                        <GridColumn TItem="PartsViewModel" HeaderText="Description" PropertyName="Description" SortKeySelector="item => item.Description">
                            @context.Description
                        </GridColumn>
                        <GridColumn TItem="PartsViewModel" HeaderText="Part Name" PropertyName="PartName" SortKeySelector="item => item.PartName">
                            @context.PartName
                        </GridColumn>
                        <GridColumn TItem="PartsViewModel" HeaderText="Quantity In Stock" PropertyName="QuantityInStock" SortKeySelector="item => item.QuantityInStock">
                            @context.QuantityInStock
                        </GridColumn>
                        <GridColumn TItem="PartsViewModel" HeaderText="Unit Cost" PropertyName="UnitCost" SortKeySelector="item => item.UnitCost">
                            @context.UnitCost
                        </GridColumn>
                    </Grid>
                </div>
                <div class="bottomPanel-panel">
                    <div class="bottomPanel-left">
                        <h3>Add New Part</h3>
                        <hr />
                        <div class="containerSupplierAdd">
                            <div class="topSupplierAdd">
                                <div class="top-leftSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="partName" Placeholder="Enter Part Name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="descriptionPart" Placeholder="Enter Description" />
                                    </div>
                                    <div class="mb-3">
                                        <label for="unitCostEdit">Unit Cost:</label>
                                        <input type="number" id="unitCostEdit" @bind="unitCost" placeholder="Enter Unit Cost" />
                                    </div>

                                    <div class="mb-3">
                                        <label for="quantityInStockEdit">Quantity In Stock:</label>
                                        <input type="number" id="quantityInStockEdit" @bind="quantityInStock" placeholder="Enter Quantity In Stock" />
                                    </div>
                                    <div class="mb-3">
                                    </div>
                                </div>
                                <div class="top-rightSupplierAdd">
                                    <div class="mb-3">
                                        @if (productsAvailable == null)
                                        {
                                            <p>Loading...</p>
                                        }
                                        else
                                        {
                                            <select id="employeeDropdown" class="dropdown-style" @onchange="OnPartProductSelected">
                                                <option>Select Product</option>
                                                @foreach (var access in productsAvailable)
                                                {
                                                    <option value="@access.Id">@access.ProductName (@access.ProductCode)</option>
                                                }
                                            </select>
                                        }
                                    </div>
                                    <div class="mb-3">

                                        @if (suppliersList == null)
                                        {
                                            <p>Loading...</p>
                                        }
                                        else
                                        {
                                            <select id="employeeDropdown" class="dropdown-style" @onchange="OnPartSupplierSelected">
                                                <option>Select Supplier</option>
                                                @foreach (var access in suppliersList)
                                                {
                                                    <option value="@access.Id">@access.ContactName (@access.CompanyName)</option>
                                                }
                                            </select>
                                        }
                                    </div>
                                    <div class="mb-3">
                                        @if (quantityTypesAvailable == null)
                                        {
                                            <p>Loading...</p>
                                        }
                                        else
                                        {
                                            <select id="employeeDropdown" class="dropdown-style" @onchange="OnPartQuantityTypesSelected">
                                                <option>Select Quantity Type</option>
                                                @foreach (var access in quantityTypesAvailable)
                                                {
                                                    <option value="@access.Id">@access.Type</option>
                                                }
                                            </select>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="bottomSupplierAdd">
                                <button class="button-36" @onclick="AddPart">Add New Supplier</button>
                            </div>
                        </div>
                    </div>
                    <div class="bottomPanel-right">
                        <div class="column-containerSupplierAdd">
                            <div class="columnSupplierAdd">
                                <h3>Edit Part</h3>
                            </div>
                            <div class="columnSupplierAdd">
                                <div class="row">
                                    <div class="col col-dropdown">
                                        @if (partsAvailable == null)
                                        {
                                            <p>Loading...</p>
                                        }
                                        else
                                        {
                                            <select id="employeeDropdown" class="dropdown-style" @onchange="OnPartSelected">
                                                <option>Select Part</option>
                                                @foreach (var access in partsAvailable)
                                                {
                                                    <option value="@access.Id">@access.PartName (@access.Products.ProductName)</option>
                                                }
                                            </select>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="containerSupplierAdd">
                            <div class="topSupplierAdd">
                                <div class="top-leftSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="partNameEdit" Placeholder="Enter Part Name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="descriptionPartEdit" Placeholder="Enter Description" />
                                    </div>
                                    <div class="mb-3">
                                        <label for="unitCostEdit">Unit Cost:</label>
                                        <input type="number" id="unitCostEdit" @bind="unitCostEdit" placeholder="Enter Unit Cost" />
                                    </div>

                                    <div class="mb-3">
                                        <label for="quantityInStockEdit">Quantity In Stock:</label>
                                        <input type="number" id="quantityInStockEdit" @bind="quantityInStockEdit" placeholder="Enter Quantity In Stock" />
                                    </div>
                                    <div class="mb-3">
                                    </div>
                                </div>
                                <div class="top-rightSupplierAdd">
                                    <div class="mb-3">
                                        @if (productsAvailable == null)
                                        {
                                            <p>Loading...</p>
                                        }
                                        else
                                        {
                                            <select id="employeeDropdown" class="dropdown-style" @onchange="OnPartProductSelectedEdit">
                                                <option>Select Product</option>
                                                @foreach (var access in productsAvailable)
                                                {
                                                    <option value="@access.Id">@access.ProductName (@access.ProductCode)</option>
                                                }
                                            </select>
                                        }
                                    </div>
                                    <div class="mb-3">
                                        @if (suppliersList == null)
                                        {
                                            <p>Loading...</p>
                                        }
                                        else
                                        {
                                            <select id="employeeDropdown" class="dropdown-style" @onchange="OnPartSupplierSelectedEdit">
                                                <option>Select Supplier</option>
                                                @foreach (var access in suppliersList)
                                                {
                                                    <option value="@access.Id">@access.ContactName (@access.CompanyName)</option>
                                                }
                                            </select>
                                        }
                                    </div>
                                    <div class="mb-3">
                                        @if (quantityTypesAvailable == null)
                                        {
                                            <p>Loading...</p>
                                        }
                                        else
                                        {
                                            <select id="employeeDropdown" class="dropdown-style" @onchange="OnPartQuantityTypesSelectedEdit">
                                                <option>Select Quantity Type</option>
                                                @foreach (var access in quantityTypesAvailable)
                                                {
                                                    <option value="@access.Id">@access.Type</option>
                                                }
                                            </select>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="bottomSupplierAdd">
                                <button class="button-36" @onclick="EditPart">Edit Supplier</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.BookHalf" /> Suppliers
        </TitleTemplate>
        <Content>
            <br />
            <div class="containerPanel">
                <div class="topPanel-panel">
                    <br />
                    <Grid TItem="SuppliersViewModel"
                          @ref="gridSupplierViewModel"
                          AllowFiltering="true"
                          AllowPaging="true"
                          AllowSorting="true"
                          AllowRowClick="true"
                          DataProvider="SuppliersViewModelDataProvider"
                          Class="table table-hover table-bordered table-striped"
                          FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                          HeaderRowCssClass="bg-dark text-white border-bottom-0"
                          PageSize="5"
                          PageSizeSelectorVisible="true"
                          PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                          PaginationItemsTextFormat="{0} - {1} of {2} pages"
                          ItemsPerPageText="Items per page"
                          Responsive="true">
                        <GridColumn TItem="SuppliersViewModel" HeaderText="Company Name" PropertyName="CompanyName" SortKeySelector="item => item.CompanyName">
                            @context.CompanyName
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="Contact Name" PropertyName="ContactName" SortKeySelector="item => item.ContactName">
                            @context.ContactName
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="Email" PropertyName="Email" SortKeySelector="item => item.Email">
                            @context.Email
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="Phone" PropertyName="Phone" SortKeySelector="item => item.Phone">
                            @context.Phone
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="House Number" PropertyName="HouseNumber" SortKeySelector="item => item.HouseNumber">
                            @context.HouseNumber
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="Street" PropertyName="Street" SortKeySelector="item => item.Street">
                            @context.Street
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="Post Code" PropertyName="PostCode" SortKeySelector="item => item.PostCode">
                            @context.PostCode
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="City" PropertyName="City" SortKeySelector="item => item.City">
                            @context.City
                        </GridColumn>
                    </Grid>
                </div>
                <div class="bottomPanel-panel">
                    <div class="bottomPanel-left">
                        <h3>Add New Supplier</h3>
                        <hr />
                        <div class="containerSupplierAdd">
                            <div class="topSupplierAdd">
                                <div class="top-leftSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="companyName" Placeholder="Enter Company Name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="contactName" Placeholder="Enter Contact Name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="description" Placeholder="Enter Description" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="phone" Placeholder="Enter Phone" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="email" Placeholder="Enter Email" />
                                    </div>
                                </div>
                                <div class="top-rightSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="houseNumber" Placeholder="Enter House Number" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="street" Placeholder="Enter Street" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="city" Placeholder="Enter City" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="postalCode" Placeholder="Enter Postal Code" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="country" Placeholder="Enter Country" />
                                    </div>
                                </div>
                            </div>
                            <div class="bottomSupplierAdd">
                                <button class="button-36" @onclick="AddSupplier">Add New Supplier</button>
                            </div>
                        </div>
                    </div>
                    <div class="bottomPanel-right">
                        <div class="column-containerSupplierAdd">
                            <div class="columnSupplierAdd">
                                <h3>Edit Supplier</h3>
                            </div>
                            <div class="columnSupplierAdd">
                                <div class="row">
                                    <div class="col col-dropdown">
                                        @if (suppliersList == null)
                                        {
                                            <p>Loading...</p>
                                        }
                                        else
                                        {
                                            <select id="employeeDropdown" class="dropdown-style" @onchange="OnSupplierSelected">
                                                <option>Select Supplier</option>
                                                @foreach (var access in suppliersList)
                                                {
                                                    <option value="@access.Id">@access.ContactName (@access.CompanyName)</option>
                                                }
                                            </select>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="containerSupplierAdd">
                            <div class="topSupplierAdd">
                                <div class="top-leftSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="companyNameEdit" Placeholder="Enter Company Name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="contactNameEdit" Placeholder="Enter Contact Name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="descriptionEdit" Placeholder="Enter Description" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="phoneEdit" Placeholder="Enter Phone" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="emailEdit" Placeholder="Enter Email" />
                                    </div>
                                </div>
                                <div class="top-rightSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="houseNumberEdit" Placeholder="Enter House Number" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="streetEdit" Placeholder="Enter Street" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="cityEdit" Placeholder="Enter City" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="postalCodeEdit" Placeholder="Enter Postal Code" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="countryEdit" Placeholder="Enter Country" />
                                    </div>
                                </div>
                            </div>
                            <div class="bottomSupplierAdd">
                                <button class="button-36" @onclick="editSupplier">Edit Supplier</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Bezier" /> Order Management
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="left-panel">1</div>
                <div class="right-panel">
                    <div class="top-right">2</div>
                    <div class="bottom-right">3</div>
                </div>
            </div>
        </Content>
    </Tab> 
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Binoculars" /> Order Reports
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="left-panel">1</div>
                <div class="right-panel">
                    <div class="top-right">2</div>
                    <div class="bottom-right">3</div>
                </div>
            </div>
        </Content>
    </Tab>
</Tabs>
<Preload />
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
@code {
    protected async override void OnInitialized()
    {
        try
        {
            suppliers = await orderService.GetAllSupplierForGridAsync();
            purchaseOrders = await orderService.GetAllPurchaseOrdersForGridAsync();
            suppliersList = await orderService.GetAllSupplierAsync();
            quantityTypesAvailable = await inventoryService.GetAllQuantityTypesAsync();
            productsAvailable = await inventoryService.GetAllProductsAsync();
            partsAvailable = await orderService.GetAllPartsAsync();
            parts = await orderService.GetAllPartsForGridAsync();
            partsOrders = await orderService.GetAllPartsAsync();
            foreach (var part in partsAvailable)
            {
                part.Products = await inventoryService.GetProductAsync(part.ProductsId.Value);
            }
            await gridOrderViewModel.RefreshDataAsync();
            await gridSupplierViewModel.RefreshDataAsync();
            await gridPartsViewModel.RefreshDataAsync();
        }
        catch(Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
        }
       
    }

    #region OrderViewModel


    #endregion

    #region PurchaseOrders

    private List<OrderViewModel> purchaseOrders = new List<OrderViewModel>();
    private Grid<OrderViewModel> gridOrderViewModel;
    private async Task<GridDataProviderResult<OrderViewModel>> OrderViewModelDataProvider(GridDataProviderRequest<OrderViewModel> request)
    {
        if (purchaseOrders is null)
            purchaseOrders = await orderService.GetAllPurchaseOrdersForGridAsync();

        return await Task.FromResult(request.ApplyTo(purchaseOrders));
    }

    #endregion

    #region Parts Orders

    private List<Parts> partsOrders = new List<Parts>();

    private async Task MakeAnOrder(int id, int count)
    {
        try
        {
            var part = await orderService.GetPartsAsync(id);

            var order = new PurchaseOrders()
            {
                DeliveryDate = DateTime.Now.AddDays(7),
                CreationDate = DateTime.Now,
                IsActive = true,
                EmployeeId = Config.UserId,
                OrderDate = DateTime.Now,
                ModificationDate = DateTime.Now,
                PricePaid = count * part.UnitCost + (part.UnitCost * 0.23m),
                PaymentTerm = DateTime.Now.AddDays(3),
                PurchaseOrderNumber = Guid.NewGuid().ToString(),
                Quantity = count,
                SupplierId = part.SuppliersId,
                PartId = part.Id,
                CompanyId = Config.CompanyId,
                Discount = 0,
                QuantityTypeId = part.QuantityTypeId,
                RejectedReason = "",
                OrderStatuseId = (int)StatusForOrder.Open
            };

            if(await orderService.AddPurchaseOrderAsync(order))
            {
                ShowMessage(ToastType.Success, "Success!", "Order added successfully!");
                purchaseOrders = await orderService.GetAllPurchaseOrdersForGridAsync();
                preloadService.Hide();
                StateHasChanged();
                await gridOrderViewModel.RefreshDataAsync();
                return;
            };

            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a Order!");
            preloadService.Hide();
            StateHasChanged();
            await gridPartsViewModel.RefreshDataAsync();

        }
        catch(Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
            preloadService.Hide();
        }
    }

    #endregion

    #region Parts Management

    private List<PartsViewModel> parts = new List<PartsViewModel>();
    private Grid<PartsViewModel> gridPartsViewModel;
    private async Task<GridDataProviderResult<PartsViewModel>> PartsViewModelDataProvider(GridDataProviderRequest<PartsViewModel> request)
    {
        if (parts is null)
            parts = await orderService.GetAllPartsForGridAsync();

        return await Task.FromResult(request.ApplyTo(parts));
    }

    private string partName = "";
    private string descriptionPart = "";
    private decimal unitCost = 0m;
    private int quantityInStock = 0;
    private int selectedPartSupplierId;
    private int selectedPartProductId;
    private int selectedPartQuantityTypesId;

    private string partNameEdit = "";
    private string descriptionPartEdit = "";
    private decimal unitCostEdit = 0m;
    private int quantityInStockEdit = 0;
    private int selectedPartId;
    private int selectedPartSupplierIdEdit;
    private int selectedPartProductIdEdit;
    private int selectedQuantityTypesIdEdit;
    private List<Parts> partsAvailable = new List<Parts>();
    private List<Products> productsAvailable = new List<Products>();
    private List<QuantityTypes> quantityTypesAvailable = new List<QuantityTypes>();


    private async void OnPartSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedPartId = selectedId;
        }
        var part = await orderService.GetPartsAsync(selectedPartId);

        partNameEdit = part.PartName;
        descriptionPartEdit = part.Description;
        unitCostEdit = part.UnitCost;
        quantityInStockEdit = part.QuantityInStock;
        StateHasChanged();
    }

    private async void OnPartProductSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedPartProductId = selectedId;
        }
        StateHasChanged();
    }

    private async void OnPartSupplierSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedPartSupplierId = selectedId;
        }
        StateHasChanged();
    } 

    private async void OnPartQuantityTypesSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedPartQuantityTypesId = selectedId;
        }
        StateHasChanged();
    }

    private async void OnPartProductSelectedEdit(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedPartProductIdEdit = selectedId;
        }
        StateHasChanged();
    } 

    private async void OnPartSupplierSelectedEdit(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedPartSupplierIdEdit = selectedId;
        }
        StateHasChanged();
    }

    private async void OnPartQuantityTypesSelectedEdit(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedQuantityTypesIdEdit = selectedId;
        }
        StateHasChanged();
    }

    private async Task AddPart()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            if (!IsValidPart())
            {
                return;
            }

            var part = new Parts()
            {
                CreationDate = DateTime.Now,
                Description = descriptionPart,
                IsActive = true,
                ModificationDate = DateTime.Now,
                PartName = partName,
                ProductsId = selectedPartProductId,
                SuppliersId = selectedPartSupplierId,
                QuantityInStock = quantityInStock,
                UnitCost = unitCost,
                    QuantityTypeId = selectedPartQuantityTypesId
            };

            if (await orderService.AddPartsAsync(part))
            {
                ShowMessage(ToastType.Success, "Success!", "Part added successfully!");
                preloadService.Hide();
                parts = await orderService.GetAllPartsForGridAsync();
                partsAvailable = await orderService.GetAllPartsAsync();
                foreach (var item in partsAvailable)
                {
                    item.Products = await inventoryService.GetProductAsync(item.ProductsId.Value);
                }
                partsOrders = await orderService.GetAllPartsAsync();
                foreach (var item in partsOrders)
                {
                    item.Products = await inventoryService.GetProductAsync(item.ProductsId.Value);
                }
                StateHasChanged();
                partName = "";
                descriptionPart = "";
                unitCost = 0m;
                quantityInStock = 0;
                await gridPartsViewModel.RefreshDataAsync();
                return;
            };
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a part!");
            preloadService.Hide();
            StateHasChanged();
            await gridPartsViewModel.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a part!");
            preloadService.Hide();
        }
    }

    private async Task EditPart()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            if (!IsValidPartEdit())
            {
                return;
            }

            var part = await orderService.GetPartsAsync(selectedPartId);

            part.ModificationDate = DateTime.Now;
            part.QuantityInStock = quantityInStockEdit;
            part.PartName = partNameEdit;
            part.UnitCost = unitCostEdit;
            part.Description = descriptionPartEdit;
            part.ProductsId = selectedPartProductIdEdit;
            part.SuppliersId = selectedPartSupplierIdEdit;
            part.QuantityTypeId = selectedQuantityTypesIdEdit;

            if (await orderService.UpdatePartsAsync(part))
            {
                ShowMessage(ToastType.Success, "Success!", "Part updated successfully!");
                preloadService.Hide();
                partsAvailable = await orderService.GetAllPartsAsync();
                foreach (var item in partsAvailable)
                {
                    item.Products = await inventoryService.GetProductAsync(item.ProductsId.Value);
                }
                partsOrders = await orderService.GetAllPartsAsync();
                foreach (var item in partsOrders)
                {
                    item.Products = await inventoryService.GetProductAsync(item.ProductsId.Value);
                }
                parts = await orderService.GetAllPartsForGridAsync();
                StateHasChanged();
                await gridPartsViewModel.RefreshDataAsync();
                return;
            };
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while updating a part!");
            preloadService.Hide();
            StateHasChanged();
            await gridPartsViewModel.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while editing a part!");
            preloadService.Hide();
        }
    }

    public bool IsValidPart()
    {
        if (string.IsNullOrWhiteSpace(partName))
        {
            ShowMessage(ToastType.Info, "Warning!", "Part Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(descriptionPart))
        {
            ShowMessage(ToastType.Info, "Warning!", "Description cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (unitCost <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Unit Cost must be greater than 0!");
            preloadService.Hide();
            return false;
        }

        if (quantityInStock <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Quantity in Stock must be greater than 0!");
            preloadService.Hide();
            return false;
        }

        if (selectedPartSupplierId <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Supplier ID must be greater than 0!");
            preloadService.Hide();
            return false;
        }

        if (selectedPartProductId <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Product ID must be greater than 0!");
            preloadService.Hide();
            return false;
        }
        return true;
    }

    public bool IsValidPartEdit()
    {
        if (string.IsNullOrWhiteSpace(partNameEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Part Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(descriptionPartEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Description cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (unitCostEdit <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Unit Cost must be greater than 0!");
            preloadService.Hide();
            return false;
        }

        if (quantityInStockEdit <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Quantity in Stock must be greater than 0!");
            preloadService.Hide();
            return false;
        }

        if (selectedPartSupplierIdEdit <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Supplier ID must be greater than 0!");
            preloadService.Hide();
            return false;
        }

        if (selectedPartProductIdEdit <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Product ID must be greater than 0!");
            preloadService.Hide();
            return false;
        }
        return true;
    }

    #endregion

    #region Suppliers

    private string companyName = "";
    private string contactName = "";
    private string description = "";
    private string phone = "";
    private string email = "";
    private string houseNumber = "";
    private string street = "";
    private string city = "";
    private string postalCode = "";
    private string country = "";

    private string companyNameEdit = "";
    private string contactNameEdit = "";
    private string descriptionEdit = "";
    private string phoneEdit = "";
    private string emailEdit = "";
    private string houseNumberEdit = "";
    private string streetEdit = "";
    private string cityEdit = "";
    private string postalCodeEdit = "";
    private string countryEdit = "";
    private int selectedSupplierId;

    private async void OnSupplierSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedSupplierId = selectedId;
        }
        var supplierEdit = await orderService.GetSupplierAsync(selectedSupplierId);
        var address = await orderService.GetSupplierAddressAsync(supplierEdit.SupplierAddressId.Value);
        companyNameEdit = supplierEdit.CompanyName;
        contactNameEdit = supplierEdit.ContactName;
        descriptionEdit = supplierEdit.Description;
        phoneEdit = supplierEdit.Phone;
        emailEdit = supplierEdit.Email;
        houseNumberEdit = address.HouseNumber;
        streetEdit = address.Street;
        cityEdit = address.City;
        postalCodeEdit = address.PostCode;
        countryEdit = address.Country;

        StateHasChanged();
    }

    private List<SuppliersViewModel> suppliers = new List<SuppliersViewModel>();
    private List<Suppliers> suppliersList = new List<Suppliers>();
    private Grid<SuppliersViewModel> gridSupplierViewModel;
    private async Task<GridDataProviderResult<SuppliersViewModel>> SuppliersViewModelDataProvider(GridDataProviderRequest<SuppliersViewModel> request)
    {
        if (suppliers is null)
            suppliers = await orderService.GetAllSupplierForGridAsync();

        return await Task.FromResult(request.ApplyTo(suppliers));
    }

    private async Task AddSupplier()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            if (!IsValidSupplier())
            {
                return;
            }

            var address = new SuppliersAddresses()
                {
                    City = city,
                    Country = country,
                    CreationDate = DateTime.Now,
                    ModificationDate = DateTime.Now,
                    IsActive = true,
                    HouseNumber = houseNumber,
                    PostCode = postalCode,
                    Street = street,
                };

            var added = await orderService.AddSupplierAddressAsync(address);
            int supplierAddressId;
            if (added)
            {
                supplierAddressId = (await orderService.GetAllSupplierAddressesAsync()).Where(item =>
                    item.HouseNumber == houseNumber &&
                    item.Country == country &&
                    item.CreationDate == address.CreationDate &&
                    item.PostCode == postalCode &&
                    item.Street == street)
                    .FirstOrDefault().Id;
            }
            else
            {
                ShowMessage(ToastType.Info, "Warning!", "Something went wrong!");
                preloadService.Hide();
                return;
            }

            var supplier = new Suppliers()
                {
                    CompanyName = companyName,
                    ContactName = contactName,
                    CreationDate = DateTime.Now,
                    Description = description,
                    Email = email,
                    IsActive = true,
                    ModificationDate = DateTime.Now,
                    Phone = phone,
                    SupplierAddressId = supplierAddressId
                };

            if (await orderService.AddSupplierAsync(supplier))
            {
                ShowMessage(ToastType.Success, "Success!", "Supplier added successfully!");
                preloadService.Hide();
                suppliersList = await orderService.GetAllSupplierAsync();
                StateHasChanged();
                companyName = "";
                contactName = "";
                description = "";
                phone = "";
                email = "";
                houseNumber = "";
                street = "";
                city = "";
                postalCode = "";
                country = "";
                suppliers = await orderService.GetAllSupplierForGridAsync();
                await gridSupplierViewModel.RefreshDataAsync();
                return;
            };

            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a supplier!");
            preloadService.Hide();
            StateHasChanged();
            await gridSupplierViewModel.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a supplier!");
            preloadService.Hide();
        }
    }

    private async Task editSupplier()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            if (!IsValidSupplierEdit())
            {
                return;
            }
            var supplier = await orderService.GetSupplierAsync(selectedSupplierId);
            var address = await orderService.GetSupplierAddressAsync(supplier.SupplierAddressId.Value);

            address.Street = streetEdit;
            address.City = cityEdit;
            address.HouseNumber = houseNumberEdit;
            address.Country = countryEdit;
            address.PostCode = postalCodeEdit;
            address.ModificationDate = DateTime.Now;

            var added = await orderService.UpdateSupplierAddressAsync(address);

            if (!added)
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while updating a supplier!");
                preloadService.Hide();
                return;
            }

            supplier.Description = descriptionEdit;
            supplier.Email = emailEdit;
            supplier.IsActive = true;
            supplier.ModificationDate = DateTime.Now;
            supplier.Phone = phoneEdit;
            supplier.SupplierAddressId = supplier.SupplierAddressId;
            supplier.ModificationDate = DateTime.Now;

            if (await orderService.UpdateSupplierAsync(supplier))
            {
                ShowMessage(ToastType.Success, "Success!", "Supplier updated successfully!");
                preloadService.Hide();
                suppliersList = await orderService.GetAllSupplierAsync();
                StateHasChanged();
                suppliers = await orderService.GetAllSupplierForGridAsync();
                await gridSupplierViewModel.RefreshDataAsync();
                return;
            };
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while updating a supplier!");
            preloadService.Hide();
            StateHasChanged();
            await gridSupplierViewModel.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a supplier!");
            preloadService.Hide();
        }
    }

    public bool IsValidSupplier()
    {
        if (string.IsNullOrWhiteSpace(companyName))
        {
            ShowMessage(ToastType.Info, "Warning!", "Company Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(contactName))
        {
            ShowMessage(ToastType.Info, "Warning!", "Contact Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(description))
        {
            ShowMessage(ToastType.Info, "Warning!", "Description cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(phone))
        {
            ShowMessage(ToastType.Info, "Warning!", "Phone cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(email))
        {
            ShowMessage(ToastType.Info, "Warning!", "Email cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(houseNumber))
        {
            ShowMessage(ToastType.Info, "Warning!", "House Number cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(street))
        {
            ShowMessage(ToastType.Info, "Warning!", "Street cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(city))
        {
            ShowMessage(ToastType.Info, "Warning!", "City cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(postalCode))
        {
            ShowMessage(ToastType.Info, "Warning!", "Postal Code cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(country))
        {
            ShowMessage(ToastType.Info, "Warning!", "Country cannot be empty!");
            preloadService.Hide();
            return false;
        }

        // All checks passed, the data is valid
        return true;
    }
    
    public bool IsValidSupplierEdit()
    {
        if (string.IsNullOrWhiteSpace(companyNameEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Company Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(contactNameEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Contact Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(descriptionEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Description cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(phoneEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Phone cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(emailEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Email cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(houseNumberEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "House Number cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(streetEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Street cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(cityEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "City cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(postalCodeEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Postal Code cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(countryEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Country cannot be empty!");
            preloadService.Hide();
            return false;
        }

        // All checks passed, the data is valid
        return true;
    }

    #endregion

    #region Order Management
    #endregion

    #region Order Reports
    #endregion
}
