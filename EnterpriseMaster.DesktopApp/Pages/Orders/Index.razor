@page "/orders"
@using BlazorBootstrap
@using EnterpriseMaster.DbServices.Models.Database;
@using EnterpriseMaster.DesktopApp.Data.Models;
@using EnterpriseMaster.DesktopApp.Data.Services.OrdersServices;
@inherits MainLayout
@inject OrderService orderService

<Tabs EnableFadeEffect="true">
    <Tab IsActive="true">
        <TitleTemplate>
            <Icon Name="IconName.BorderAll" /> Purchase Orders
        </TitleTemplate>
        <Content>
            <br />
            <Grid TItem="OrderViewModel"
                  @ref="gridOrderViewModel"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  DataProvider="OrderViewModelDataProvider"
                  Class="table table-hover table-bordered table-striped"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true">
                <GridColumn TItem="OrderViewModel" HeaderText="Product Name" PropertyName="ProductName">
                    @context.ProductName
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Product Code" PropertyName="ProductCode">
                    @context.ProductCode
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Price Paid($)" PropertyName="PricePaid">
                    @context.PricePaid
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Order Number" PropertyName="OrderNumber">
                    @context.OrderNumber
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Payment Term" PropertyName="PaymentTerm">
                    @context.PaymentTerm
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Quantity" PropertyName="Quantity">
                    @context.Quantity
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Quantity Type" PropertyName="QuantityType">
                    @context.QuantityType
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Delivery Date" PropertyName="Deliverydate">
                    @context.Deliverydate
                </GridColumn>
            </Grid>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.ArrowDownCircle" /> Parts Orders
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="left-panel">1</div>
                <div class="right-panel">
                    <div class="top-right">2</div>
                    <div class="bottom-right">3</div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.AspectRatio" /> Parts In Stock
        </TitleTemplate>
        <Content>
            <br />
            <Grid TItem="PartsViewModel"
                  @ref="gridPartsViewModel"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  DataProvider="PartsViewModelDataProvider"
                  Class="table table-hover table-bordered table-striped"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true">
                <GridColumn TItem="PartsViewModel" HeaderText="Product Name" PropertyName="ProductName">
                    @context.ProductName
                </GridColumn>
                <GridColumn TItem="PartsViewModel" HeaderText="Product Code" PropertyName="ProductCode">
                    @context.ProductCode
                </GridColumn>
                <GridColumn TItem="PartsViewModel" HeaderText="Description" PropertyName="Description">
                    @context.Description
                </GridColumn>
                <GridColumn TItem="PartsViewModel" HeaderText="Part Name" PropertyName="PartName">
                    @context.PartName
                </GridColumn>
                <GridColumn TItem="PartsViewModel" HeaderText="Quantity In Stock" PropertyName="QuantityInStock">
                    @context.QuantityInStock
                </GridColumn>
                <GridColumn TItem="PartsViewModel" HeaderText="Unit Cost" PropertyName="UnitCost">
                    @context.UnitCost
                </GridColumn>
            </Grid>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.BookmarkPlus" /> Add Parts
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="left-panel">1</div>
                <div class="right-panel">
                    <div class="top-right">2</div>
                    <div class="bottom-right">3</div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.BookmarkCheck" /> Edit Parts
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="left-panel">1</div>
                <div class="right-panel">
                    <div class="top-right">2</div>
                    <div class="bottom-right">3</div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.BookHalf" /> Suppliers
        </TitleTemplate>
        <Content>
            <br />
            <div class="containerPanel">
                <div class="topPanel-panel">
                    <br />
                    <Grid TItem="SuppliersViewModel"
                          @ref="gridSupplierViewModel"
                          AllowFiltering="true"
                          AllowPaging="true"
                          AllowSorting="true"
                          AllowRowClick="true"
                          DataProvider="SuppliersViewModelDataProvider"
                          Class="table table-hover table-bordered table-striped"
                          FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                          HeaderRowCssClass="bg-dark text-white border-bottom-0"
                          PageSize="5"
                          PageSizeSelectorVisible="true"
                          PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                          PaginationItemsTextFormat="{0} - {1} of {2} pages"
                          ItemsPerPageText="Items per page"
                          Responsive="true">
                        <GridColumn TItem="SuppliersViewModel" HeaderText="Company Name" PropertyName="CompanyName">
                            @context.CompanyName
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="Contact Name" PropertyName="ContactName">
                            @context.ContactName
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="Email" PropertyName="Email">
                            @context.Email
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="Phone" PropertyName="Phone">
                            @context.Phone
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="House Number" PropertyName="HouseNumber">
                            @context.HouseNumber
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="Street" PropertyName="Street">
                            @context.Street
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="Post Code" PropertyName="PostCode">
                            @context.PostCode
                        </GridColumn>
                        <GridColumn TItem="SuppliersViewModel" HeaderText="City" PropertyName="City">
                            @context.City
                        </GridColumn>
                    </Grid>
                </div>
                <div class="bottomPanel-panel">
                    <div class="bottomPanel-left">
                        <h3>Add New Supplier</h3>
                        <div class="containerSupplierAdd">
                            <div class="topSupplierAdd">
                                <div class="top-leftSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="companyName" Placeholder="Enter Company Name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="contactName" Placeholder="Enter Contact Name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="description" Placeholder="Enter Description" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="phone" Placeholder="Enter Phone" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="email" Placeholder="Enter Email" />
                                    </div>
                                </div>
                                <div class="top-rightSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="houseNumber" Placeholder="Enter House Number" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="street" Placeholder="Enter Street" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="city" Placeholder="Enter City" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="postalCode" Placeholder="Enter Postal Code" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="country" Placeholder="Enter Country" />
                                    </div>
                                </div>
                            </div>
                            <div class="bottomSupplierAdd">
                                <button class="button-36" @onclick="AddSupplier">Add New Supplier</button>
                            </div>
                        </div>
                    </div>
                    <div class="bottomPanel-right">
                        <div class="column-containerSupplierAdd">
                            <div class="columnSupplierAdd">
                                <h3>Edit Supplier</h3>
                            </div>
                            <div class="columnSupplierAdd">
                                <div class="row">
                                    <div class="col col-dropdown">
                                        @if (suppliersList == null)
                                        {
                                            <p>Loading...</p>
                                        }
                                        else
                                        {
                                            <select id="employeeDropdown" class="dropdown-style" @onchange="OnSupplierSelected">
                                                <option>Select Product</option>
                                                @foreach (var access in suppliersList)
                                                {
                                                    <option value="@access.Id">@access.ContactName (@access.CompanyName)</option>
                                                }
                                            </select>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="containerSupplierAdd">
                            <div class="topSupplierAdd">
                                <div class="top-leftSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="companyNameEdit" Placeholder="Enter Company Name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="contactNameEdit" Placeholder="Enter Contact Name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="descriptionEdit" Placeholder="Enter Description" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="phoneEdit" Placeholder="Enter Phone" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="emailEdit" Placeholder="Enter Email" />
                                    </div>
                                </div>
                                <div class="top-rightSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="houseNumberEdit" Placeholder="Enter House Number" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="streetEdit" Placeholder="Enter Street" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="cityEdit" Placeholder="Enter City" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="postalCodeEdit" Placeholder="Enter Postal Code" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="countryEdit" Placeholder="Enter Country" />
                                    </div>
                                </div>
                            </div>
                            <div class="bottomSupplierAdd">
                                <button class="button-36" @onclick="editSupplier">Edit Supplier</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Bezier" /> Order Management
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="left-panel">1</div>
                <div class="right-panel">
                    <div class="top-right">2</div>
                    <div class="bottom-right">3</div>
                </div>
            </div>
        </Content>
    </Tab> 
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Binoculars" /> Order Reports
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="left-panel">1</div>
                <div class="right-panel">
                    <div class="top-right">2</div>
                    <div class="bottom-right">3</div>
                </div>
            </div>
        </Content>
    </Tab>
</Tabs>
<Preload />
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
@code {
    protected async override void OnInitialized()
    {
        suppliers = await orderService.GetAllSupplierForGridAsync();
        purchaseOrders = await orderService.GetAllPurchaseOrdersForGridAsync();
        suppliersList = await orderService.GetAllSupplierAsync();
        await gridOrderViewModel.RefreshDataAsync();
        await gridSupplierViewModel.RefreshDataAsync();
        await gridPartsViewModel.RefreshDataAsync();
    }

    #region OrderViewModel

    private List<OrderViewModel> purchaseOrders = new List<OrderViewModel>();
    private Grid<OrderViewModel> gridOrderViewModel;
    private async Task<GridDataProviderResult<OrderViewModel>> OrderViewModelDataProvider(GridDataProviderRequest<OrderViewModel> request)
    {
        if (purchaseOrders is null) 
            purchaseOrders = await orderService.GetAllPurchaseOrdersForGridAsync(); 

        return await Task.FromResult(request.ApplyTo(purchaseOrders));
    }

    #endregion

    #region Order Management

    private List<PartsViewModel> parts = new List<PartsViewModel>();
    private Grid<PartsViewModel> gridPartsViewModel;
    private async Task<GridDataProviderResult<PartsViewModel>> PartsViewModelDataProvider(GridDataProviderRequest<PartsViewModel> request)
    {
        if (parts is null)
            parts = await orderService.GetAllPartsForGridAsync();

        return await Task.FromResult(request.ApplyTo(parts));
    }

    #endregion

    #region Parts Orders
    #endregion

    #region Add Parts
    #endregion

    #region Edit Parts
    #endregion

    #region Suppliers

    private string companyName = "";
    private string contactName = "";
    private string description = "";
    private string phone = "";
    private string email = "";
    private string houseNumber = "";
    private string street = "";
    private string city = "";
    private string postalCode = "";
    private string country = "";

    private string companyNameEdit = "";
    private string contactNameEdit = "";
    private string descriptionEdit = "";
    private string phoneEdit = "";
    private string emailEdit = "";
    private string houseNumberEdit = "";
    private string streetEdit = "";
    private string cityEdit = "";
    private string postalCodeEdit = "";
    private string countryEdit = "";
    private int selectedSupplierId;

    private async void OnSupplierSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedSupplierId = selectedId;
        }
        var supplierEdit = await orderService.GetSupplierAsync(selectedSupplierId);
        var address = await orderService.GetSupplierAddressAsync(supplierEdit.SupplierAddressId.Value);
        companyNameEdit = supplierEdit.CompanyName;
        contactNameEdit = supplierEdit.ContactName;
        descriptionEdit = supplierEdit.Description;
        phoneEdit = supplierEdit.Phone;
        emailEdit = supplierEdit.Email;
        houseNumberEdit = address.HouseNumber;
        streetEdit = address.Street;
        cityEdit = address.City;
        postalCodeEdit = address.PostCode;
        countryEdit = address.Country;

        StateHasChanged();
    }

    private List<SuppliersViewModel> suppliers = new List<SuppliersViewModel>();
    private List<Suppliers> suppliersList = new List<Suppliers>();
    private Grid<SuppliersViewModel> gridSupplierViewModel;
    private async Task<GridDataProviderResult<SuppliersViewModel>> SuppliersViewModelDataProvider(GridDataProviderRequest<SuppliersViewModel> request)
    {
        if (suppliers is null)
            suppliers = await orderService.GetAllSupplierForGridAsync();

        return await Task.FromResult(request.ApplyTo(suppliers));
    }

    private async Task AddSupplier()
    {
        preloadService.Show(SpinnerColor.Dark);
        if (!IsValidSupplier())
        {
            return;
        }

        var address = new SuppliersAddresses()
        {
            City = city,
            Country = country,
            CreationDate = DateTime.Now,
            ModificationDate = DateTime.Now,
            IsActive = true,
            HouseNumber = houseNumber,
            PostCode = postalCode,
            Street = street,
        };

        var added = await orderService.AddSupplierAddressAsync(address);
        int supplierAddressId;
        if (added)
        {
            supplierAddressId = (await orderService.GetAllSupplierAddressesAsync()).Where(item =>
                item.HouseNumber == houseNumber &&
                item.Country == country &&
                item.CreationDate == address.CreationDate &&
                item.PostCode == postalCode &&
                item.Street == street)
                .FirstOrDefault().Id;
        }
        else
        {
            ShowMessage(ToastType.Info, "Warning!", "Something went wrong!");
            preloadService.Hide();
            return;
        }

        var supplier = new Suppliers()
        {
            CompanyName = companyName,
            ContactName = contactName,
            CreationDate = DateTime.Now,
            Description = description,
            Email = email,
            IsActive = true,
            ModificationDate = DateTime.Now,
            Phone = phone,
            SupplierAddressId = supplierAddressId
        };

        if (await orderService.AddSupplierAsync(supplier))
        {
            ShowMessage(ToastType.Success, "Success!", "Supplier added successfully!");
            preloadService.Hide();
            suppliersList = await orderService.GetAllSupplierAsync();
            StateHasChanged();
            companyName = "";
            contactName = "";
            description = "";
            phone = "";
            email = "";
            houseNumber = "";
            street = "";
            city = "";
            postalCode = "";
            country = "";
            suppliers = await orderService.GetAllSupplierForGridAsync();
            await gridSupplierViewModel.RefreshDataAsync();
            return;
        };
        ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a supplier!");
        preloadService.Hide();
        StateHasChanged();
        await gridSupplierViewModel.RefreshDataAsync();
    }

    private async Task editSupplier()
    {
        preloadService.Show(SpinnerColor.Dark);
        if (!IsValidSupplierEdit())
        {
            return;
        }
        var supplier = await orderService.GetSupplierAsync(selectedSupplierId);
        var address = await orderService.GetSupplierAddressAsync(supplier.SupplierAddressId.Value);

        address.Street = streetEdit;
        address.City = cityEdit;
        address.HouseNumber = houseNumberEdit;
        address.Country = countryEdit;
        address.PostCode = postalCodeEdit;
        address.ModificationDate = DateTime.Now;

        var added = await orderService.UpdateSupplierAddressAsync(address);

        if (!added)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while updating a supplier!");
            preloadService.Hide();
            return;
        }

        supplier.Description = descriptionEdit;
        supplier.Email = emailEdit;
        supplier.IsActive = true;
        supplier.ModificationDate = DateTime.Now;
        supplier.Phone = phoneEdit;
        supplier.SupplierAddressId = supplier.SupplierAddressId;
        supplier.ModificationDate = DateTime.Now;

        if (await orderService.UpdateSupplierAsync(supplier))
        {
            ShowMessage(ToastType.Success, "Success!", "Supplier updated successfully!");
            preloadService.Hide();
            suppliersList = await orderService.GetAllSupplierAsync();
            StateHasChanged();
            suppliers = await orderService.GetAllSupplierForGridAsync();
            await gridSupplierViewModel.RefreshDataAsync();
            return;
        };
        ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while updating a supplier!");
        preloadService.Hide();
        StateHasChanged();
        await gridSupplierViewModel.RefreshDataAsync();
    }

    public bool IsValidSupplier()
    {
        if (string.IsNullOrWhiteSpace(companyName))
        {
            ShowMessage(ToastType.Info, "Warning!", "Company Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(contactName))
        {
            ShowMessage(ToastType.Info, "Warning!", "Contact Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(description))
        {
            ShowMessage(ToastType.Info, "Warning!", "Description cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(phone))
        {
            ShowMessage(ToastType.Info, "Warning!", "Phone cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(email))
        {
            ShowMessage(ToastType.Info, "Warning!", "Email cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(houseNumber))
        {
            ShowMessage(ToastType.Info, "Warning!", "House Number cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(street))
        {
            ShowMessage(ToastType.Info, "Warning!", "Street cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(city))
        {
            ShowMessage(ToastType.Info, "Warning!", "City cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(postalCode))
        {
            ShowMessage(ToastType.Info, "Warning!", "Postal Code cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(country))
        {
            ShowMessage(ToastType.Info, "Warning!", "Country cannot be empty!");
            preloadService.Hide();
            return false;
        }

        // All checks passed, the data is valid
        return true;
    }
    
    public bool IsValidSupplierEdit()
    {
        if (string.IsNullOrWhiteSpace(companyNameEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Company Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(contactNameEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Contact Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(descriptionEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Description cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(phoneEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Phone cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(emailEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Email cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(houseNumberEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "House Number cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(streetEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Street cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(cityEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "City cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(postalCodeEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Postal Code cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(countryEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Country cannot be empty!");
            preloadService.Hide();
            return false;
        }

        // All checks passed, the data is valid
        return true;
    }

    #endregion

    #region Order Management
    #endregion

    #region Order Reports
    #endregion
}
