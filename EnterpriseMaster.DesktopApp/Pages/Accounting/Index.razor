@page "/accounting"
@using BlazorBootstrap
@using EnterpriseMaster.DbServices.Models.Database;
@using EnterpriseMaster.DesktopApp.Data.Services.AccountingServices;
@using EnterpriseMaster.DesktopApp.Data.Services.LoginService;
@using EnterpriseMaster.DesktopApp.Data.Services.RolesServices;
@inherits MainLayout
@inject EmployeeService employeeService
@inject RolesService rolesService
@inject LoginService loginService

<Tabs @ref="tabs" EnableFadeEffect="true">
    <Tab IsActive="true" Name="accounts">
        <TitleTemplate>
            <Icon Name="IconName.CheckAll" /> Accounts
        </TitleTemplate>
        <Content>
            <br />
           <Grid TItem="Employees"
                  @ref="gridEmployees"
                AllowFiltering="true"
                AllowPaging="true"
                AllowSorting="true"
                AllowRowClick="true"
                DataProvider="EmployeesDataProvider" 
                Class="table table-hover table-bordered table-striped"
                FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                HeaderRowCssClass="bg-dark text-white border-bottom-0"
                PageSize="5"
                PageSizeSelectorVisible="true"
                PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                PaginationItemsTextFormat="{0} - {1} of {2} pages"
                ItemsPerPageText="Items per page"
                Responsive="true">
                <GridColumn TItem="Employees" HeaderText="First Name" PropertyName="FirstName" SortKeySelector="item => item.FirstName">
                    @context.FirstName
                </GridColumn>
                <GridColumn TItem="Employees" HeaderText="Last Name" PropertyName="LastName" SortKeySelector="item => item.LastName">
                    @context.LastName
                </GridColumn>
                <GridColumn TItem="Employees" HeaderText="E-mail" PropertyName="Email" SortKeySelector="item => item.Email">
                    @context.Email
                </GridColumn>
                <GridColumn TItem="Employees" HeaderText="Hire Date" PropertyName="HireDate" SortKeySelector="item => item.HireDate">
                    @if (@context.HireDate != null)
                    {
                        @context.HireDate.Value.ToString("dd/MM/yyyy")
                    }
                    else
                    {
                        @context.HireDate
                    }
                </GridColumn>
                <GridColumn TItem="Employees" HeaderText="Position" PropertyName="Position" SortKeySelector="item => item.Position">
                    @context.Position
                </GridColumn>
            </Grid>
        </Content>
    </Tab>
    <Tab Name="add">
        <TitleTemplate>
            <Icon Name="IconName.Fingerprint" /> Add Account
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="row">
                    <div class="col-md-4 full-height-add-employee">
                        <div class="styled-form">
                            <div class="form-group">
                                <label for="firstName">First Name:</label>
                                <input type="text" id="firstName" name="firstName" @bind="firstName" required>
                            </div>

                            <div class="form-group">
                                <label for="lastName">Last Name:</label>
                                <input type="text" id="lastName" name="lastName" @bind="lastName" required>
                            </div>

                            <div class="form-group">
                                <label for="email">Email:</label>
                                <input type="email" id="email" name="email" @bind="email" required>
                            </div>

                            <div class="form-group">
                                <label for="department">Department:</label>
                                <input type="text" id="department" name="department" @bind="department" required>
                            </div>

                            <div class="form-group">
                                <label for="position">Position:</label>
                                <input type="text" id="position" name="position" @bind="position" required>
                            </div>

                            <div class="form-group">
                                <label for="salary">Salary:</label>
                                <input type="text" id="salary" name="salary" @bind="salary">
                            </div>

                            <div class="form-group">
                                <label for="image">Image:</label>
                                <input type="file" id="image" name="image" @bind="image">
                            </div>

                            <div class="form-group">
                                <label for="hireDate">Hire Date:</label>
                                <input type="date" id="hireDate" @bind="hireDate" name="hireDate" required>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="row full-height">
                            <div class="col-md-12">
                                <div class="inner-grid-add-employee">
                                    <div class="col-md-12 col-height-add-employee">
                                        <div class="child-div">
                                            <div class="styled-form">
                                                <div class="form-group">
                                                    <label for="DateOfBirth">Date Of Birth:</label>
                                                    <input type="date" id="DateOfBirth" @bind="DateOfBirth" name="DateOfBirth" required>
                                                </div>
                                                <label for="houseNumber">House Number:</label>
                                                <input type="text" id="houseNumber" @bind="houseNumber" name="houseNumber">

                                                <label for="street">Street:</label>
                                                <input type="text" id="street" @bind="street" name="street">

                                                <label for="city">City:</label>
                                                <input type="text" id="city" @bind="city" name="city">
                                            </div>
                                        </div>
                                        <div class="child-div">
                                            <div class="styled-form">
                                                <label for="postCode">Post Code:</label>
                                                <input type="text" id="postCode" @bind="postCode" name="postCode">

                                                <label for="country">Country:</label>
                                                <input type="text" id="country" @bind="country" name="country">
                                                <label for="employeeAccess">Account Access:</label>
                                                @if (employeeAccesses == null)
                                                {
                                                    <p>Loading...</p>
                                                }
                                                else
                                                {
                                                    <select class="styled-select" @onchange="OnEmployeeAccessSelected">
                                                        <option value="">Select an Employee Access</option>
                                                        @foreach (var access in employeeAccesses)
                                                        {
                                                            <option value="@access.Id">@access.Access</option>
                                                        }
                                                    </select>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-height-add-employee">
                                        <div class="styled-form">
                                            <div class="password-form">
                                                <label for="password">Password:</label>
                                                <input type="password" id="password" @bind="password" name="password" required>

                                                <label for="confirmPassword">Confirm Password:</label>
                                                <input type="password" id="confirmPassword" @bind="confirmPassword" name="confirmPassword" required>

                                                <Button Color="ButtonColor.Success" Size="Size.Large" @onclick="AddEmployee"> Add Employee </Button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab Name="edit">
        <TitleTemplate>
            <Icon Name="IconName.Person" /> Edit Account
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="row">
                    <div class="col col-dropdown">
                        @if (employeesList == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {
                            <select id="employeeDropdown" class="dropdown-style" @onchange="OnEmployeeSelected">
                                <option>Select an Employee</option>
                                @foreach (var access in employeesList)
                                {
                                    <option value="@access.Id">@access.Email</option>
                                }
                            </select>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 full-height-add-employee">
                        <div class="styled-form">
                            <div class="form-group">
                                <label for="firstName">First Name:</label>
                                <input type="text" id="firstName" name="firstName" @bind="firstNameEdit" required>
                            </div>

                            <div class="form-group">
                                <label for="lastName">Last Name:</label>
                                <input type="text" id="lastName" name="lastName" @bind="lastNameEdit" required>
                            </div>

                            <div class="form-group">
                                <label for="email">Email:</label>
                                <input type="email" id="email" name="email" @bind="emailEdit" required>
                            </div>

                            <div class="form-group">
                                <label for="department">Department:</label>
                                <input type="text" id="department" name="department" @bind="departmentEdit" required>
                            </div>

                            <div class="form-group">
                                <label for="position">Position:</label>
                                <input type="text" id="position" name="position" @bind="positionEdit" required>
                            </div>

                            <div class="form-group">
                                <label for="salary">Salary:</label>
                                <input type="text" id="salary" name="salary" @bind="salaryEdit">
                            </div>

                            <div class="form-group">
                                <label for="image">Image:</label>
                                <input type="file" id="image" name="image">
                            </div>

                            <div class="form-group">
                                <label for="hireDate">Hire Date:</label>
                                <input type="date" id="hireDate" name="hireDate" @bind="hireDateEdit" required>
                            </div>

                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="row full-height">
                            <div class="col-md-12">
                                <div class="inner-grid-add-employee">
                                    <div class="col-md-12 col-height-add-employee">
                                        <div class="child-div">
                                            <div class="styled-form">
                                                <div class="form-group">
                                                    <label for="DateOfBirth">Date Of Birth:</label>
                                                    <input type="date" id="DateOfBirth" name="DateOfBirth" @bind="DateOfBirthEdit" required>
                                                </div>
                                                <label for="houseNumber">House Number:</label>
                                                <input type="text" id="houseNumber" name="houseNumber" @bind="houseNumberEdit">

                                                <label for="street">Street:</label>
                                                <input type="text" id="street" name="street" @bind="streetEdit">

                                                <label for="city">City:</label>
                                                <input type="text" id="city" name="city" @bind="cityEdit">
                                            </div>
                                        </div>
                                        <div class="child-div">
                                            <div class="styled-form">
                                                <label for="postCode">Post Code:</label>
                                                <input type="text" id="postCode" name="postCode" @bind="postCodeEdit">

                                                <label for="country">Country:</label>
                                                <input type="text" id="country" name="country" @bind="countryEdit">

                                                <label for="employeeAccess">Employee Access:</label>
                                                @if (employeeAccesses == null)
                                                {
                                                    <p>Loading...</p>
                                                }
                                                else
                                                {
                                                    <select class="styled-select" @onchange="OnEmployeeAccessEditSelected">
                                                        <option value="">Select an Employee Access</option>
                                                        @foreach (var access in employeeAccesses)
                                                        {
                                                            if (accessEdit == access.Access)
                                                            {
                                                                <option value="@access.Id" selected>@access.Access</option>
                                                                continue;
                                                            }
                                                            <option value="@access.Id">@access.Access</option>
                                                        }
                                                    </select>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-height-add-employee">
                                        <div class="styled-form">
                                            <p>Leave this empty if you dont want to change the password.</p>
                                            <label for="password">Password:</label>
                                            <input type="password" id="password" name="password" @bind="editPassword" required>

                                            <label for="confirmPassword">Confirm Password:</label>
                                            <input type="password" id="confirmPassword" name="confirmPassword" @bind="editConfirmPassword" required>
                                            <Button Color="ButtonColor.Success" Size="Size.Large" @onclick="updateEmployee"> Update Employee </Button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Diagram2" /> Permissions
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="row">
                    <div class="col col-dropdown">
                        @if (employeesList == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {
                            <select id="employeeDropdown" class="dropdown-style" @onchange="OnEmployeeRolesSelected">
                                <option>Select an Employee</option>
                                @foreach (var access in employeesList)
                                {
                                    <option value="@access.Id">@access.Email</option>
                                }
                            </select>
                        }
                    </div>
                </div>
                <div class="permissions-table-panel">
                    <table class="permissions-table">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Permission Name</th>
                                <th>Description</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var item in rolesList)
                            {
                                <tr>
                                    <td style="text-align: center;"><Switch @bind-Value="@item.UserRole" /></td>
                                    <td><label>@item.Roles.Name</label></td>
                                    <td>@item.Roles.Description</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <br />
                <div class="bottomSupplierAdd">
                    <button class="button-36" @onclick="savePermissions">Save Permissions</button>
                </div>
            </div>
        </Content>
    </Tab>
</Tabs>
<Preload />
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
@code {
    [Inject] protected PreloadService preloadService { get; set; }
    Tabs tabs;
    private async Task ShowFaqsAsync() => await tabs.ShowTabByNameAsync("edit");
    private async Task ShowAccountsAsync() => await tabs.ShowTabByNameAsync("accounts");
    private async Task ShowAddAsync() => await tabs.ShowTabByNameAsync("add");

    #region grid

    private List<Employees> employees;
    private List<Employees> employeesList = new List<Employees>();
    private List<UserRoles> rolesList = new List<UserRoles>();
    private List<Roles> roles = new List<Roles>();
    private Grid<Employees> gridEmployees;

    protected async override void OnInitialized()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            employees = await employeeService.GetEmployeesAsync();
            employeesList = await employeeService.GetEmployeesAsync();
            employeeAccesses = await employeeService.GetEmployeeAccessesAsync();
            roles = await rolesService.GetAllRolesAsync();
            preloadService.Hide();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong!");
            preloadService.Hide();
        }
        
    }

    private async Task<GridDataProviderResult<Employees>> EmployeesDataProvider(GridDataProviderRequest<Employees> request)
    {
        if (employees is null) // pull employees only one time for client-side filtering, sorting, and paging
            employees = await employeeService.GetEmployeesAsync(); // call a service or an API to pull the employees

        return await Task.FromResult(request.ApplyTo(employees));
    }

    #endregion

    #region Employee

    #region EditEmployee

    private string editPassword;
    private string editConfirmPassword;
    private int selectedEmployeeId;
    private string firstNameEdit;
    private string lastNameEdit;
    private string emailEdit;
    private string departmentEdit;
    private string positionEdit;
    private string salaryEdit;
    private DateTime? hireDateEdit;
    private DateTime? DateOfBirthEdit;
    private string houseNumberEdit;
    private string streetEdit;
    private string cityEdit;
    private string postCodeEdit;
    private string countryEdit;
    private string accessEdit;
    private EmployeeAddresses employeeAddressEdit;
    private EmployeeAccesses employeeAccessEdit;
    private Employees employeeEdit;
    private int selectedEmployeeAccessEditId;

    private async void OnEmployeeSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedEmployeeId = selectedId;
        }

        employeeEdit = await employeeService.GetEmployeebyId(selectedEmployeeId);
        employeeAddressEdit = await employeeService.GetEmployeeAddressById((int)employeeEdit.EmployeeAddressId);
        employeeAccessEdit = await employeeService.GetEmployeeAccessById((int)employeeEdit.EmployeeAccessId);

        firstNameEdit = employeeEdit.FirstName;
        lastNameEdit = employeeEdit.LastName;
        emailEdit = employeeEdit.Email;
        departmentEdit = employeeEdit.Department;
        positionEdit = employeeEdit.Position;
        salaryEdit = employeeEdit.Salary;
        hireDateEdit = employeeEdit.HireDate;
        DateOfBirthEdit = employeeEdit.DateOfBirth;
        houseNumberEdit = employeeAddressEdit.HouseNumber;
        streetEdit = employeeAddressEdit.Street;
        cityEdit = employeeAddressEdit.City;
        postCodeEdit = employeeAddressEdit.PostCode;
        countryEdit = employeeAddressEdit.Country;
        accessEdit = employeeAccessEdit.Access;
        StateHasChanged();
    }

    private void OnEmployeeAccessEditSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedEmployeeAccessEditId = selectedId;
        }
    }

    private async void updateEmployee()
    {
        preloadService.Show(SpinnerColor.Dark);

        var employeeAddress = new EmployeeAddresses()
        {
            City = cityEdit,
            Country = countryEdit,
            ModificationDate = DateTime.Now,
            HouseNumber = houseNumberEdit,
            IsActive = true,
            Id = employeeAddressEdit.Id,
            PostCode = postCodeEdit,
            Street = streetEdit 
        };

        var currentUser = await employeeService.GetUserBasedOnEmail(employeeEdit.Email);

        var userAddress = new UsersAdresses()
        {
            City = cityEdit,
            Country = countryEdit,
            ModificationDate = DateTime.Now,
            HouseNumber = houseNumberEdit,
            IsActive = true,
            Id = (int)currentUser.UserAddressId,
            PostCode = postCodeEdit,
            Street = streetEdit
        };

        var responseAddress = await employeeService.UpdateEmployeeAddressAsync(employeeAddress);
        var responseUserAddress = await employeeService.UpdateUserAddressAsync(userAddress);

        if (!responseAddress)
        {
            ShowMessage(ToastType.Danger, "Something went wrong!", "We could not edit employee address this time!");
            return;
        };

        if (!responseUserAddress)
        {
            ShowMessage(ToastType.Danger, "Something went wrong!", "We could not edit user address this time!");
            return;
        };

        var fullEmployeeAddress = await employeeService.GetEmployeeAddressAsync(employeeAddress);
        var fullUserAddress = await employeeService.GetUserAddressAsync(userAddress);

        var user = new Users();

        if(string.IsNullOrEmpty(editPassword) || string.IsNullOrEmpty(editConfirmPassword))
        {
            user = new Users()
            {
                Id = currentUser.Id,
                FirstName = firstNameEdit,
                BusinesArea = departmentEdit,
                Email = emailEdit,
                CompanyName = Config.Company,
                DateOfBirth = DateOfBirthEdit,
                IsActive = true,
                IsEmployee = true,
                ModificationDate = DateTime.Now,
                Position = positionEdit,
                SecondName = lastNameEdit,
                SubscriptionTypeId = Config.SubscriptionId,
                UserAddressId = fullUserAddress.Id,
                CompaniesId = currentUser.CompaniesId,
                CreationDate = currentUser.CreationDate,
                Password = currentUser.Password
            };
        }
        else
        {
            if(editPassword == editConfirmPassword)
            {
                user = await employeeService.GetUserAsync(currentUser.Id);
                user.FirstName = firstNameEdit;
                user.BusinesArea = departmentEdit;
                user.Email = emailEdit;
                user.CompanyName = Config.Company;
                user.DateOfBirth = DateOfBirthEdit;
                user.IsActive = true;
                user.IsEmployee = true;
                user.ModificationDate = DateTime.Now;
                user.Position = positionEdit;
                user.SecondName = lastNameEdit;
                user.SubscriptionTypeId = Config.SubscriptionId;
                user.Password = BCrypt.Net.BCrypt.HashPassword(editPassword);
                user.UserAddressId = fullUserAddress.Id;
                user.CompaniesId = currentUser.CompaniesId;
                user.CreationDate = currentUser.CreationDate;
            }
            else
            {
                ShowMessage(ToastType.Danger, "Something went wrong!", "Passwords do not match!");
                return;
            }
        }

        var userResponse = await employeeService.UpdateUserAsync(user);

        if (!userResponse)
        {
            ShowMessage(ToastType.Danger, "Something went wrong!", "We could not edit user this time!");
            return;
        };

        var currentEmployee = (await employeeService.GetEmployeebyId(selectedEmployeeId));

        var selectedId = 
            selectedEmployeeAccessEditId == 0 
            ? currentEmployee.EmployeeAccessId
            : selectedEmployeeAccessEditId;

        var employee = new Employees()
        {
            Id = selectedEmployeeId,
            DateOfBirth = DateOfBirthEdit,
            Department = departmentEdit,
            Email = emailEdit,
            LastName = lastNameEdit,
            FirstName = firstNameEdit,
            Position = positionEdit,
            Salary = salaryEdit,
            EmployeeAccessId = selectedId,
            EmployeeAddressId = employeeAddress.Id,
            IsActive = true,
            HireDate = hireDateEdit,
            ModificationDate = DateTime.Now,
            CompanyId = currentUser.CompaniesId,
            UserId = user.Id,
            CreationDate = currentEmployee.CreationDate,
        };

        var employeeResponse = await employeeService.UpdateEmployeeAsync(employee);

        if (employeeResponse)
        {
            preloadService.Hide();
            ShowMessage(ToastType.Success, "Success!", "Employee succesfully edited!");
            await gridEmployees.RefreshDataAsync();
            StateHasChanged();
            return;
        };
        preloadService.Hide();
        ShowMessage(ToastType.Danger, "Something went wrong!", "We could not edit employee this time!");
    }

    #endregion

    #region Add

    private List<EmployeeAccesses> employeeAccesses;
    private int selectedEmployeeAccessId; // To hold the selected value
    private string password;
    private string confirmPassword;
    private string firstName = "";
    private string lastName = "";
    private string email = "";
    private string department = "";
    private string position = "";
    private string salary = "";
    private string image = "";
    private DateTime hireDate = DateTime.Now;
    private DateTime DateOfBirth = DateTime.Now;
    private string houseNumber = "";
    private string street = "";
    private string city = "";
    private string postCode = "";
    private string country = "";


    private void OnEmployeeAccessSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedEmployeeAccessId = selectedId;
        }
    }

    private async Task<bool> AddEmployee()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            if(!(password == confirmPassword))
            {
                ShowMessage(ToastType.Danger, "Something went wrong!", "Passwords do not match!");
                return false;
            }
            var employeeAddress = new EmployeeAddresses()
            {
                City = city,
                Country = country,
                CreationDate = DateTime.Now, 
                HouseNumber = houseNumber, 
                ModificationDate = DateTime.Now, 
                PostCode = postCode, 
                Street = street,
                IsActive = true
            };

            var userAddress = new UsersAdresses()
            {
                City = city,
                Country = country,
                CreationDate = DateTime.Now,
                HouseNumber = houseNumber,
                ModificationDate = DateTime.Now,
                PostCode = postCode,
                Street = street,
                IsActive = true
            };

            if(!await employeeService.AddEmployeeAddressAsync(employeeAddress))
            {
                ShowMessage(ToastType.Danger, "Something went wrong!", "We could not add employee address this time!");
                return false;
            };

            if (!await employeeService.AddUserAddressAsync(userAddress))
            {
                ShowMessage(ToastType.Danger, "Something went wrong!", "We could not add user address this time!");
                return false;
            };

            var fullEmployeeAddress = await employeeService.GetEmployeeAddressAsync(employeeAddress);
            var fullUserAddress = await employeeService.GetUserAddressAsync(userAddress);

            var user = new Users()
            {
                FirstName = firstName,
                BusinesArea = department,
                Email = email,
                CompanyName = Config.Company,
                DateOfBirth = this.DateOfBirth,
                CreationDate = DateTime.Now,
                IsActive = true,
                IsEmployee = true,
                ModificationDate = DateTime.Now,
                Position = position,
                SecondName = lastName, 
                SubscriptionTypeId = Config.SubscriptionId,
                Password = BCrypt.Net.BCrypt.HashPassword(password),
                UserAddressId = fullUserAddress.Id,
                CompaniesId = Config.CompanyId
            };

            if(!await employeeService.AddUserAsync(user))
            {
                ShowMessage(ToastType.Danger, "Something went wrong!", "We could not add user this time!");
                return false;
            }

            var userId = (await employeeService.GetUserBasedOnEmail(user.Email)).Id;
            var companyId = (await employeeService.GetCompanyBasedOnName(user.CompanyName)).Id;

            var employee = new Employees()
            {
                CreationDate = DateTime.Now,
                DateOfBirth = DateOfBirth,
                Department = department,
                Email = email,
                LastName = lastName,
                FirstName = firstName,
                Position = position,
                Salary = salary,
                EmployeeAccessId = selectedEmployeeAccessId,
                EmployeeAddressId = fullEmployeeAddress.Id,
                IsActive = true,
                HireDate = hireDate,
                ModificationDate = DateTime.Now,
                CompanyId = companyId,
                UserId = userId
            };

            if (await employeeService.AddEmployeesAsync(employee))
            {
                foreach (var item in roles)
                {
                    await rolesService.AddUserRolesAsync(new UserRoles()
                    {
                        CreationDate = DateTime.Now,
                        IsActive = true,
                        ModificationDate = DateTime.Now,
                        RoleId = item.Id,
                        UserId = (await employeeService.GetUserBasedOnEmail(employee.Email)).Id,
                        UserRole = false,
                        Company = Config.CompanyId
                    });
                }
                preloadService.Hide();
                ShowMessage(ToastType.Success, "Success!", "New employee has been added!"); 
                employees = await employeeService.GetEmployeesAsync();
                employeesList = await employeeService.GetEmployeesAsync();
                await gridEmployees.RefreshDataAsync();
                StateHasChanged();
                return true;
            };
            preloadService.Hide();
            ShowMessage(ToastType.Danger, "Something went wrong!", "We could not add employee this time!");
            return false;
        }
        catch (Exception e)
        {
            preloadService.Hide();
            ShowMessage(ToastType.Danger, "Something went wrong!", e.Message);
            return false;
        }

    }

    #endregion

    #endregion

    #region Roles

    private int selectedEmployeeRolesId;

    private async void OnEmployeeRolesSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedEmployeeRolesId = selectedId;
        }

        var user = await employeeService.GetEmployeebyId(selectedEmployeeRolesId);
        rolesList = (await rolesService.GetAllUserRolesAsync()).Where(item => item.UserId == user.UserId).ToList();
        foreach(var item in rolesList)
        {
            item.Roles = await rolesService.GetRolesAsync(item.RoleId.Value);
        }
        StateHasChanged();
    }

    private async Task savePermissions()
    {
        try
        {
            foreach (var item in rolesList)
            {
                await rolesService.UpdateUserRolesAsync(item);
            }
            ShowMessage(ToastType.Success, "Success!", "Permissions updated!");
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Danger, "Something went wrong!", e.Message);
            return;
        }
    }

    #endregion
}
