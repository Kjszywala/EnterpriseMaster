@page "/accounting"
@using BlazorBootstrap
@using EnterpriseMaster.DbServices.Models.Database;
@using EnterpriseMaster.DesktopApp.Data.Services.AccountingServices;
@inherits MainLayout
@inject EmployeeService employeeService

<Tabs @ref="tabs" EnableFadeEffect="true">
    <Tab IsActive="true" Name="accounts">
        <TitleTemplate>
            <Icon Name="IconName.CheckAll" /> Accounts
        </TitleTemplate>
        <Content>
            <br />
           <Grid TItem="Employees" 
                AllowPaging="true"
                AllowSorting="true"
                AllowRowClick="true" 
                class="table table-hover table-bordered table-striped" 
                DataProvider="EmployeesDataProvider" 
                AllowFiltering="true" 
                Responsive="true"
                PageSize="15"
                PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                PaginationItemsTextFormat="{0} - {1} of {2} pages">
                <GridColumn TItem="Employees" HeaderText="Id" Filterable="false">
                    @context.Id
                </GridColumn>
                <GridColumn TItem="Employees" HeaderText="First Name" PropertyName="FirstName">
                    @context.FirstName
                </GridColumn>
                <GridColumn TItem="Employees" HeaderText="Position" PropertyName="Position">
                    @context.Position
                </GridColumn>
                <GridColumn TItem="Employees" HeaderText="Hire Date" PropertyName="HireDate">
                    @context.HireDate
                </GridColumn>
                <GridColumn TItem="Employees" HeaderText="Active" Filterable="false">
                    @context.IsActive
                </GridColumn>
            </Grid>
        </Content>
    </Tab>
    <Tab Name="add">
        <TitleTemplate>
            <Icon Name="IconName.Fingerprint" /> Add Account
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="row">
                    <div class="col-md-4 full-height-add-employee">
                        <div class="styled-form">
                            <div class="form-group">
                                <label for="firstName">First Name:</label>
                                <input type="text" id="firstName" name="firstName" @bind="firstName" required>
                            </div>

                            <div class="form-group">
                                <label for="lastName">Last Name:</label>
                                <input type="text" id="lastName" name="lastName" @bind="lastName" required>
                            </div>

                            <div class="form-group">
                                <label for="email">Email:</label>
                                <input type="email" id="email" name="email" @bind="email" required>
                            </div>

                            <div class="form-group">
                                <label for="department">Department:</label>
                                <input type="text" id="department" name="department" @bind="department" required>
                            </div>

                            <div class="form-group">
                                <label for="position">Position:</label>
                                <input type="text" id="position" name="position" @bind="position" required>
                            </div>

                            <div class="form-group">
                                <label for="salary">Salary:</label>
                                <input type="text" id="salary" name="salary" @bind="salary">
                            </div>

                            <div class="form-group">
                                <label for="image">Image:</label>
                                <input type="file" id="image" name="image" @bind="image">
                            </div>

                            <div class="form-group">
                                <label for="hireDate">Hire Date:</label>
                                <input type="date" id="hireDate" @bind="hireDate" name="hireDate" required>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="row full-height">
                            <div class="col-md-12">
                                <div class="inner-grid-add-employee">
                                    <div class="col-md-12 col-height-add-employee">
                                        <div class="child-div">
                                            <div class="styled-form">
                                                <div class="form-group">
                                                    <label for="DateOfBirth">Date Of Birth:</label>
                                                    <input type="date" id="DateOfBirth" @bind="DateOfBirth" name="DateOfBirth" required>
                                                </div>
                                                <label for="houseNumber">House Number:</label>
                                                <input type="text" id="houseNumber" @bind="houseNumber" name="houseNumber">

                                                <label for="street">Street:</label>
                                                <input type="text" id="street" @bind="street" name="street">

                                                <label for="city">City:</label>
                                                <input type="text" id="city" @bind="city" name="city">
                                            </div>
                                        </div>
                                        <div class="child-div">
                                            <div class="styled-form">
                                                <label for="postCode">Post Code:</label>
                                                <input type="text" id="postCode" @bind="postCode" name="postCode">

                                                <label for="country">Country:</label>
                                                <input type="text" id="country" @bind="country" name="country">
                                                <label for="employeeAccess">Account Access:</label>
                                                @if (employeeAccesses == null)
                                                {
                                                    <p>Loading...</p>
                                                }
                                                else
                                                {
                                                    <select class="styled-select" @onchange="OnEmployeeAccessSelected">
                                                        <option value="">Select an Employee Access</option>
                                                        @foreach (var access in employeeAccesses)
                                                        {
                                                            <option value="@access.Id">@access.Access</option>
                                                        }
                                                    </select>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-height-add-employee">
                                        <div class="styled-form">
                                            <div class="password-form">
                                                <label for="password">Password:</label>
                                                <input type="password" id="password" @bind="password" name="password" required>

                                                <label for="confirmPassword">Confirm Password:</label>
                                                <input type="password" id="confirmPassword" @bind="confirmPassword" name="confirmPassword" required>

                                                <Button Color="ButtonColor.Success" Size="Size.Large" @onclick="AddEmployee"> Add Employee </Button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab Name="edit">
        <TitleTemplate>
            <Icon Name="IconName.Person" /> Edit Account
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="row">
                    <div class="col col-dropdown">
                        <select id="employeeDropdown" class="dropdown-style">
                            <option>Select an Employee</option>
                            @foreach (var emp in employees)
                            {
                                <option value="@emp.Id">@emp.FirstName @emp.LastName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 full-height-add-employee">
                        <div class="styled-form">
                            <div class="form-group">
                                <label for="firstName">First Name:</label>
                                <input type="text" id="firstName" name="firstName" required>
                            </div>

                            <div class="form-group">
                                <label for="lastName">Last Name:</label>
                                <input type="text" id="lastName" name="lastName" required>
                            </div>

                            <div class="form-group">
                                <label for="email">Email:</label>
                                <input type="email" id="email" name="email" required>
                            </div>

                            <div class="form-group">
                                <label for="department">Department:</label>
                                <input type="text" id="department" name="department" required>
                            </div>

                            <div class="form-group">
                                <label for="position">Position:</label>
                                <input type="text" id="position" name="position" required>
                            </div>

                            <div class="form-group">
                                <label for="salary">Salary:</label>
                                <input type="text" id="salary" name="salary">
                            </div>

                            <div class="form-group">
                                <label for="image">Image:</label>
                                <input type="file" id="image" name="image">
                            </div>

                            <div class="form-group">
                                <label for="hireDate">Hire Date:</label>
                                <input type="date" id="hireDate" name="hireDate" required>
                            </div>

                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="row full-height">
                            <div class="col-md-12">
                                <div class="inner-grid-add-employee">
                                    <div class="col-md-12 col-height-add-employee">
                                        <div class="child-div">
                                            <div class="styled-form">
                                                <div class="form-group">
                                                    <label for="DateOfBirth">Date Of Birth:</label>
                                                    <input type="date" id="DateOfBirth" name="DateOfBirth" required>
                                                </div>
                                                <label for="houseNumber">House Number:</label>
                                                <input type="text" id="houseNumber" name="houseNumber">

                                                <label for="street">Street:</label>
                                                <input type="text" id="street" name="street">

                                                <label for="city">City:</label>
                                                <input type="text" id="city" name="city">
                                            </div>
                                        </div>
                                        <div class="child-div">
                                            <div class="styled-form">
                                                <label for="postCode">Post Code:</label>
                                                <input type="text" id="postCode" name="postCode">

                                                <label for="country">Country:</label>
                                                <input type="text" id="country" name="country">

                                                <label for="employeeAccess">Employee Access:</label>
                                                @if (employeeAccesses == null)
                                                {
                                                    <p>Loading...</p>
                                                }
                                                else
                                                {
                                                    <select class="styled-select" @onchange="OnEmployeeAccessSelected">
                                                        <option value="">Select an Employee Access</option>
                                                        @foreach (var access in employeeAccesses)
                                                        {
                                                            <option value="@access.Id">@access.Access</option>
                                                        }
                                                    </select>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-height-add-employee">
                                        <div class="styled-form">
                                            <label for="password">Password:</label>
                                            <input type="password" id="password" name="password" required>

                                            <label for="confirmPassword">Confirm Password:</label>
                                            <input type="password" id="confirmPassword" name="confirmPassword" required>
                                            <Button Color="ButtonColor.Success" Size="Size.Large"> Update Employee </Button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
</Tabs>
<Preload />
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
@code {
    [Inject] protected PreloadService preloadService { get; set; }
    Tabs tabs;
    private async Task ShowFaqsAsync() => await tabs.ShowTabByNameAsync("edit");
    private async Task ShowAccountsAsync() => await tabs.ShowTabByNameAsync("accounts");
    private async Task ShowAddAsync() => await tabs.ShowTabByNameAsync("add");

    #region grid

    private IEnumerable<Employees> employees;

    protected async override void OnInitialized()
    {
        employees = GetEmployees();
        employeeAccesses = await employeeService.GetEmployeeAccessesAsync();
    }

    private async Task<GridDataProviderResult<Employees>> EmployeesDataProvider(GridDataProviderRequest<Employees> request)
    {
        if (employees is null) // pull employees only one time for client-side filtering, sorting, and paging
            employees = GetEmployees(); // call a service or an API to pull the employees

        return await Task.FromResult(request.ApplyTo(employees));
    }

    private IEnumerable<Employees> GetEmployees()
    {
        return new List<Employees>
        {
            new Employees { Id = 107, FirstName = "Alice", Position = "AI Engineer", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 103, FirstName = "Bob", Position = "Senior DevOps Engineer", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 106, FirstName = "John", Position = "Data Engineer", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 104, FirstName = "Pop", Position = "Associate Architect", HireDate = DateTime.Now, IsActive = false },
            new Employees { Id = 105, FirstName = "Ronald", Position = "Senior Data Engineer", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 102, FirstName = "Line", Position = "Architect", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 101, FirstName = "Daniel", Position = "Architect", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 108, FirstName = "Zayne", Position = "Data Analyst", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 109, FirstName = "Isha", Position = "App Maker", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 107, FirstName = "Alice", Position = "AI Engineer", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 103, FirstName = "Bob", Position = "Senior DevOps Engineer", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 106, FirstName = "John", Position = "Data Engineer", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 104, FirstName = "Pop", Position = "Associate Architect", HireDate = DateTime.Now, IsActive = false },
            new Employees { Id = 105, FirstName = "Ronald", Position = "Senior Data Engineer", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 102, FirstName = "Line", Position = "Architect", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 101, FirstName = "Daniel", Position = "Architect", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 108, FirstName = "Zayne", Position = "Data Analyst", HireDate = DateTime.Now, IsActive = true },
            new Employees { Id = 109, FirstName = "Isha", Position = "App Maker", HireDate = DateTime.Now, IsActive = true },
        };
    }

    #endregion

    #region Employee

    private IEnumerable<EmployeeAccesses> employeeAccesses;
    private int selectedEmployeeAccessId; // To hold the selected value
    private string password;
    private string confirmPassword;
    private string firstName = "";
    private string lastName = "";
    private string email = "";
    private string department = "";
    private string position = "";
    private string salary = "";
    private string image = "";
    private DateTime hireDate = DateTime.Now;
    private DateTime DateOfBirth = DateTime.Now;
    private string houseNumber = "";
    private string street = "";
    private string city = "";
    private string postCode = "";
    private string country = "";

    #region Add

    private void OnEmployeeAccessSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedEmployeeAccessId = selectedId;
        }
    }

    private async Task<bool> AddEmployee()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            if(!(password == confirmPassword))
            {
                ShowMessage(ToastType.Danger, "Something went wrong!", "Passwords do not match!");
                return false;
            }
            var employeeAddress = new EmployeeAddresses()
            {
                City = city,
                Country = country,
                CreationDate = DateTime.Now, 
                HouseNumber = houseNumber, 
                ModificationDate = DateTime.Now, 
                PostCode = postCode, 
                Street = street,
                IsActive = true
            };

            var userAddress = new UsersAdresses()
            {
                City = city,
                Country = country,
                CreationDate = DateTime.Now,
                HouseNumber = houseNumber,
                ModificationDate = DateTime.Now,
                PostCode = postCode,
                Street = street,
                IsActive = true
            };

            if(!await employeeService.AddEmployeeAddressAsync(employeeAddress))
            {
                ShowMessage(ToastType.Danger, "Something went wrong!", "We could not add employee address this time!");
                return false;
            };

            if (!await employeeService.AddUserAddressAsync(userAddress))
            {
                ShowMessage(ToastType.Danger, "Something went wrong!", "We could not add user address this time!");
                return false;
            };

            var fullEmployeeAddress = await employeeService.GetEmployeeAddressAsync(employeeAddress);
            var fullUserAddress = await employeeService.GetUserAddressAsync(userAddress);

            var user = new Users()
            {
                FirstName = firstName,
                BusinesArea = department,
                Email = email,
                CompanyName = "Wordshop",
                DateOfBirth = this.DateOfBirth,
                CreationDate = DateTime.Now,
                IsActive = true,
                IsEmployee = true,
                ModificationDate = DateTime.Now,
                Position = position,
                SecondName = lastName, 
                SubscriptionTypeId = Config.SubscriptionId,
                Password = BCrypt.Net.BCrypt.HashPassword(password),
                UserAddressId = fullUserAddress.Id,
            };

            if(!await employeeService.AddUserAsync(user))
            {
                ShowMessage(ToastType.Danger, "Something went wrong!", "We could not add user this time!");
                return false;
            }

            var userId = (await employeeService.GetUserBasedOnEmail(user.Email)).Id;
            var companyId = (await employeeService.GetCompanyBasedOnName(user.CompanyName)).Id;

            var employee = new Employees()
            {
                CreationDate = DateTime.Now,
                DateOfBirth = DateOfBirth,
                Department = department,
                Email = email,
                LastName = lastName,
                FirstName = firstName,
                Position = position,
                Salary = salary,
                EmployeeAccessId = selectedEmployeeAccessId,
                EmployeeAddressId = fullEmployeeAddress.Id,
                IsActive = true,
                HireDate = hireDate,
                ModificationDate = DateTime.Now,
                CompanyId = companyId,
                UserId = userId
            };

            if (await employeeService.AddEmployeesAsync(employee))
            {
                preloadService.Hide();
                ShowMessage(ToastType.Success, "Success!", "New employee has been added!");
                return true;
            };
            preloadService.Hide();
            ShowMessage(ToastType.Danger, "Something went wrong!", "We could not add employee this time!");
            return false;
        }
        catch (Exception e)
        {
            preloadService.Hide();
            ShowMessage(ToastType.Danger, "Something went wrong!", e.Message);
            return false;
        }
       
    }

    #endregion


    #endregion

}
