@page "/customerdata"
@using BlazorBootstrap
@using EnterpriseMaster.DbServices.Models.Database;
@using EnterpriseMaster.DesktopApp.Data.Models;
@using EnterpriseMaster.DesktopApp.Data.Services.CustomerDataServices;
@inherits MainLayout

@inject CustomerDataService customerService

<Tabs EnableFadeEffect="true">
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.PersonArmsUp" /> Customer Profiles
        </TitleTemplate>
        <Content>
            <br />
            <Grid TItem="CustomerDataViewModel"
                  @ref="gridCustomerDataViewModel"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  DataProvider="CustomerDataViewModelDataProvider"
                  Class="table table-hover table-bordered table-striped"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true">
                <GridColumn TItem="CustomerDataViewModel" HeaderText="First Name" PropertyName="FirstName" SortKeySelector="item => item.FirstName">
                    @context.FirstName
                </GridColumn>
                <GridColumn TItem="CustomerDataViewModel" HeaderText="Last Name" PropertyName="LastName" SortKeySelector="item => item.LastName">
                    @context.LastName
                </GridColumn>
                <GridColumn TItem="CustomerDataViewModel" HeaderText="Email" PropertyName="Email" SortKeySelector="item => item.Email">
                    @context.Email
                </GridColumn>
                <GridColumn TItem="CustomerDataViewModel" HeaderText="Phone" PropertyName="Phone" SortKeySelector="item => item.Phone">
                    @context.Phone
                </GridColumn>
                <GridColumn TItem="CustomerDataViewModel" HeaderText="Company Name" PropertyName="ComapnyName" SortKeySelector="item => item.ComapnyName">
                    @context.ComapnyName
                </GridColumn>
            </Grid>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Rss" /> Customer Feedback
        </TitleTemplate>
        <Content>
            <br />
            @if(feedbacks.Count > 0)
            {
                <Accordion Class="container" AlwaysOpen="true">
                    @foreach (var item in feedbacks)
                    {
                        var name = item.Customer != null ? $"{item.Customer.FirstName} {item.Customer.LastName} || Email: {item.Customer.Email} || {item.ModificationDate.ToString("yyyy-MM-dd hh:mm")}" : $"Anonymous user || {item.ModificationDate.ToString("yyyy-MM-dd hh:mm")}";
                        <AccordionItem Title=@name IsActive="true">
                            <Content>
                                <b>@item.FeedbackText</b>
                                <div class="star-rating" style="white-space: nowrap;">
                                    @for (int i = 1; i <= 10; i++)
                                    {
                                        <span>@(i <= item.Rating ? "\u2605" : "\u2606")</span>
                                    }
                                </div>
                            </Content>
                        </AccordionItem>
                    }
                </Accordion>
            }
            else
            {
                <Alert Color="AlertColor.Info" Class="container">
                    <h4 class="alert-heading">No Feedback Available</h4>
                    <p>There are currently no feedback available. Check back later for updates.</p>
                    <hr>
                </Alert>
            }
        </Content>
    </Tab>
</Tabs>
@code {
    protected async override void OnInitialized()
    {
        customerInformation = await customerService.GetAllCustomerInformationForGridAsync();
        feedbacks = (await customerService.GetAllCustomerFeedbacksAsync()).OrderByDescending(item => item.ModificationDate).ToList();
        foreach(var item in feedbacks)
        {
            if(item.CustomerId != null)
            {
                item.Customer = await customerService.GetCustomerInformationAsync(item.CustomerId.Value);
            }
        }
        await gridCustomerDataViewModel.RefreshDataAsync();
        StateHasChanged();
    }

    #region CustomerDataViewModel

    private List<CustomerDataViewModel> customerInformation = new List<CustomerDataViewModel>();
    private Grid<CustomerDataViewModel> gridCustomerDataViewModel;
    private async Task<GridDataProviderResult<CustomerDataViewModel>> CustomerDataViewModelDataProvider(GridDataProviderRequest<CustomerDataViewModel> request)
    {
        if (customerInformation is null)
            customerInformation = await customerService.GetAllCustomerInformationForGridAsync();

        return await Task.FromResult(request.ApplyTo(customerInformation));
    }

    #endregion

    #region Customer Feedback

    private List<CustomerFeedbacks> feedbacks = new List<CustomerFeedbacks>();

    #endregion
}
