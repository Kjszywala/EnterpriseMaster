@page "/offers"
@using BlazorBootstrap
@using EnterpriseMaster.DbServices.Models.Database;
@using EnterpriseMaster.DesktopApp.Data.Models;
@using EnterpriseMaster.DesktopApp.Data.Services.OffersServices;
@inherits MainLayout
@inject OfferServices offerServices

<Tabs EnableFadeEffect="true">
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.BuildingAdd" /> Offers
        </TitleTemplate>
        <Content>
            <br />
            <Grid TItem="OffersViewModel"
                  @ref="gridOffersViewModel"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  DataProvider="OffersViewModelDataProvider"
                  Class="table table-hover table-bordered table-striped"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true">
                <GridColumn TItem="OffersViewModel" HeaderText="Product Name" PropertyName="ProductName" SortKeySelector="item => item.ProductName">
                    @context.ProductName
                </GridColumn>
                <GridColumn TItem="OffersViewModel" HeaderText="Offer Name" PropertyName="OfferName" SortKeySelector="item => item.OfferName">
                    @context.OfferName
                </GridColumn>
                <GridColumn TItem="OffersViewModel" HeaderText="Available From" PropertyName="AvailableFrom" SortKeySelector="item => item.AvailableFrom">
                    @context.AvailableFrom
                </GridColumn>
                <GridColumn TItem="OffersViewModel" HeaderText="Available To" PropertyName="AvailableTo" SortKeySelector="item => item.AvailableTo">
                    @context.AvailableTo
                </GridColumn>
                <GridColumn TItem="OffersViewModel" HeaderText="Description" PropertyName="OfferDescrition" SortKeySelector="item => item.OfferDescrition">
                    @context.OfferDescrition
                </GridColumn>
                <GridColumn TItem="OffersViewModel" HeaderText="Discount" PropertyName="Discount" SortKeySelector="item => item.Discount">
                    @context.Discount
                </GridColumn>
            </Grid>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.People" /> Create Offers
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="left-panel">1</div>
                <div class="right-panel">
                    <div class="top-right">2</div>
                    <div class="bottom-right">3</div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.BuildingExclamation" /> Offer Approval Workflow
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="left-panel">1</div>
                <div class="right-panel">
                    <div class="top-right">2</div>
                    <div class="bottom-right">3</div>
                </div>
            </div>
        </Content>
    </Tab>
</Tabs>
@code {
    protected async override void OnInitialized()
    {
        customerInformation = await offerServices.GetAllOffersForGridAsync();

        await gridOffersViewModel.RefreshDataAsync();
    }

    #region OffersViewModel

    private List<OffersViewModel> customerInformation = new List<OffersViewModel>();
    private Grid<OffersViewModel> gridOffersViewModel;
    private async Task<GridDataProviderResult<OffersViewModel>> OffersViewModelDataProvider(GridDataProviderRequest<OffersViewModel> request)
    {
        if (customerInformation is null)
            customerInformation = await offerServices.GetAllOffersForGridAsync();

        return await Task.FromResult(request.ApplyTo(customerInformation));
    }

    #endregion

    #region Create Offers

    private Products product;
    private DateTime availableFrom = DateTime.Now;
    private DateTime availableTo = DateTime.Now;
    private string offerName;
    private string offerDescription;
    private string RejectReason;
    public int Discount;

    public async Task AddOfferToApprovals()
    {

    }

    #endregion

    #region Approvals

    public async Task ApproveOffer()
    {

    }

    public async Task DeclineOffer()
    {

    }

    #endregion
}
