@page "/sales"
@using BlazorBootstrap
@using EnterpriseMaster.DbServices.Models.Database;
@using EnterpriseMaster.DesktopApp.Data.Models;
@using EnterpriseMaster.DesktopApp.Data.Services.AccountingServices;
@using EnterpriseMaster.DesktopApp.Data.Services.CustomerDataServices;
@using EnterpriseMaster.DesktopApp.Data.Services.Inventory;
@using EnterpriseMaster.DesktopApp.Data.Services.OrdersServices;
@using EnterpriseMaster.DesktopApp.Data.Services.ProductionServices;
@using EnterpriseMaster.DesktopApp.Data.Services.SalesServices;
@using EnterpriseMaster.DesktopApp.Helpers.Enums;
@using EnterpriseMaster.DesktopApp.Helpers.Methods;
@inherits MainLayout
@inject SalesService orderService
@inject CustomerDataService customerDataService
@inject OrderService orderAddressesService
@inject InventoryService inventoryService
@inject EmployeeService employeeService
@inject ProductionService productionService

<Tabs EnableFadeEffect="true">
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Border" /> Sales Orders
        </TitleTemplate>
        <Content>
            <br />
            <Grid TItem="OrderViewModel"
                  @ref="gridOrderViewModel"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  DataProvider="OrderViewModelDataProvider"
                  Class="table table-hover table-bordered table-striped"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  OnRowClick="OnShowModalClick"
                  Responsive="true">
                <GridColumn TItem="OrderViewModel" HeaderText="Product Name" PropertyName="ProductName" SortKeySelector="item => item.ProductName">
                    @context.ProductName
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Product Code" PropertyName="ProductCode" SortKeySelector="item => item.ProductCode">
                    @context.ProductCode
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Price Paid($)" PropertyName="PricePaid" SortKeySelector="item => item.PricePaid">
                    @context.PricePaid
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Order Number" PropertyName="OrderNumber" SortKeySelector="item => item.OrderNumber">
                    @context.OrderNumber
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Payment Term" PropertyName="PaymentTerm" SortKeySelector="item => item.PaymentTerm">
                    @context.PaymentTerm
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Quantity" PropertyName="Quantity" SortKeySelector="item => item.Quantity">
                    @context.Quantity
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Quantity Type" PropertyName="QuantityType" SortKeySelector="item => item.QuantityType">
                    @context.QuantityType
                </GridColumn>
                <GridColumn TItem="OrderViewModel" HeaderText="Order Status" PropertyName="OrderStatus" SortKeySelector="item => item.OrderStatus">
                    <div style="display: flex; justify-content: center; align-items: center;">
                        <span class="@OrderStatusClasses.GetClassForOrderStatus(context.OrderStatus)" style="width: 150px; text-align: center;">@context.OrderStatus</span>
                    </div>
                </GridColumn>
            </Grid>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Braces" /> Make An Order
        </TitleTemplate>
        <Content>
            <div id="salesOrderContainer">
                <div class="sales-order-form">

                    <!-- Sales Order Number -->
                    <label for="salesOrderNumber">Sales Order Number:</label>
                    <input type="text" id="salesOrderNumber" name="salesOrderNumber" class="form-control" disabled="disabled" placeholder="@guid" />

                    <label for="customerSelect">Select Customer:</label>
                    <div class="col col-dropdown">
                        @if (customersForSelect == null)
                        {
                            <p>loading...</p>
                        }
                        else
                        {
                            <select id="customerSelect" class="dropdown-style" @onchange="OnCustomerOrderSelected">
                                <option>Select Customer</option>
                                @foreach (var access in customersForSelect)
                                {
                                    <option value="@access.Id">@access.FirstName @access.LastName (@access.Email)</option>
                                }
                            </select>
                        }
                    </div>

                    <!-- Quantity -->

                    <br />
                    <label for="quantity">Quantity:</label>
                    <NumberInput TValue="int" @bind-Value="@quantitySalesOrder" Placeholder="Enter amount" />

                    <label for="QuantitySelect">Select Quantity Type:</label>
                    <div class="col col-dropdown">
                        @if (quantityTypes == null)
                        {
                            <p>loading...</p>
                        }
                        else
                        {
                            <select id="quantityTypes" class="dropdown-style" @onchange="OnQuantityTypeSelected">
                                <option>Select Quantity Type</option>
                                @foreach (var access in quantityTypes)
                                {
                                    <option value="@access.Id">@access.Type</option>
                                }
                            </select>
                        }
                    </div>

                    <!-- Discount -->
                    <label for="discount">Discount:</label>
                    <NumberInput TValue="int" @bind-Value="@discountForOrder" Placeholder="Enter amount" />

                    <label for="productSelect">Select Product:</label>
                    <div class="col col-dropdown">
                        @if (productsForOrder == null)
                        {
                            <p>loading...</p>
                        }
                        else
                        {
                            <select id="productSelect" class="dropdown-style" @onchange="OnProductSelected">
                                <option>Select Product</option>
                                @foreach (var access in productsForOrder)
                                {
                                    <option value="@access.Id">@access.ProductName (@access.ProductCode)</option>
                                }
                            </select>
                        }
                    </div>
                    <br />
                    <!-- Delivery Date -->
                    <label for="deliveryDate">Delivery Date:</label>
                    <DateInput id="deliveryDate" TValue="DateOnly" @bind-Value="@deliveryDate" Placeholder="Enter Date" />
                    <br />
                    <!-- Payment Term -->
                    <label for="paymentTerm">Payment Term:</label>
                    <DateInput id="paymentTerm" TValue="DateOnly" @bind-Value="@paymentTerm" Placeholder="Enter Date" />

                    <br />
                    <!-- Submit Button -->
                    <div class="bottomSupplierAdd">
                        <button class="button-36" @onclick="makeAnOrder">Make An Order</button>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Diagram2" /> Customer Management
        </TitleTemplate>
        <Content>
            <br />
            <div class="containerpanel">
                <div class="toppanel-panel">
                    <br />
                    <Grid TItem="CustomerDataViewModel"
                          @ref="gridCustomerManagement"
                          AllowFiltering="true"
                          AllowPaging="true"
                          AllowSorting="true"
                          AllowRowClick="true"
                          DataProvider="CustomersViewModelDataProvider"
                          Class="table table-hover table-bordered table-striped"
                          FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                          HeaderRowCssClass="bg-dark text-white border-bottom-0"
                          PageSize="5"
                          PageSizeSelectorVisible="true"
                          PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                          PaginationItemsTextFormat="{0} - {1} of {2} pages"
                          ItemsPerPageText="Items per page"
                          Responsive="true">
                        <GridColumn TItem="CustomerDataViewModel" HeaderText="First Name" PropertyName="FirstName" SortKeySelector="item => item.FirstName">
                            @context.FirstName
                        </GridColumn>
                        <GridColumn TItem="CustomerDataViewModel" HeaderText="Last Name" PropertyName="LastName" SortKeySelector="item => item.LastName">
                            @context.LastName
                        </GridColumn>
                        <GridColumn TItem="CustomerDataViewModel" HeaderText="Email" PropertyName="Email" SortKeySelector="item => item.Email">
                            @context.Email
                        </GridColumn>
                        <GridColumn TItem="CustomerDataViewModel" HeaderText="Phone" PropertyName="Phone" SortKeySelector="item => item.Phone">
                            @context.Phone
                        </GridColumn>
                    </Grid>
                </div>
                <div class="bottomPanel-panel">
                    <div class="bottomPanel-left">
                        <h3>Add New Customer</h3>
                        <hr />
                        <div class="containerSupplierAdd">
                            <div class="topSupplierAdd">
                                <div class="top-leftSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="firstNameCustomer" placeholder="enter first name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="lastNameCustomer" placeholder="enter last name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="emailCustomer" placeholder="enter email" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="phoneCustomer" placeholder="enter phone" />
                                    </div>
                                </div>
                                <div class="top-rightSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="customerAddressCustomer.HouseNumber" placeholder="enter house number" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="customerAddressCustomer.Street" placeholder="enter street" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="customerAddressCustomer.City" placeholder="enter city" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="customerAddressCustomer.PostCode" placeholder="enter postal code" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="customerAddressCustomer.Country" placeholder="enter country" />
                                    </div>
                                </div>
                            </div>
                            <hr />
                            <div class="centered-container">
                                <Switch Class="mt-3" Value="billingAddressSameAsCustomerAddress" Label="Billing Address Same As Customer Address?" ValueExpression="() => billingAddressSameAsCustomerAddress" ValueChanged="SwitchChangedBilling" />
                            </div>
                            @if (!billingAddressSameAsCustomerAddress)
                            {
                                <div class="topSupplierAdd">
                                    <div class="top-leftSupplierAdd">
                                        <div class="mb-3">
                                            <input @bind="billingAddressCustomer.HouseNumber" placeholder="enter house number" />
                                        </div>
                                        <div class="mb-3">
                                            <input @bind="billingAddressCustomer.Street" placeholder="enter street" />
                                        </div>
                                        <div class="mb-3">
                                            <input @bind="billingAddressCustomer.City" placeholder="enter city" />
                                        </div>
                                    </div>
                                    <div class="top-rightSupplierAdd">
                                        <div class="mb-3">
                                            <input @bind="billingAddressCustomer.PostCode" placeholder="enter postal code" />
                                        </div>
                                        <div class="mb-3">
                                            <input @bind="billingAddressCustomer.Country" placeholder="enter country" />
                                        </div>
                                    </div>
                                </div>
                            }
                            <hr />
                            <div class="centered-container">
                                <Switch Class="mt-3" Value="shippingAddressSameAsCustomerAddress" Label="Shipping Address Same As Customer Address?" ValueExpression="() => shippingAddressSameAsCustomerAddress" ValueChanged="SwitchChangedShipping" />
                            </div>
                            @if (!shippingAddressSameAsCustomerAddress)
                            {
                                <div class="topSupplierAdd">
                                    <div class="top-leftSupplierAdd">
                                        <div class="mb-3">
                                            <input @bind="shippingAddressCustomer.HouseNumber" placeholder="enter house number" />
                                        </div>
                                        <div class="mb-3">
                                            <input @bind="shippingAddressCustomer.Street" placeholder="enter street" />
                                        </div>
                                        <div class="mb-3">
                                            <input @bind="shippingAddressCustomer.City" placeholder="enter city" />
                                        </div>
                                    </div>
                                    <div class="top-rightSupplierAdd">
                                        <div class="mb-3">
                                            <input @bind="shippingAddressCustomer.PostCode" placeholder="enter postal code" />
                                        </div>
                                        <div class="mb-3">
                                            <input @bind="shippingAddressCustomer.Country" placeholder="enter country" />
                                        </div>
                                    </div>
                                </div>
                            }
                            <br />
                            <div class="bottomSupplierAdd">
                                <button class="button-36" @onclick="addCustomer">Add New Customer</button>
                            </div>
                        </div>
                    </div>
                    <div class="bottomPanel-right">
                        <div class="column-containerSupplierAdd">
                            <div class="columnSupplierAdd">
                                <h3>Edit Customer</h3>
                            </div>
                            <div class="columnSupplierAdd">
                                <div class="row">
                                    <div class="col col-dropdown">
                                        @if (shippers == null)
                                        {
                                            <p>loading...</p>
                                        }
                                        else
                                        {
                                            <select id="employeedropdown" class="dropdown-style" @onchange="OnCustomerSelected">
                                                <option>Select Customer</option>
                                                @foreach (var access in customerInformation)
                                                {
                                                    <option value="@access.Id">@access.Email (@access.FirstName @access.LastName)</option>
                                                }
                                            </select>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="containerSupplierAdd">
                            <div class="topSupplierAdd">
                                <div class="top-leftSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="firstNameCustomerEdit" placeholder="enter first name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="lastNameCustomerEdit" placeholder="enter last name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="emailCustomerEdit" placeholder="enter email" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="phoneCustomerEdit" placeholder="enter phone" />
                                    </div>
                                </div>
                                <div class="top-rightSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="customerAddressCustomerEdit.HouseNumber" placeholder="enter house number" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="customerAddressCustomerEdit.Street" placeholder="enter street" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="customerAddressCustomerEdit.City" placeholder="enter city" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="customerAddressCustomerEdit.PostCode" placeholder="enter postal code" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="customerAddressCustomerEdit.Country" placeholder="enter country" />
                                    </div>
                                </div>
                            </div>
                            <hr />
                            <div class="centered-container">
                                <Switch Class="mt-3" Value="billingAddressSameAsCustomerAddressEdit" Label="Billing Address Same As Customer Address?" ValueExpression="() => billingAddressSameAsCustomerAddressEdit" ValueChanged="SwitchChangedBillingEdit" />
                            </div>
                            @if (!billingAddressSameAsCustomerAddressEdit)
                            {
                                <div class="topSupplierAdd">
                                    <div class="top-leftSupplierAdd">
                                        <div class="mb-3">
                                            <input @bind="billingAddressCustomerEdit.HouseNumber" placeholder="enter house number" />
                                        </div>
                                        <div class="mb-3">
                                            <input @bind="billingAddressCustomerEdit.Street" placeholder="enter street" />
                                        </div>
                                        <div class="mb-3">
                                            <input @bind="billingAddressCustomerEdit.City" placeholder="enter city" />
                                        </div>
                                    </div>
                                    <div class="top-rightSupplierAdd">
                                        <div class="mb-3">
                                            <input @bind="billingAddressCustomerEdit.PostCode" placeholder="enter postal code" />
                                        </div>
                                        <div class="mb-3">
                                            <input @bind="billingAddressCustomerEdit.Country" placeholder="enter country" />
                                        </div>
                                    </div>
                                </div>
                            }
                            <hr />
                            <div class="centered-container">
                                <Switch Class="mt-3" Value="shippingAddressSameAsCustomerAddressEdit" Label="Shipping Address Same As Customer Address?" ValueExpression="() => shippingAddressSameAsCustomerAddressEdit" ValueChanged="SwitchChangedShippingEdit" />
                            </div>
                            @if (!shippingAddressSameAsCustomerAddressEdit)
                            {
                                <div class="topSupplierAdd">
                                    <div class="top-leftSupplierAdd">
                                        <div class="mb-3">
                                            <input @bind="shippingAddressCustomerEdit.HouseNumber" placeholder="enter house number" />
                                        </div>
                                        <div class="mb-3">
                                            <input @bind="shippingAddressCustomerEdit.Street" placeholder="enter street" />
                                        </div>
                                        <div class="mb-3">
                                            <input @bind="shippingAddressCustomerEdit.City" placeholder="enter city" />
                                        </div>
                                    </div>
                                    <div class="top-rightSupplierAdd">
                                        <div class="mb-3">
                                            <input @bind="shippingAddressCustomerEdit.PostCode" placeholder="enter postal code" />
                                        </div>
                                        <div class="mb-3">
                                            <input @bind="shippingAddressCustomerEdit.Country" placeholder="enter country" />
                                        </div>
                                    </div>
                                </div>
                            }
                            <br />
                            <div class="bottomSupplierAdd">
                                <button class="button-36" @onclick="editCustomer">Update Customer</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Diagram2" /> Shippers Management
        </TitleTemplate>
        <Content>
            <br />
            <div class="containerpanel">
                <div class="toppanel-panel">
                    <br />
                    <Grid TItem="ShippersViewModel"
                          @ref="gridShippers"
                          AllowFiltering="true"
                          AllowPaging="true"
                          AllowSorting="true"
                          AllowRowClick="true"
                          DataProvider="ShippersViewModelDataProvider"
                          Class="table table-hover table-bordered table-striped"
                          FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                          HeaderRowCssClass="bg-dark text-white border-bottom-0"
                          PageSize="5"
                          PageSizeSelectorVisible="true"
                          PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                          PaginationItemsTextFormat="{0} - {1} of {2} pages"
                          ItemsPerPageText="Items per page"
                          Responsive="true">
                        <GridColumn TItem="ShippersViewModel" HeaderText="Company Name" PropertyName="CompanyName" SortKeySelector="item => item.CompanyName">
                            @context.CompanyName
                        </GridColumn>
                        <GridColumn TItem="ShippersViewModel" HeaderText="Contact Name" PropertyName="ContactName" SortKeySelector="item => item.ContactName">
                            @context.ContactName
                        </GridColumn>
                        <GridColumn TItem="ShippersViewModel" HeaderText="Email" PropertyName="Email" SortKeySelector="item => item.Email">
                            @context.Email
                        </GridColumn>
                        <GridColumn TItem="ShippersViewModel" HeaderText="Phone" PropertyName="Phone" SortKeySelector="item => item.Phone">
                            @context.Phone
                        </GridColumn>
                        <GridColumn TItem="ShippersViewModel" HeaderText="House Number" PropertyName="HouseNumber" SortKeySelector="item => item.HouseNumber">
                            @context.HouseNumber
                        </GridColumn>
                        <GridColumn TItem="ShippersViewModel" HeaderText="Street" PropertyName="Street" SortKeySelector="item => item.Street">
                            @context.Street
                        </GridColumn>
                        <GridColumn TItem="ShippersViewModel" HeaderText="Post Code" PropertyName="PostCode" SortKeySelector="item => item.PostCode">
                            @context.PostCode
                        </GridColumn>
                        <GridColumn TItem="ShippersViewModel" HeaderText="City" PropertyName="City" SortKeySelector="item => item.City">
                            @context.City
                        </GridColumn>
                    </Grid>
                </div>
                <div class="bottomPanel-panel">
                    <div class="bottomPanel-left">
                        <h3>Add New Shipper</h3>
                        <hr />
                        <div class="containerSupplierAdd">
                            <div class="topSupplierAdd">
                                <div class="top-leftSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="companyName" placeholder="enter company name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="contactName" placeholder="enter contact name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="phone" placeholder="enter phone" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="email" placeholder="enter email" />
                                    </div>
                                </div>
                                <div class="top-rightSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="houseNumber" placeholder="enter house number" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="street" placeholder="enter street" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="city" placeholder="enter city" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="postalCode" placeholder="enter postal code" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="country" placeholder="enter country" />
                                    </div>
                                </div>
                            </div>
                            <div class="bottomSupplierAdd">
                                <button class="button-36" @onclick="addShipper">Add New Shipper</button>
                            </div>
                        </div>
                    </div>
                    <div class="bottomPanel-right">
                        <div class="column-containerSupplierAdd">
                            <div class="columnSupplierAdd">
                                <h3>Edit Shipper</h3>
                            </div>
                            <div class="columnSupplierAdd">
                                <div class="row">
                                    <div class="col col-dropdown">
                                        @if (shippers == null)
                                        {
                                            <p>loading...</p>
                                        }
                                        else
                                        {
                                            <select id="employeedropdown" class="dropdown-style" @onchange="OnShipperSelected">
                                                <option>Select Shipper</option>
                                                @foreach (var access in shippers)
                                                {
                                                    <option value="@access.Id">@access.ContactName (@access.CompanyName)</option>
                                                }
                                            </select>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="containerSupplierAdd">
                            <div class="topSupplierAdd">
                                <div class="top-leftSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="companyNameEdit" placeholder="enter company name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="contactNameEdit" placeholder="enter contact name" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="phoneEdit" placeholder="enter phone" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="emailEdit" placeholder="enter email" />
                                    </div>
                                </div>
                                <div class="top-rightSupplierAdd">
                                    <div class="mb-3">
                                        <input @bind="houseNumberEdit" placeholder="enter house number" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="streetEdit" placeholder="enter street" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="cityEdit" placeholder="enter city" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="postalCodeEdit" placeholder="enter postal code" />
                                    </div>
                                    <div class="mb-3">
                                        <input @bind="countryEdit" placeholder="enter country" />
                                    </div>
                                </div>
                            </div>
                            <div class="bottomSupplierAdd">
                                <button class="button-36" @onclick="editShipper">Update Shipper</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Braces" /> Returns and Refunds
        </TitleTemplate>
        <Content>
            <br />
            @if (refundsList.Count > 0)
            {
                <Accordion Class="container">
                    @foreach (var item in refundsList)
                    {
                        <AccordionItem Title=@item.Notes>
                            <Content>
                                <b>Refund date: @item.RefundDate</b>
                                <br />
                                <div>
                                    <div class="mb-3">
                                        <label class="form-label">Refund amount:</label>
                                        <NumberInput TValue="decimal" @bind-Value="@item.RefundAmount" Placeholder="Enter amount" Disabled />
                                    </div>
                                </div>
                            </Content>
                        </AccordionItem>
                    }
                </Accordion>
            }
            else
            {
                <Alert Color="AlertColor.Info" Class="container">
                    <h4 class="alert-heading">No Refunds Available</h4>
                    <p>There are currently no refunds available. You're all caught up!</p>
                    <hr>
                    <p class="mb-0">Feel free to check back later or contact the relevant department for more information.</p>
                </Alert>
            }
        </Content>
    </Tab>
</Tabs>
<Preload />
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
<Modal @ref="salesOrderModalWindow" Title="@salesOrderModal.SalesOrderNumber" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="form-container">
            <form>
                <div class="form-group">
                    <label for="productName">Product Name:</label>
                    <input type="text" id="productName" name="productName" value="@salesOrderModal.Product.ProductName" disabled />
                </div>

                <div class="form-group">
                    <label for="productCode">Product Code:</label>
                    <input type="text" id="productCode" name="productCode" disabled value="@salesOrderModal.Product.ProductCode" />
                </div>

                <div class="form-group">
                    <label for="pricePaid">Price To Paid:</label>
                    <input type="text" id="pricePaid" name="pricePaid" disabled value="@salesOrderModal.PricePaid" />
                </div>

                <div class="form-group">
                    <label for="paymentTerm">Payment Term:</label>
                    <input type="text" id="paymentTerm" name="paymentTerm" disabled value="@salesOrderModal.PaymentTerm" />
                </div>

                <div class="form-group">
                    <label for="quantity">Quantity:</label>
                    <input type="text" id="quantity" name="quantity" disabled value="@salesOrderModal.Quantity" />
                </div>

                <div class="form-group">
                    <label for="quantityType">Quantity Type:</label>
                    <input type="text" id="quantityType" name="quantityType" disabled value="@salesOrderModal.QuantityType.Type" />
                </div>

                <div class="form-group">
                    <label for="orderStatus">Order Status:</label>
                    <input type="text" id="orderStatus" name="orderStatus" disabled value="@salesOrderModal.OrderStatuse.Discription" />
                </div>
            </form>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Success" @onclick="proceedToProduction">Procceed To Production</Button>
        <Button Color="ButtonColor.Warning" @onclick="OnShowModalRejectClick">Refund</Button>
        <Button Color="ButtonColor.Info" @onclick="cancelOrder">Cancel</Button>
        <Button Color="ButtonColor.Danger" @onclick="OnHideModalClick">Close</Button>
    </FooterTemplate>
</Modal>
<Modal @ref="modal" Title="Reject Reason">
    <BodyTemplate>
        Specify the reject reason here:
        <textarea class="form-control" id="exampleTextarea" @bind="rejectReason" rows="5"></textarea>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalRejectClick">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="RejectReasonIsNotEmpty">Save</Button>
    </FooterTemplate>
</Modal>
@code {
    protected async override void OnInitialized()
    {
        salesOrders = await orderService.GetAllSalesOrdersForGridAsync();
        shippersList = await orderService.GetAllShippersForGridAsync();
        shippers = await orderService.GetAllShippersAsync();
        customerInformation = await customerDataService.GetAllCustomerInformationAsync();
        customerManagementViewModels = await customerDataService.GetAllCustomerInformationForGridAsync();
        customersForSelect = customerInformation;
        quantityTypes = await inventoryService.GetAllQuantityTypesAsync();
        productsForOrder = await inventoryService.GetAllProductsAsync();
        foreach(var item in shippers)
        {
            item.ShippersAddresses = await orderService.GetShipperAddressAsync(item.ShippersAddressId.Value);
        }
        refundsList = await orderService.GetAllRefundsAsync();
        await gridOrderViewModel.RefreshDataAsync();
        await gridShippers.RefreshDataAsync();
        await gridCustomerManagement.RefreshDataAsync();
        StateHasChanged();
    }

    #region Make an order

    private DateOnly deliveryDate = DateOnly.FromDateTime(DateTime.Now);
    private DateOnly paymentTerm = DateOnly.FromDateTime(DateTime.Now);
    private List<CustomerInformation> customersForSelect = new List<CustomerInformation>();
    private int selectedCustomerForSelect;
    private int quantitySalesOrder = 0;
    private List<QuantityTypes> quantityTypes = new List<QuantityTypes>();
    private int selectedQuantityType;
    private int discountForOrder = 0;
    private List<Products> productsForOrder = new List<Products>();
    private int selectedProduct;
    private Guid guid = Guid.NewGuid();

    private async Task makeAnOrder()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            if (!IsValidSalesOrder())
            {
                return;
            }
            var customer = await customerDataService.GetCustomerInformationAsync(selectedCustomerForSelect);
            var quantityType = await inventoryService.GetQuantityTypesAsync(selectedQuantityType);
            var product = await inventoryService.GetProductAsync(selectedProduct);

            var order = new SalesOrders()
            {
                BillingAddressId = customer.BillingAddressId,
                CreationDate = DateTime.Now,
                ModificationDate = DateTime.Now,
                CustomerInformationId = customer.Id,
                DeliveryDate = deliveryDate.ToDateTime(TimeOnly.MinValue),
                Discount = discountForOrder,
                PaymentTerm = paymentTerm.ToDateTime(TimeOnly.MinValue),
                EmployeeId = (await employeeService.GetEmployeesAsync()).Where(item2 => item2.UserId == Config.UserId).FirstOrDefault().Id,
                IsActive = true,
                OrderDate = DateTime.Now,
                OrderStatuseId = (int)StatusForOrder.Open,
                QuantityTypeId = selectedQuantityType,
                SalesOrderNumber = guid.ToString(),
                Quantity = quantitySalesOrder,
                PricePaid = quantitySalesOrder * product.Price,
                ProductId = selectedProduct,
                RejectedReason = ""

            };
            if (!await orderAddressesService.AddSalesOrderAsync(order))
            {
                ShowMessage(ToastType.Info, "Warning!", "Something went wrong!");
                preloadService.Hide();
                return;
            }
            preloadService.Hide();
            ShowMessage(ToastType.Success, "Success!", "Sales order added successfully!");
            salesOrders = await orderService.GetAllSalesOrdersForGridAsync();
            await gridOrderViewModel.RefreshDataAsync();
            StateHasChanged();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while makin an order!");
            preloadService.Hide();
        }
    }

    private async void OnProductSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedProduct = selectedId;
        }
    }

    private async void OnCustomerOrderSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedCustomerForSelect = selectedId;
        }
    }

    private async void OnQuantityTypeSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedQuantityType = selectedId;
        }
    }

    #endregion

    #region OrderViewModel

    private List<OrderViewModel> salesOrders = new List<OrderViewModel>();
    private Grid<OrderViewModel> gridOrderViewModel;
    private SalesOrders salesOrderModal = new SalesOrders();
    private Modal salesOrderModalWindow;
    private Modal modal;
    private string rejectReason;
    private async Task<GridDataProviderResult<OrderViewModel>> OrderViewModelDataProvider(GridDataProviderRequest<OrderViewModel> request)
    {
        if (salesOrders is null)
            salesOrders = await orderService.GetAllSalesOrdersForGridAsync();

        return await Task.FromResult(request.ApplyTo(salesOrders));
    }

    private async Task OnShowModalClick(GridRowEventArgs<OrderViewModel> args)
    {
        salesOrderModal = await orderService.GetSalesOrdersAsync((int)args.Item.Id);
        salesOrderModal.Product = await inventoryService.GetProductAsync(salesOrderModal.ProductId.Value);
        salesOrderModal.OrderStatuse = await orderService.GetOrderStatusAsync(salesOrderModal.OrderStatuseId.Value);
        salesOrderModal.QuantityType = await inventoryService.GetQuantityTypesAsync(salesOrderModal.ProductId.Value);
        await salesOrderModalWindow?.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await salesOrderModalWindow?.HideAsync();
    } 

    private async Task OnShowModalRejectClick()
    {
        await modal?.ShowAsync();
    }

    private async Task OnHideModalRejectClick()
    {
        await modal?.HideAsync();
    }

    private async Task RejectReasonIsNotEmpty()
    {
        if (string.IsNullOrEmpty(rejectReason))
        {
            ShowMessage(ToastType.Warning, "Warning!", "Reject reason cannot be empty!");
            return;
        }
        salesOrderModal.RejectedReason = rejectReason;
        await returnAndRefund();
        await modal?.HideAsync();
        await OnHideModalClick();
    }

    private async Task proceedToProduction()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            var productionOrder = new ProductionOrders()
            {
                CreationDate = DateTime.Now,
                DueDate = salesOrderModal.DeliveryDate.AddDays(-3),
                IsActive = true,
                ModificationDate = DateTime.Now,
                OrderDate = DateTime.Now,
                ProductId = salesOrderModal.ProductId,
                ProductionOrderStatusId = (int)StatusForProductionOrder.Open,
                Quantity = salesOrderModal.Quantity
            };

            if(salesOrderModal.OrderStatuseId >= (int)StatusForOrder.InProgress)
            {
                ShowMessage(ToastType.Warning, "Warning!", "Order is already in production!");
                preloadService.Hide();
                await OnHideModalClick();
                return;
            }

            salesOrderModal.OrderStatuseId = (int)StatusForOrder.InProgress;
            salesOrderModal.ModificationDate = DateTime.Now;

            if (!await productionService.AddProductionOrderAsync(productionOrder))
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while updating a sales order!");
                preloadService.Hide();
                await OnHideModalClick();
                return;
            }
            salesOrderModal.ProductionOrderId = (await productionService.GetAllProductionOrdersAsync()).OrderByDescending(item => item.Id).FirstOrDefault().Id;
            if (!await orderService.UpdateSalesOrdersAsync(salesOrderModal))
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while updating a sales order!");
                preloadService.Hide();
                await OnHideModalClick();
                return;
            }
            productsForOrder = await inventoryService.GetAllProductsAsync();
            salesOrders = await orderService.GetAllSalesOrdersForGridAsync();
            preloadService.Hide();
            ShowMessage(ToastType.Success, "Succes!", "Production order created successfully!");
            await gridOrderViewModel.RefreshDataAsync();
            StateHasChanged();
            await OnHideModalClick();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while accepting order to production!");
            preloadService.Hide();
        }
    }

    private async Task returnAndRefund()
    {
        try
        {
            if (string.IsNullOrEmpty(salesOrderModal.RejectedReason))
            {
                ShowMessage(ToastType.Warning, "Warning!", "Reject reason cannot be empty!");
                return;
            }
            salesOrderModal.ModificationDate = DateTime.Now;
            salesOrderModal.OrderStatuseId = (int)StatusForOrder.Rejected;
            if (!await orderService.UpdateSalesOrdersAsync(salesOrderModal))
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while rejecting a sales order!");
                preloadService.Hide();
                await OnHideModalClick();
                return;
            }
            var refund = new Refunds()
            {
                CreationDate = DateTime.Now,
                IsActive = true,
                ModificationDate = DateTime.Now,
                RefundAmount = salesOrderModal.PricePaid,
                RefundDate = DateTime.Now,
                PaymentMethodId = 1,
                Notes = rejectReason
            };
            if (!await orderService.AddRefundsAsync(refund))
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while refunding a sales order!");
                preloadService.Hide();
                await OnHideModalClick();
                return;
            }

            productsForOrder = await inventoryService.GetAllProductsAsync();
            salesOrders = await orderService.GetAllSalesOrdersForGridAsync();
            refundsList = await orderService.GetAllRefundsAsync();
            preloadService.Hide();
            await OnHideModalClick();
            ShowMessage(ToastType.Success, "Succes!", "Sales order was refunded succesfully!");
            await gridOrderViewModel.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while refunding!");
            preloadService.Hide();
        }
    } 

    private async Task cancelOrder()
    {
        try
        {
            salesOrderModal.ModificationDate = DateTime.Now;
            salesOrderModal.OrderStatuseId = (int)StatusForOrder.OnHold;
            if (!await orderService.UpdateSalesOrdersAsync(salesOrderModal))
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while canceling a sales order!");
                preloadService.Hide();
                await OnHideModalClick();
                return;
            }
            productsForOrder = await inventoryService.GetAllProductsAsync();
            salesOrders = await orderService.GetAllSalesOrdersForGridAsync();
            preloadService.Hide();
            ShowMessage(ToastType.Success, "Succes!", "Sales order was canceled succesfully!");
            await gridOrderViewModel.RefreshDataAsync();
            await OnHideModalClick();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while refunding!");
            preloadService.Hide();
        }
    }

    #endregion

    #region ReturnsAndRefunds

    private List<Refunds> refundsList = new List<Refunds>();

    #endregion

    #region Shippers

    private List<ShippersViewModel> shippersList = new List<ShippersViewModel>();
    private List<Shippers> shippers = new List<Shippers>();
    private Grid<ShippersViewModel> gridShippers;

    private async Task<GridDataProviderResult<ShippersViewModel>> ShippersViewModelDataProvider(GridDataProviderRequest<ShippersViewModel> request)
    {
        if (shippersList is null)
            shippersList = await orderService.GetAllShippersForGridAsync();

        return await Task.FromResult(request.ApplyTo(shippersList));
    }

    private string companyName;
    private string contactName;
    private string phone;
    private string email;
    private string houseNumber;
    private string street;
    private string city;
    private string postalCode;
    private string country;

    private string companyNameEdit;
    private string contactNameEdit;
    private string phoneEdit;
    private string emailEdit;
    private string houseNumberEdit;
    private string cityEdit;
    private string streetEdit;
    private string postalCodeEdit;
    private string countryEdit;
    private int selectedShipperId;

    private async Task editShipper()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            if (!IsValidShipperEdit())
            {
                return;
            }
            var shipper = await orderService.GetShipperAsync(selectedShipperId);
            var address = await orderService.GetShipperAddressAsync(shipper.ShippersAddressId.Value);

            address.Street = streetEdit;
            address.City = cityEdit;
            address.HouseNumber = houseNumberEdit;
            address.Country = countryEdit;
            address.PostCode = postalCodeEdit;
            address.ModificationDate = DateTime.Now;

            var added = await orderService.UpdateShipperAddressAsync(address);

            if (!added)
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while updating a shippers address!");
                preloadService.Hide();
                return;
            }

            shipper.Email = emailEdit;
            shipper.IsActive = true;
            shipper.ModificationDate = DateTime.Now;
            shipper.Phone = phoneEdit;
            shipper.ModificationDate = DateTime.Now;

            if (await orderService.UpdateShipperAsync(shipper))
            {
                ShowMessage(ToastType.Success, "Success!", "Shipper updated successfully!");
                preloadService.Hide();
                shippers = await orderService.GetAllShippersAsync();
                StateHasChanged();
                shippersList = await orderService.GetAllShippersForGridAsync();
                await gridShippers.RefreshDataAsync();
                return;
            };
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while updating a shipper!");
            preloadService.Hide();
            StateHasChanged();
            await gridShippers.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a shipper!");
            preloadService.Hide();
        }
    }

    private async Task addShipper()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            if (!IsValidShipper())
            {
                return;
            }

            var address = new ShippersAddresses()
                {
                    City = city,
                    Country = country,
                    CreationDate = DateTime.Now,
                    ModificationDate = DateTime.Now,
                    IsActive = true,
                    HouseNumber = houseNumber,
                    PostCode = postalCode,
                    Street = street,
                };

            var added = await orderService.AddShipperAddressAsync(address);
            int supplierAddressId;
            if (added)
            {
                supplierAddressId = (await orderService.GetAllShipperAddressAsync()).Where(item =>
                    item.HouseNumber == houseNumber &&
                    item.Country == country &&
                    item.CreationDate == address.CreationDate &&
                    item.PostCode == postalCode &&
                    item.Street == street)
                    .FirstOrDefault().Id;
            }
            else
            {
                ShowMessage(ToastType.Info, "Warning!", "Something went wrong!");
                preloadService.Hide();
                return;
            }

            var shipper = new Shippers()
            {
                CompanyName = companyName,
                ContactName = contactName,
                CreationDate = DateTime.Now,
                Email = email,
                IsActive = true,
                ModificationDate = DateTime.Now,
                Phone = phone,
                ShippersAddressId = supplierAddressId
            };

            if (await orderService.AddShipperAsync(shipper))
            {
                ShowMessage(ToastType.Success, "Success!", "Shipper added successfully!");
                preloadService.Hide();
                shippers = await orderService.GetAllShippersAsync();
                StateHasChanged();
                companyName = "";
                contactName = "";
                phone = "";
                email = "";
                houseNumber = "";
                street = "";
                city = "";
                postalCode = "";
                country = "";
                shippersList = await orderService.GetAllShippersForGridAsync();
                await gridShippers.RefreshDataAsync();
                return;
            };

            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a shipper!");
            preloadService.Hide();
            StateHasChanged();
            await gridShippers.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a shipper!");
            preloadService.Hide();
        }
    }

    private async void OnShipperSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedShipperId = selectedId;
        }
        var shipperEdit = await orderService.GetShipperAsync(selectedShipperId);
        var address = await orderService.GetShipperAddressAsync(shipperEdit.ShippersAddressId.Value);
        companyNameEdit = shipperEdit.CompanyName;
        contactNameEdit = shipperEdit.ContactName;
        phoneEdit = shipperEdit.Phone;
        emailEdit = shipperEdit.Email;
        houseNumberEdit = address.HouseNumber;
        streetEdit = address.Street;
        cityEdit = address.City;
        postalCodeEdit = address.PostCode;
        countryEdit = address.Country;

        StateHasChanged();
    }

    #endregion

    #region CustomerManagement

    private List<CustomerDataViewModel> customerManagementViewModels = new List<CustomerDataViewModel>();
    private List<CustomerInformation> customerInformation = new List<CustomerInformation>();
    private Grid<CustomerDataViewModel> gridCustomerManagement;

    private async Task<GridDataProviderResult<CustomerDataViewModel>> CustomersViewModelDataProvider(GridDataProviderRequest<CustomerDataViewModel> request)
    {
        if (customerManagementViewModels is null)
            customerManagementViewModels = await customerDataService.GetAllCustomerInformationForGridAsync();

        return await Task.FromResult(request.ApplyTo(customerManagementViewModels));
    }

    private string firstNameCustomer;
    private string lastNameCustomer;
    private string companyNameCustomer;
    private string emailCustomer;
    private string phoneCustomer;
    private int companyIdCustomer;
    private Companies companyCustomer = new Companies();
    private int billingAddressIdCustomer;
    private BillingAddresses billingAddressCustomer = new BillingAddresses();
    private int shippingAddressIdCustomer;
    private ShippingAddresses shippingAddressCustomer = new ShippingAddresses();
    private int customerAddressIdCustomer;
    private CustomerAddresses customerAddressCustomer = new CustomerAddresses();
    private bool billingAddressSameAsCustomerAddress = true;
    private bool shippingAddressSameAsCustomerAddress = true;

    private void SwitchChangedBilling(bool value)
    {
        billingAddressSameAsCustomerAddress = value;
    }

    private void SwitchChangedShipping(bool value)
    {
        shippingAddressSameAsCustomerAddress = value;
    }

    private int selectedCustomer;
    private string firstNameCustomerEdit;
    private string lastNameCustomerEdit;
    private string companyNameCustomerEdit;
    private string emailCustomerEdit;
    private string phoneCustomerEdit;
    private int companyIdCustomerEdit;
    private Companies companyCustomerEdit = new Companies();
    private int billingAddressIdCustomerEdit;
    private BillingAddresses billingAddressCustomerEdit = new BillingAddresses();
    private int shippingAddressIdCustomerEdit;
    private ShippingAddresses shippingAddressCustomerEdit = new ShippingAddresses();
    private int customerAddressIdCustomerEdit;
    private CustomerAddresses customerAddressCustomerEdit = new CustomerAddresses();
    private bool billingAddressSameAsCustomerAddressEdit = true;
    private bool shippingAddressSameAsCustomerAddressEdit = true;

    private void SwitchChangedBillingEdit(bool value)
    {
        billingAddressSameAsCustomerAddressEdit = value;
    }

    private void SwitchChangedShippingEdit(bool value)
    {
        shippingAddressSameAsCustomerAddressEdit = value;
    }

    private async void OnCustomerSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedCustomer = selectedId;
        }
        var customerEdit = await customerDataService.GetCustomerInformationAsync(selectedCustomer);
        customerAddressCustomerEdit = await customerDataService.GetCustomerAddressesAsync(customerEdit.CustomerAddressId.Value);
        shippingAddressCustomerEdit = await orderAddressesService.GetShippingAddressAsync(customerEdit.ShippingAddressId.Value);
        billingAddressCustomerEdit = await orderAddressesService.GetBillingAddressAsync(customerEdit.BillingAddressId.Value);
        firstNameCustomerEdit = customerEdit.FirstName;
        lastNameCustomerEdit = customerEdit.LastName;
        phoneCustomerEdit = customerEdit.Phone;
        emailCustomerEdit = customerEdit.Email;

        StateHasChanged();
    }

    private async Task addCustomer()
    {
        try
        {
            int currentBillingAddressId;
            int currentShippingAddressId;
            int currentCustomerAddressId;
            preloadService.Show(SpinnerColor.Dark);
            if (!IsValidCustomer() && !IsValidAddress(customerAddressCustomer))
            {
                return;
            }

            if (billingAddressSameAsCustomerAddress)
            {
                billingAddressCustomer = new BillingAddresses()
                {
                    City = customerAddressCustomer.City,
                    Country = customerAddressCustomer.Country,
                    CreationDate = DateTime.Now,
                    HouseNumber = customerAddressCustomer.HouseNumber,
                    IsActive = true,
                    ModificationDate = DateTime.Now,
                    PostCode = customerAddressCustomer.PostCode,
                    Street = customerAddressCustomer.Street
                };
                if (!IsValidAddress(billingAddressCustomer))
                {
                    return;
                }

                if (!await orderAddressesService.AddBillingAddressAsync(billingAddressCustomer))
                {
                    ShowMessage(ToastType.Danger, "Danger!", "Something went wrong while adding billing address!");
                    preloadService.Hide();
                    return;
                }
            }
            else
            {
                if (!IsValidAddress(billingAddressCustomer))
                {
                    return;
                }
                billingAddressCustomer.ModificationDate = DateTime.Now;
                billingAddressCustomer.CreationDate = DateTime.Now;
                billingAddressCustomer.IsActive = true;
                if (!await orderAddressesService.AddBillingAddressAsync(billingAddressCustomer))
                {
                    ShowMessage(ToastType.Danger, "Danger!", "Something went wrong while adding billing address!");
                    preloadService.Hide();
                    return;
                }
            }

            if (shippingAddressSameAsCustomerAddress)
            {
                shippingAddressCustomer = new ShippingAddresses()
                {
                    City = customerAddressCustomer.City,
                    Country = customerAddressCustomer.Country,
                    CreationDate = DateTime.Now,
                    HouseNumber = customerAddressCustomer.HouseNumber,
                    IsActive = true,
                    ModificationDate = DateTime.Now,
                    PostCode = customerAddressCustomer.PostCode,
                    Street = customerAddressCustomer.Street
                };
                if (!IsValidAddress(shippingAddressCustomer))
                {
                    return;
                }

                if (!await orderAddressesService.AddShippingAddressAsync(shippingAddressCustomer))
                {
                    ShowMessage(ToastType.Danger, "Danger!", "Something went wrong while adding shipping address!");
                    preloadService.Hide();
                    return;
                }
            }
            else
            {
                if (!IsValidAddress(shippingAddressCustomer))
                {
                    return;
                }
                shippingAddressCustomer.ModificationDate = DateTime.Now;
                shippingAddressCustomer.CreationDate = DateTime.Now;
                shippingAddressCustomer.IsActive = true;
                if (!await orderAddressesService.AddShippingAddressAsync(shippingAddressCustomer))
                {
                    ShowMessage(ToastType.Danger, "Danger!", "Something went wrong while adding shipping address!");
                    preloadService.Hide();
                    return;
                }
            }
            currentBillingAddressId = (await orderAddressesService.GetAllBillingAddressesAsync())
                .FirstOrDefault(item =>
                    item.City == billingAddressCustomer.City &&
                    item.Country == billingAddressCustomer.Country &&
                    item.Street == billingAddressCustomer.Street &&
                    item.HouseNumber == billingAddressCustomer.HouseNumber &&
                    item.PostCode == billingAddressCustomer.PostCode)
                .Id;

            currentShippingAddressId = (await orderAddressesService.GetAllShippingAddressesAsync())
                .FirstOrDefault(item =>
                    item.City == shippingAddressCustomer.City &&
                    item.Country == shippingAddressCustomer.Country &&
                    item.Street == shippingAddressCustomer.Street &&
                    item.HouseNumber == shippingAddressCustomer.HouseNumber &&
                    item.PostCode == shippingAddressCustomer.PostCode)
                .Id;

            customerAddressCustomer.ModificationDate = DateTime.Now;
            customerAddressCustomer.CreationDate = DateTime.Now;
            customerAddressCustomer.IsActive = true;

            if (!await customerDataService.AddCustomerAddressesAsync(customerAddressCustomer))
            {
                ShowMessage(ToastType.Danger, "Danger!", "Something went wrong while adding customer address!");
                preloadService.Hide();
                return;
            }
            currentCustomerAddressId = (await customerDataService.GetAllCustomerAddressesAsync())
              .FirstOrDefault(item =>
                  item.City == customerAddressCustomer.City &&
                  item.Country == customerAddressCustomer.Country &&
                  item.Street == customerAddressCustomer.Street &&
                  item.HouseNumber == customerAddressCustomer.HouseNumber &&
                  item.PostCode == customerAddressCustomer.PostCode)
              .Id;
            var customer = new CustomerInformation()
            {
                BillingAddressId = currentBillingAddressId,
                CreationDate = DateTime.Now,
                CustomerAddressId = currentCustomerAddressId,
                FirstName = firstNameCustomer,
                LastName = lastNameCustomer,
                Email = emailCustomer,
                Phone = phoneCustomer,
                ShippingAddressId = currentShippingAddressId,
                IsActive = true,
                ModificationDate = DateTime.Now,
                CompanyName = "None"
            };

            if (await customerDataService.AddCustomerInformationAsync(customer))
            {
                ShowMessage(ToastType.Success, "Success!", "Customer added successfully!");
                preloadService.Hide();
                customerInformation = await customerDataService.GetAllCustomerInformationAsync();
                customerManagementViewModels = await customerDataService.GetAllCustomerInformationForGridAsync();
                StateHasChanged();
                billingAddressCustomer = new BillingAddresses();
                shippingAddressCustomer = new ShippingAddresses();
                customerAddressCustomer = new CustomerAddresses();
                firstNameCustomer = "";
                lastNameCustomer = "";
                emailCustomer = "";
                phoneCustomer = "";
                await gridCustomerManagement.RefreshDataAsync();
                return;
            };

            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a customer!");
            preloadService.Hide();
            StateHasChanged();
            await gridCustomerManagement.RefreshDataAsync();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a customer!");
            preloadService.Hide();
        }
    }

    private async Task editCustomer()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            if (!IsValidCustomerEdit() && 
                IsValidAddress(customerAddressCustomerEdit) && 
                IsValidAddress(shippingAddressCustomerEdit) &&
                IsValidAddress(billingAddressCustomerEdit))
            {
                return;
            }
            var customerEdit = await customerDataService.GetCustomerInformationAsync(selectedCustomer);
            customerEdit.ModificationDate = DateTime.Now;
            customerAddressCustomerEdit.ModificationDate = DateTime.Now;
            if (!await customerDataService.UpdateCustomerAddressesAsync(customerAddressCustomerEdit))
            {
                ShowMessage(ToastType.Danger, "Danger!", "Something went wrong while adding customer address!");
                preloadService.Hide();
                return;
            }
            if (shippingAddressSameAsCustomerAddressEdit)
            {
                shippingAddressCustomerEdit.Street = customerAddressCustomerEdit.Street;
                shippingAddressCustomerEdit.City = customerAddressCustomerEdit.City;
                shippingAddressCustomerEdit.Country = customerAddressCustomerEdit.Country;
                shippingAddressCustomerEdit.HouseNumber = customerAddressCustomerEdit.HouseNumber;
                shippingAddressCustomerEdit.ModificationDate = DateTime.Now;
                shippingAddressCustomerEdit.PostCode = customerAddressCustomerEdit.PostCode;

                if (!IsValidAddress(shippingAddressCustomerEdit))
                {
                    return;
                }
            }
            shippingAddressCustomerEdit.ModificationDate = DateTime.Now;
            if (!await orderAddressesService.UpdateShippingAddressAsync(shippingAddressCustomerEdit))
            {
                ShowMessage(ToastType.Danger, "Danger!", "Something went wrong while adding shipping address!");
                preloadService.Hide();
                return;
            }
            if (billingAddressSameAsCustomerAddressEdit)
            {
                billingAddressCustomerEdit.Street = customerAddressCustomerEdit.Street;
                billingAddressCustomerEdit.City = customerAddressCustomerEdit.City;
                billingAddressCustomerEdit.Country = customerAddressCustomerEdit.Country;
                billingAddressCustomerEdit.HouseNumber = customerAddressCustomerEdit.HouseNumber;
                billingAddressCustomerEdit.ModificationDate = DateTime.Now;
                billingAddressCustomerEdit.PostCode = customerAddressCustomerEdit.PostCode;

                if(!IsValidAddress(billingAddressCustomerEdit))
                {
                    return;
                }
            }
            billingAddressCustomerEdit.ModificationDate = DateTime.Now;
            if (!await orderAddressesService.UpdateBillingAddressAsync(billingAddressCustomerEdit))
            {
                ShowMessage(ToastType.Danger, "Danger!", "Something went wrong while adding billing address!");
                preloadService.Hide();
                return;
            }

            customerEdit.FirstName = firstNameCustomerEdit;
            customerEdit.LastName = lastNameCustomerEdit;
            customerEdit.Email = emailCustomerEdit;
            customerEdit.Phone = phoneCustomerEdit;

            if (!await customerDataService.UpdateCustomerInformationAsync(customerEdit))
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while updating a customer!");
                preloadService.Hide();
                return;
            }
            ShowMessage(ToastType.Success, "Success!", "Customer added successfully!");
            preloadService.Hide();
            customerInformation = await customerDataService.GetAllCustomerInformationAsync();
            customerManagementViewModels = await customerDataService.GetAllCustomerInformationForGridAsync();
            StateHasChanged();
            await gridCustomerManagement.RefreshDataAsync();
            return;
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a customer!");
            preloadService.Hide();
        }
    }

    #endregion

    #region Helpers

    public bool IsValidSalesOrder()
    {
        // Validate selectedProduct
        if (selectedProduct <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Please select a product!");
            preloadService.Hide();
            return false;
        }

        // Validate selectedQuantityType
        if (selectedQuantityType <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Please select a quantity type!");
            preloadService.Hide();
            return false;
        }

        // Validate discountForOrder
        if (discountForOrder < 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Discount must be zero or greater!");
            preloadService.Hide();
            return false;
        }

        // Validate selectedCustomerForSelect
        if (selectedCustomerForSelect <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Please select a customer!");
            preloadService.Hide();
            return false;
        }

        // Validate quantitySalesOrder
        if (quantitySalesOrder <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Quantity in sales order must be greater than zero!");
            preloadService.Hide();
            return false;
        }

        if (deliveryDate.ToDateTime(TimeOnly.MinValue) < paymentTerm.ToDateTime(TimeOnly.MinValue))
        {
            ShowMessage(ToastType.Info, "Warning!", "Payment Term cannot be later than Delivery Date!");
            preloadService.Hide();
            return false;
        }

        return true;
    }

    public bool IsValidAddress(Addresses address)
    {
        if (string.IsNullOrWhiteSpace(address.HouseNumber))
        {
            ShowMessage(ToastType.Info, "Warning!", "House Number cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(address.Street))
        {
            ShowMessage(ToastType.Info, "Warning!", "Street cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(address.City))
        {
            ShowMessage(ToastType.Info, "Warning!", "City cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(address.PostCode))
        {
            ShowMessage(ToastType.Info, "Warning!", "Postal Code cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(address.Country))
        {
            ShowMessage(ToastType.Info, "Warning!", "Country cannot be empty!");
            preloadService.Hide();
            return false;
        }
        return true;
    }

    public bool IsValidCustomer()
    {
        if (string.IsNullOrWhiteSpace(firstNameCustomer))
        {
            ShowMessage(ToastType.Info, "Warning!", "Company Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(lastNameCustomer))
        {
            ShowMessage(ToastType.Info, "Warning!", "Contact Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(phoneCustomer))
        {
            ShowMessage(ToastType.Info, "Warning!", "Phone cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(emailCustomer))
        {
            ShowMessage(ToastType.Info, "Warning!", "Email cannot be empty!");
            preloadService.Hide();
            return false;
        }
        return true;
    }

    public bool IsValidCustomerEdit()
    {
        if (string.IsNullOrWhiteSpace(firstNameCustomerEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Company Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(lastNameCustomerEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Contact Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(phoneCustomerEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Phone cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(emailCustomerEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Email cannot be empty!");
            preloadService.Hide();
            return false;
        }
        return true;
    }

    public bool IsValidShipper()
    {
        if (string.IsNullOrWhiteSpace(companyName))
        {
            ShowMessage(ToastType.Info, "Warning!", "Company Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(contactName))
        {
            ShowMessage(ToastType.Info, "Warning!", "Contact Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(phone))
        {
            ShowMessage(ToastType.Info, "Warning!", "Phone cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(email))
        {
            ShowMessage(ToastType.Info, "Warning!", "Email cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(houseNumber))
        {
            ShowMessage(ToastType.Info, "Warning!", "House Number cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(street))
        {
            ShowMessage(ToastType.Info, "Warning!", "Street cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(city))
        {
            ShowMessage(ToastType.Info, "Warning!", "City cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(postalCode))
        {
            ShowMessage(ToastType.Info, "Warning!", "Postal Code cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(country))
        {
            ShowMessage(ToastType.Info, "Warning!", "Country cannot be empty!");
            preloadService.Hide();
            return false;
        }

        // All checks passed, the data is valid
        return true;
    }

    public bool IsValidShipperEdit()
    {
        if (string.IsNullOrWhiteSpace(companyNameEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Company Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(contactNameEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Contact Name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(phoneEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Phone cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(emailEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Email cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(houseNumberEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "House Number cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(streetEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Street cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(cityEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "City cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(postalCodeEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Postal Code cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(countryEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Country cannot be empty!");
            preloadService.Hide();
            return false;
        }

        // Additional validation for selectedShipperId if needed
        if (selectedShipperId <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Invalid Shipper selected!");
            preloadService.Hide();
            return false;
        }

        // All checks passed, the data is valid
        return true;
    }

    #endregion
}