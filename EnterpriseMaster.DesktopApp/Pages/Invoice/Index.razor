@page "/invoices"
@using BlazorBootstrap
@using EnterpriseMaster.DbServices.Models.Database;
@using EnterpriseMaster.DesktopApp.Data.Models;
@using EnterpriseMaster.DesktopApp.Data.Services.InvoiceServices;
@inherits MainLayout
@inject InvoicesMenuService invoiceService

<Tabs EnableFadeEffect="true">
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Diagram3" /> InvoiceViewModel
        </TitleTemplate>
        <Content>
            <br />
            <Grid TItem="InvoiceViewModel"
                  @ref="gridInvoiceViewModel"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  DataProvider="InvoiceViewModelDataProvider"
                  Class="table table-hover table-bordered table-striped"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true">
                <GridColumn TItem="InvoiceViewModel" HeaderText="Product Name" PropertyName="ProductName" SortKeySelector="item => item.ProductName">
                    @context.ProductName
                </GridColumn>
                <GridColumn TItem="InvoiceViewModel" HeaderText="Product Code" PropertyName="ProductCode" SortKeySelector="item => item.ProductCode">
                    @context.ProductCode
                </GridColumn>
                <GridColumn TItem="InvoiceViewModel" HeaderText="Email" PropertyName="Email" SortKeySelector="item => item.Email">
                    @context.Email
                </GridColumn>
                <GridColumn TItem="InvoiceViewModel" HeaderText="Quantity" PropertyName="Quantity" SortKeySelector="item => item.Quantity">
                    @context.Quantity
                </GridColumn>
                <GridColumn TItem="InvoiceViewModel" HeaderText="Order Date" PropertyName="OrderDate" SortKeySelector="item => item.OrderDate">
                    @context.OrderDate
                </GridColumn>
                <GridColumn TItem="InvoiceViewModel" HeaderText="Discount" PropertyName="Discount" SortKeySelector="item => item.Discount">
                    @context.Discount
                </GridColumn>
                <GridColumn TItem="InvoiceViewModel" HeaderText="TotalAmount" PropertyName="TotalAmount" SortKeySelector="item => item.TotalAmount">
                    @context.TotalAmount
                </GridColumn>
            </Grid>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Braces" /> Invoice Generation
        </TitleTemplate>
        <Content>
            <p class="mt-2">
                <b>This is some placeholder content the Contact tab's associated content.</b> Clicking another tab will toggle the visibility of this one for the next.
            </p>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Diagram2" /> Automated Invoicing
        </TitleTemplate>
        <Content>
            <p class="mt-2">
                <b>This is some placeholder content the Contact tab's associated content.</b> Clicking another tab will toggle the visibility of this one for the next.
            </p>
        </Content>
    </Tab>
</Tabs>

@code {
    protected async override void OnInitialized()
    {
        invoices = await invoiceService.GetAllInvoicesForGridAsync();

        await gridInvoiceViewModel.RefreshDataAsync();
    }

    #region InvoiceViewModelRegion

    private List<InvoiceViewModel> invoices = new List<InvoiceViewModel>();
    private Grid<InvoiceViewModel> gridInvoiceViewModel;
    private async Task<GridDataProviderResult<InvoiceViewModel>> InvoiceViewModelDataProvider(GridDataProviderRequest<InvoiceViewModel> request)
    {
        if (invoices is null)
            invoices = await invoiceService.GetAllInvoicesForGridAsync();

        return await Task.FromResult(request.ApplyTo(invoices));
    }

    #endregion
}
