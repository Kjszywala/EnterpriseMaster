@page "/finance"
@using BlazorBootstrap
@using EnterpriseMaster.DbServices.Models.Database;
@using EnterpriseMaster.DesktopApp.Data.Models;
@using EnterpriseMaster.DesktopApp.Data.Services.AccountingServices;
@using EnterpriseMaster.DesktopApp.Data.Services.FinanceServices;
@using EnterpriseMaster.DesktopApp.Data.Services.OrdersServices;
@using EnterpriseMaster.DesktopApp.Helpers.Enums;
@using EnterpriseMaster.DesktopApp.Helpers.Methods;
@using System.Text;
@using EnterpriseMaster.DesktopApp.Helpers.PdfCreation;
@using EnterpriseMaster.DesktopApp.Helpers.PdfCreation.Models;
@inherits MainLayout
@inject FinanceService financeService
@inject OrderService orderService
@inject Helpers.Interfaces.IFolderPick _folderPicker
@inject EmployeeService employeeService

<Tabs EnableFadeEffect="true">
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.CurrencyDollar" /> Payments
        </TitleTemplate>
        <Content>
            <br />
            <Grid TItem="PaymentViewModel"
                  @ref="gridPayments"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  DataProvider="PaymentsDataProvider"
                  Class="table table-hover table-bordered table-striped"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true">
                <GridColumn TItem="PaymentViewModel" HeaderText="Payment Method" PropertyName="PaymentMethod" SortKeySelector="item => item.PaymentMethod">
                    @context.PaymentMethod
                </GridColumn>
                <GridColumn TItem="PaymentViewModel" HeaderText="Product" PropertyName="Product" SortKeySelector="item => item.Product">
                    @context.Product
                </GridColumn>
                <GridColumn TItem="PaymentViewModel" HeaderText="Order Number" PropertyName="SalesOrdersCode" SortKeySelector="item => item.SalesOrdersCode">
                    @context.SalesOrdersCode
                </GridColumn>
                <GridColumn TItem="PaymentViewModel" HeaderText="Invoices Code" PropertyName="InvoicesCode" SortKeySelector="item => item.InvoicesCode">
                    @context.InvoicesCode
                </GridColumn>
                <GridColumn TItem="PaymentViewModel" HeaderText="Quantity" PropertyName="Quantity" SortKeySelector="item => item.Quantity">
                    @context.Quantity
                </GridColumn>
                <GridColumn TItem="PaymentViewModel" HeaderText="Price Paid" PropertyName="TotalAmount" SortKeySelector="item => item.TotalAmount">
                    @context.TotalAmount
                </GridColumn>
                <GridColumn TItem="PaymentViewModel" HeaderText="Payment Status" PropertyName="PaymentStatus" SortKeySelector="item => item.PaymentStatus">
                    <span class="@OrderStatusClasses.GetClassForPaymentStatus(context.PaymentStatus)" style="width: 150px; text-align: center;">@context.PaymentStatus</span>
                </GridColumn>
            </Grid>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Check" /> Payment Approvals
        </TitleTemplate>
        <Content>
            <br />
            @if (purchaseOrders.Count > 0)
            {
                <Accordion Class="container">
                    @foreach (var item in purchaseOrders)
                    {
                        <AccordionItem Title=@item.Part.PartName>
                            <Content>
                                <b>Quantity in purchase order: @item.Quantity</b>
                                <br />
                                <b>Quantity in stock: @item.Part.QuantityInStock</b>
                                <br />
                                <b>Description: @item.Part.Description</b>
                                <br />
                                <div>
                                    <div class="mb-3">
                                        <label class="form-label">Amount to pay:</label>
                                        <NumberInput TValue="decimal" @bind-Value="@item.PricePaid" Placeholder="Enter amount" Disabled />
                                        <br>
                                        <Button Color="ButtonColor.Success" Size="Size.Medium" @onclick="() => ApprovePayment(item.Id)"> Accept Purchase Order </Button>
                                        <Button Color="ButtonColor.Danger" Size="Size.Medium" @onclick="() => OnShowModalClick(item.Id)"> Decline Purchase Order </Button>
                                    </div>
                                </div>
                            </Content>
                        </AccordionItem>
                    }
                </Accordion>
            }
            else
            {
                <Alert Color="AlertColor.Info" Class="container">
                    <h4 class="alert-heading">No Purchase Orders to Approve</h4>
                    <p>There are currently no pending purchase orders for approval. You're all caught up!</p>
                    <hr>
                    <p class="mb-0">Feel free to check back later or contact the relevant department for more information.</p>
                </Alert>
            }
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Kanban" /> Expense Management
        </TitleTemplate>
        <Content>
            <br />
            <div class="containerPanel">
                <div class="topPanel-panel">
                    <LineChart @ref="lineChart" Width="1100" Class="mb-4" />
                </div>
                <div class="bottomPanel-panel">
                    <div class="bottomPanel-left">
                        <h3>Summary</h3>
                        <hr />
                        <div class="summary-section">
                            <p id="totalSpendings">Total Spendings: <span class="@((decimal.Parse(RemoveNonNumeric(totalSpendings)) >= 0) ? "green-number" : "red-number")">@totalSpendings</span></p>
                            <br />
                            <p id="averageMonthlySpendings">Average Monthly Spendings: <span class="@((decimal.Parse(RemoveNonNumeric(averageMonthlySpendings)) >= 0) ? "green-number" : "red-number")">@averageMonthlySpendings</span></p>
                            <br />
                            <p id="spendingChange">Spending Change from Previous Period: <span class="@((decimal.Parse(RemoveNonNumeric(spendingChangeFromPreviousPeriod)) >= 0) ? "green-number" : "red-number")">@spendingChangeFromPreviousPeriod</span></p>
                            <br />
                            <p id="budgetVsActual">Budget vs. This Month: <span class="@((decimal.Parse(RemoveNonNumeric(budgetVsActualSpending)) >= 0) ? "green-number" : "red-number")">@budgetVsActualSpending</span></p>
                            <br />
                            <p id="biggestPurchase">Biggest Single Purchase: <span class="@((decimal.Parse(RemoveNonNumeric(biggestSinglePurchase)) >= 0) ? "green-number" : "red-number")">@biggestSinglePurchase</span></p>
                        </div>
                    </div>
                    <div class="bottomPanel-right">
                        <h3>Last Approvals</h3>
                        <hr />
                        @if (lastPurchaseOrders.Count > 0)
                        {
                            @foreach (var item2 in lastPurchaseOrders)
                            {
                                <Alert Color="AlertColor.Success" Class="container">
                                    <h4 class="alert-heading">Purchase Order Information</h4>
                                    <p>Part Name: @item2.Part.PartName</p>

                                    <hr>
                                    <p>Part Description: @item2.Part.Description</p>
                                    <p>Purchase Order Number: @item2.PurchaseOrderNumber</p>
                                    <p>Date: @item2.ModificationDate</p>
                                </Alert>
                            }
                        }
                        else
                        {
                            <Alert Color="AlertColor.Success" Class="container">
                                <h4 class="alert-heading">No Purchase Orders Approved</h4>
                                <p>There are currently purchase orders for approved!</p>
                                <hr>
                                <p class="mb-0">Feel free to check back later or contact the relevant department for more information.</p>
                            </Alert>
                        }
                    </div>
                </div>
            </div>
        </Content>
    </Tab> 
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Flag" /> Financial Report
        </TitleTemplate>
        <Content>
            <br />
            <div class="mb-3">
                <div class="labelForDateFrom">
                    <label>From:</label>
                </div>
                <div class="dateFrom">
                    <DateInput id="from" TValue="DateOnly" @bind-Value="@dateFrom" Placeholder="Enter Date" />
                </div>
                <div class="labelForDateTo">
                    <label>To:</label>
                </div>
                <div class="dateTo">
                    <DateInput id="to" TValue="DateOnly" @bind-Value="@dateTo" Placeholder="Enter Date" />
                </div>
                <div class="showGridDates">
                    <Button Color="ButtonColor.Success" @onclick="RefreshDataReport"> Show Payments Between Dates </Button>
                </div>
            </div>
            <Grid TItem="PaymentViewModel"
                  @ref="gridPaymentsReportViewModel"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  DataProvider="PaymentsReportViewModelDataProvider"
                  Class="table table-hover table-bordered table-striped"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true">
                <GridColumn TItem="PaymentViewModel" HeaderText="Payment Method" PropertyName="PaymentMethod" SortKeySelector="item => item.PaymentMethod">
                    @context.PaymentMethod
                </GridColumn>
                <GridColumn TItem="PaymentViewModel" HeaderText="Product" PropertyName="Product" SortKeySelector="item => item.Product">
                    @context.Product
                </GridColumn>
                <GridColumn TItem="PaymentViewModel" HeaderText="Order Code" PropertyName="SalesOrdersCode" SortKeySelector="item => item.SalesOrdersCode">
                    @context.SalesOrdersCode
                </GridColumn>
                <GridColumn TItem="PaymentViewModel" HeaderText="Invoices Code" PropertyName="InvoicesCode" SortKeySelector="item => item.InvoicesCode">
                    @context.InvoicesCode
                </GridColumn>
                <GridColumn TItem="PaymentViewModel" HeaderText="Quantity" PropertyName="Quantity" SortKeySelector="item => item.Quantity">
                    @context.Quantity
                </GridColumn>
                <GridColumn TItem="PaymentViewModel" HeaderText="Price Paid" PropertyName="TotalAmount" SortKeySelector="item => item.TotalAmount">
                    @context.TotalAmount
                </GridColumn>
                <GridColumn TItem="PaymentViewModel" HeaderText="Payment Status" PropertyName="PaymentStatus" SortKeySelector="item => item.PaymentStatus">
                    <span class="@OrderStatusClasses.GetClassForPaymentStatus(context.PaymentStatus)" style="width: 150px; text-align: center;">@context.PaymentStatus</span>
                </GridColumn>
            </Grid>
            <div class="container">
                <div class="containerPanelReports">
                    <div class="topPanelReportsBottom">
                        <div class="container-fluid form-container">
                            <div class="row">
                                <div class="col-md-4">
                                    <form>
                                        <div class="form-group classHigh">
                                            <label for="biggestPurchase" class="form-label">Largest Purchase:</label>
                                            <input type="text" class="form-control" id="biggestPurchase" value="@largestSinglePayment" readonly>
                                        </div>

                                        <div class="form-group">
                                            <label for="quesntityTogether" class="form-label">Total Quantity:</label>
                                            <input type="text" class="form-control" id="quesntityTogether" value="@paymentsTotal" readonly>
                                        </div>
                                    </form>
                                </div>

                                <div class="col-md-4">
                                    <form>
                                        <div class="form-group">
                                            <label for="totalCost" class="form-label">Most Frequently Order Part:</label>
                                            <input type="text" class="form-control" id="totalCost" value="@mostFrequentlySellPart" readonly>
                                        </div>

                                        <div class="form-group">
                                            <label for="mostOrderingPart" class="form-label">Most Frequently Payment Method:</label>
                                            <input type="text" class="form-control" id="mostOrderingPart" value="@mostFrequentlyPaymentMethod" readonly>
                                        </div>
                                    </form>
                                </div>

                                <div class="col-md-4">
                                    <form>
                                        <div class="form-group">
                                            <label for="biggestQuantity" class="form-label">Largest Single Quantity:</label>
                                            <input type="text" class="form-control" id="biggestQuantity" value="@largestQuantity" readonly>
                                        </div>

                                        <div class="form-group">
                                            <label for="mostSameQuantityType" class="form-label">Quantity Total:</label>
                                            <input type="text" class="form-control" id="mostSameQuantityType" value="@quantityTotal" readonly>
                                        </div>
                                    </form>
                                </div>
                            </div>
                            <Dropdown>
                                <DropdownToggleButton Color="ButtonColor.Success"> Generate Report </DropdownToggleButton>
                                <DropdownMenu>
                                    <DropdownItem @onclick="GenerateReportCsv" Type="ButtonType.Link">CSV</DropdownItem>
                                    <DropdownItem @onclick="GenerateReportPdf" Type="ButtonType.Link">PDF</DropdownItem>
                                </DropdownMenu>
                            </Dropdown>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
</Tabs>
<Preload />
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
<Modal @ref="modal" Title="Reject Reason">
    <BodyTemplate>
        Specify the reject reason here:
        <textarea class="form-control" id="exampleTextarea" @bind="rejectReason" rows="5"></textarea>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="DeclinePayment">Save changes</Button>
    </FooterTemplate>
</Modal>
@code {
    protected async override void OnInitialized()
    {
        try
        {
            payments = await financeService.GetAllPaymentsForGridAsync();
            purchaseOrders = await orderService.GetAllOpenPurchaseOrdersAsync();
            foreach(var item in purchaseOrders)
            {
                item.Part = (await orderService.GetPartsAsync(item.PartId.Value));
            }
            lastPurchaseOrdersApproved = await orderService.GetAllPurchaseOrdersApprovedAsync();
            foreach (var item in lastPurchaseOrdersApproved)
            {
                item.Part = (await orderService.GetPartsAsync(item.PartId.Value));
            }
            lastPurchaseOrders = lastPurchaseOrdersApproved.OrderByDescending(item => item.ModificationDate).Take(5).ToList();
            await gridPayments.RefreshDataAsync();
        }
        catch(Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
        }
    }

    #region Payments

    private List<PaymentViewModel> payments = new List<PaymentViewModel>();
    private Grid<PaymentViewModel> gridPayments;
    private async Task<GridDataProviderResult<PaymentViewModel>> PaymentsDataProvider(GridDataProviderRequest<PaymentViewModel> request)
    {
        if (payments is null) 
            payments = await financeService.GetAllPaymentsForGridAsync();

        return await Task.FromResult(request.ApplyTo(payments));
    }

    #endregion

    #region Payment approval

    private List<PurchaseOrders> purchaseOrders = new List<PurchaseOrders>();
    private string rejectReason = "";
    private Modal modal = default!;
    private int currentModalId;

    private async Task ApprovePayment(int id)
    {
        try
        {
            var purchaseOrder = await orderService.GetPurchaseOrderAsync(id);
            var paymentMethod = (await financeService.GetAllPaymentMetdhodsAsync()).FirstOrDefault();

            purchaseOrder.ModificationDate = DateTime.Now;
            purchaseOrder.OrderStatuseId = (int)StatusForOrder.InProgress;

            if (!await orderService.UpdatePurchaseOrderAsync(purchaseOrder))
            {
                ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while updating an order!");
                return;
            };

            var payment = new Payments()
            {
                CreationDate = DateTime.Now,
                IsActive = true,
                ModificationDate = DateTime.Now,
                PaymentMethodId = (int)StatusForPaymentMethod.Visa,
                PaymentStatuId = (int)StatusForPayment.Completed,
                PurchaseOrderId = id,
                TotalAmount = purchaseOrder.PricePaid
            };
            if(await financeService.AddPaymentsAsync(payment))
            {
                ShowMessage(ToastType.Success, "Success!", "Payment accepted successfully");
                payments = await financeService.GetAllPaymentsForGridAsync();
                purchaseOrders = await orderService.GetAllOpenPurchaseOrdersAsync();
                foreach (var item in purchaseOrders)
                {
                    item.Part = (await orderService.GetPartsAsync(item.PartId.Value));
                }
                await gridPayments.RefreshDataAsync();
                var monthlyPayments = await financeService.CalculateMonthlySumAsync();
                lastPurchaseOrdersApproved = await orderService.GetAllPurchaseOrdersApprovedAsync();
                foreach (var item in lastPurchaseOrdersApproved)
                {
                    item.Part = (await orderService.GetPartsAsync(item.PartId.Value));
                }
                lastPurchaseOrders = lastPurchaseOrdersApproved.OrderByDescending(item => item.ModificationDate).Take(5).ToList();
                StateHasChanged();
                await modal.HideAsync();
                return;
            }
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong!");
            await modal.HideAsync();
        }
        catch(Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
        }
    }

    private async Task DeclinePayment()
    {
        try
        {
            var purchaseOrder = await orderService.GetPurchaseOrderAsync(currentModalId);
            var paymentMethod = (await financeService.GetAllPaymentMetdhodsAsync()).FirstOrDefault();

            purchaseOrder.RejectedReason = rejectReason;
            purchaseOrder.ModificationDate = DateTime.Now;
            purchaseOrder.OrderStatuseId = (int)StatusForOrder.Rejected;
            purchaseOrder.IsActive = false;

            if (await orderService.UpdatePurchaseOrderAsync(purchaseOrder))
            {
                ShowMessage(ToastType.Success, "Success!", "Payment declined!");
                payments = await financeService.GetAllPaymentsForGridAsync();
                purchaseOrders = await orderService.GetAllOpenPurchaseOrdersAsync();
                foreach (var item in purchaseOrders)
                {
                    item.Part = (await orderService.GetPartsAsync(item.PartId.Value));
                }
                await gridPayments.RefreshDataAsync();
                StateHasChanged();
                return;
            }

            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong!");
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
        }
    }

    private async Task OnShowModalClick(int id)
    {
        currentModalId = id;
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    #endregion

    #region Expenses

    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    private string currentYear = "";
    private string totalSpendings = "0";
    private string averageMonthlySpendings = "0";
    private string spendingChangeFromPreviousPeriod = "0";
    private string budgetVsActualSpending = "0";
    private string biggestSinglePurchase = "0";
    private List<PurchaseOrders> lastPurchaseOrders = new List<PurchaseOrders>();
    private List<PurchaseOrders> lastPurchaseOrdersApproved = new List<PurchaseOrders>();

    protected async Task OnChartLoad()
    {
        currentYear = DateTime.Now.Year.ToString();
        var payments = await financeService.GetAllPaymentsAsync();
        totalSpendings = (await this.CalculateTotalSpendingsAsync(payments));
        averageMonthlySpendings = (await this.CalculateAverageMonthlySpendingsAsync(payments));
        spendingChangeFromPreviousPeriod = (await this.CalculateSpendingChangeFromPreviousMonthAsync(payments));
        budgetVsActualSpending = (await this.CalculateBudgetVsActualSpendingAsync(payments, 100000m));
        biggestSinglePurchase = (await this.FindBiggestSinglePurchaseAsync(payments));

        var monthlyPayments = await financeService.CalculateMonthlySumAsync();
        var colors = ColorBuilder.CategoricalTwelveColors;

        var labels = new List<string> { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
        var datasets = new List<IChartDataset>();

        var dataset1 = new LineChartDataset
            {
                Label = "Spendings",
                Data = GetDataForMonths(monthlyPayments, labels),
                BackgroundColor = new List<string> { colors[0] },
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 }
            };
        datasets.Add(dataset1);

        chartData = new ChartData
        {
            Labels = labels,
            Datasets = datasets
        };

        lineChartOptions = new();
        lineChartOptions.Locale = "de-DE";
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X.Title.Text = currentYear;
        lineChartOptions.Scales.X.Title.Display = true;

        lineChartOptions.Plugins.Title.Text = "Spendings";
        lineChartOptions.Plugins.Title.Display = true;
        StateHasChanged();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await OnChartLoad();
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
    }

    private List<double> GetDataForMonths(List<PaymentsMonthly> monthlyPayments, List<string> labels)
    {
        var dataForMonths = new List<double>();

        foreach (var label in labels)
        {
            var correspondingMonth = monthlyPayments.FirstOrDefault(monthlyPayment => System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat.GetMonthName(monthlyPayment.Month) == label);

            if (correspondingMonth != null)
            {
                dataForMonths.Add((double)correspondingMonth.TotalAmount);
            }
            else
            {
                // If there's no corresponding month, set the value to 0 or any default value as needed.
                dataForMonths.Add(0.0);
            }
        }

        return dataForMonths;
    }

    // Method to calculate total spendings
    public async Task<string> CalculateTotalSpendingsAsync(List<Payments> payments)
    {
        decimal totalSpendings = payments.Sum(payment => payment.TotalAmount);
        return totalSpendings.ToString("C"); // Format as currency
    }

    // Method to calculate average monthly spendings
    public async Task<string> CalculateAverageMonthlySpendingsAsync(List<Payments> payments)
    {
        var groupedByMonth = payments.GroupBy(payment => new { payment.ModificationDate.Year, payment.ModificationDate.Month });
        decimal averageMonthlySpendings = groupedByMonth.Average(group => group.Sum(payment => payment.TotalAmount));
        return averageMonthlySpendings.ToString("C"); // Format as currency
    }

    // Method to calculate spending change from the previous month
    public async Task<string> CalculateSpendingChangeFromPreviousMonthAsync(List<Payments> payments)
    {
        // Implement logic to compare spending with the previous month
        // Replace the following with your actual logic
        decimal spendingChange = CalculateSpendingChangeFromPreviousMonth(payments); // Replace with your logic
        return spendingChange.ToString("C"); // Format as currency
    }

    // Method to calculate budget vs. actual spending
    public async Task<string> CalculateBudgetVsActualSpendingAsync(List<Payments> payments, decimal budgetedAmount)
    {
        // Implement logic to compare budget vs. actual spending
        // Replace the following with your actual logic
        decimal budgetVsActual = CalculateBudgetVsActual(payments, budgetedAmount); // Replace with your logic
        return budgetVsActual.ToString("C"); // Format as currency
    }

    // Method to find the biggest single purchase
    public async Task<string> FindBiggestSinglePurchaseAsync(List<Payments> payments)
    {
        var biggestPurchase = payments.OrderByDescending(payment => payment.TotalAmount).FirstOrDefault();
        return biggestPurchase != null ? biggestPurchase.TotalAmount.ToString("C") : "No purchases yet"; 
    }

    // Placeholder method for spending change calculation
    private decimal CalculateSpendingChangeFromPreviousMonth(List<Payments> payments)
    {
        // Replace this with your actual logic to calculate spending change from the previous month
        // Example: Compare the current month's total spending with the total spending from the previous month
        var currentDate = DateTime.Now;
        var previousMonthPayments = payments
            .Where(payment => payment.ModificationDate.Year == currentDate.Year && payment.ModificationDate.Month == currentDate.Month - 1)
            .ToList();

        decimal currentMonthTotalSpendings = payments.Sum(payment => payment.TotalAmount);
        decimal previousMonthTotalSpendings = previousMonthPayments.Sum(payment => payment.TotalAmount);

        decimal spendingChange = currentMonthTotalSpendings - previousMonthTotalSpendings;
        return spendingChange;
    }

    // Placeholder method for budget vs. actual spending calculation
    private decimal CalculateBudgetVsActual(List<Payments> payments, decimal budgetedAmount)
    {
        decimal currentMonthTotalSpendings = payments.Sum(payment => payment.TotalAmount);
        decimal budgetVsActual = budgetedAmount - currentMonthTotalSpendings;

        return budgetVsActual;
    }

    private string RemoveNonNumeric(string input)
    {
        return new string(input.Where(c => char.IsDigit(c) || c == '.' || c == '-').ToArray());
    }

    #endregion

    #region Report

    private List<PaymentViewModel> paymentsReport = new List<PaymentViewModel>();
    private Grid<PaymentViewModel> gridPaymentsReportViewModel;
    private DateOnly dateFrom = DateOnly.FromDateTime(DateTime.Now);
    private DateOnly dateTo = DateOnly.FromDateTime(DateTime.Now);
    private string largestSinglePayment;
    private string paymentsTotal;
    private string mostFrequentlySellPart;
    private string mostFrequentlyPaymentMethod;
    private string largestQuantity;
    private string quantityTotal;

    private async Task<GridDataProviderResult<PaymentViewModel>> PaymentsReportViewModelDataProvider(GridDataProviderRequest<PaymentViewModel> request)
    {
        if (paymentsReport is null)
            RefreshDataReport();

        return await Task.FromResult(request.ApplyTo(paymentsReport));
    }

    private async Task RefreshDataReport()
    {
        try
        {
            paymentsReport = await financeService.GetAllPaymentsForGridBasedOnDatesAsync(dateFrom.ToDateTime(TimeOnly.MinValue), dateTo.ToDateTime(TimeOnly.MinValue));

            if (paymentsReport.Count > 0)
            {
                largestSinglePayment = paymentsReport.OrderByDescending(item => item.TotalAmount).FirstOrDefault().TotalAmount.ToString();
                paymentsTotal = paymentsReport.Sum(item => item.TotalAmount).ToString();
                mostFrequentlySellPart = paymentsReport
                    .GroupBy(item => item.Product)
                    .OrderByDescending(group => group.Count())
                    .Select(group => group.Key)
                    .FirstOrDefault();
                mostFrequentlyPaymentMethod = paymentsReport
                    .GroupBy(item => item.PaymentMethod)
                    .OrderByDescending(group => group.Count())
                    .Select(group => group.Key)
                    .FirstOrDefault();
                largestQuantity = paymentsReport.Max(item => item.Quantity).ToString();
                quantityTotal = paymentsReport.Sum(item => item.Quantity).ToString();
                await gridPaymentsReportViewModel.RefreshDataAsync();
                StateHasChanged();
            }
            else
            {
                ShowMessage(ToastType.Warning, "Warning!", "No payments has been found!");
            }
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
        }
    }

    public async Task GenerateReportCsv()
    {
        try
        {
            if (paymentsReport.Count == 0)
            {
                ShowMessage(ToastType.Warning, "Warning!", "No orders has been found!");
                return;
            }
            var path = _folderPicker.DisplayFolderPicker();
            preloadService.Show(SpinnerColor.Dark);
            if (path != null)
            {
                // Create a CSV content string
                var csvContent = new StringBuilder();

                // Add header row
                csvContent.AppendLine("ReportNumber,Part,DateFrom,DateTo,PaymentMethod,OrderCode,InvoicesCode,Quantity,PricePaid,PaymentStatus");

                var guid = Guid.NewGuid();
                // Add data rows
                foreach (var item in paymentsReport)
                {
                    var report = new PaymentReports()
                    {
                        CreationDate = DateTime.Now,
                        ModificationDate = DateTime.Now,
                        DateFrom = dateFrom.ToDateTime(TimeOnly.MinValue),
                        DateTo = dateTo.ToDateTime(TimeOnly.MinValue),
                        EmployeeId = (await employeeService.GetEmployeesAsync()).Where(item2 => item2.UserId == Config.UserId).FirstOrDefault().Id,
                        IsActive = true,
                        LargestSinglePayment = largestSinglePayment,
                        LargestQuantity = largestQuantity,
                        MostFrequentlyPaymentMethod = mostFrequentlyPaymentMethod,
                        MostFrequentlySellPart = mostFrequentlySellPart,
                        ReportNumber = guid.ToString(),
                        PaymentsTotal = paymentsTotal,
                        QuantityTotal = quantityTotal,
                        PaymentStatusId = (await financeService.GetPaymentStatusAsyncBasedOnStatus(item.PaymentStatus)).Id,
                        InvoicesId = item.InvoicesCode == "None" ? null : (await financeService.GetAllInvoicesAsync()).Where(item2 => item2.InvoiceNumber == item.InvoicesCode).FirstOrDefault().Id,
                        PartId = (await orderService.GetAllPartsAsync()).Where(item2 => item2.PartName == item.Product).FirstOrDefault().Id,
                        PricePaid = (decimal)item.TotalAmount,
                        Quantity = (int)item.Quantity,
                        PaymentMethodId = (await financeService.GetAllPaymentMetdhodsAsync()).Where(item2 => item2.PaymentType == item.PaymentMethod).FirstOrDefault().Id,
                        PurchaseOrderId = (await orderService.GetAllPurchaseOrdersAsync()).Where(item2 => item2.PurchaseOrderNumber == item.PurchaseOrderCode).FirstOrDefault().Id,
                    };
                    csvContent.AppendLine($"{guid},{item.Product},{dateFrom},{dateTo},{item.PaymentMethod},{item.PurchaseOrderCode ?? item.SalesOrdersCode},{item.InvoicesCode},{item.Quantity},{item.TotalAmount},{item.PaymentStatus}");

                    await financeService.AddPaymentReportsAsync(report);
                }

                csvContent.AppendLine("LargestPurchase,MaximumQuantity,MostFrequesntQuantityType,MostOrderedPart,TotalCost,TotalQuantity");
                csvContent.AppendLine($"{largestSinglePayment},{largestQuantity},{mostFrequentlyPaymentMethod},{mostFrequentlySellPart},{paymentsTotal},{quantityTotal}");
                // Save the CSV content to a file
                File.WriteAllText($"{path}\\report_{DateTime.Now:yyyyMMdd_HHmmss}.csv", csvContent.ToString());

                ShowMessage(ToastType.Success, "Success!", "Your report has been created!");
                preloadService.Hide();
                return;
            }
            preloadService.Hide();
            ShowMessage(ToastType.Warning, "Warning!", "No path has been chosen!");
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
            preloadService.Hide();
        }
    }

    public async Task GenerateReportPdf()
    {
        try
        {
            if (paymentsReport.Count == 0)
            {
                ShowMessage(ToastType.Warning, "Warning!", "No orders has been found!");
                return;
            }
            var path = _folderPicker.DisplayFolderPicker();
            preloadService.Show(SpinnerColor.Dark);
            var guid = Guid.NewGuid();
            if (path != null)
            {
                foreach(var item in paymentsReport)
                {
                    item.UnitPrice = (await orderService.GetAllPartsAsync()).Where(item2 => item2.PartName == item.Product).FirstOrDefault().UnitCost;
                }
                var orderReportModel = new PaymentsReportModel
                {
                    DateFrom = dateFrom.ToDateTime(TimeOnly.MinValue),
                    DateTo = dateTo.ToDateTime(TimeOnly.MinValue),
                    EmployeeEmail = Config.Email,
                    LargestSinglePayment = largestSinglePayment,
                    LargestQuantity = largestQuantity,
                    MostFrequentlyPaymentMethod = mostFrequentlyPaymentMethod,
                    MostFrequentlySellPart = mostFrequentlySellPart,
                    Payments = paymentsReport,
                    ReportNumber = guid.ToString(),
                    PaymentsTotal = paymentsTotal,
                    QuantityTotal = quantityTotal
                };

                foreach (var item in paymentsReport)
                {
                    var reportPayment = new PaymentReports()
                    {
                        CreationDate = DateTime.Now,
                        ModificationDate = DateTime.Now,
                        DateFrom = dateFrom.ToDateTime(TimeOnly.MinValue),
                        DateTo = dateTo.ToDateTime(TimeOnly.MinValue),
                        EmployeeId = (await employeeService.GetEmployeesAsync()).Where(item2 => item2.UserId == Config.UserId).FirstOrDefault().Id,
                        IsActive = true,
                        LargestSinglePayment = largestSinglePayment,
                        LargestQuantity = largestQuantity,
                        MostFrequentlyPaymentMethod = mostFrequentlyPaymentMethod,
                        MostFrequentlySellPart = mostFrequentlySellPart,
                        ReportNumber = guid.ToString(),
                        PaymentsTotal = paymentsTotal,
                        QuantityTotal = quantityTotal,
                        PaymentStatusId = (await financeService.GetPaymentStatusAsyncBasedOnStatus(item.PaymentStatus)).Id,
                        InvoicesId = item.InvoicesCode == "None" ? null : (await financeService.GetAllInvoicesAsync()).Where(item2 => item2.InvoiceNumber == item.InvoicesCode).FirstOrDefault().Id,
                        PartId = (await orderService.GetAllPartsAsync()).Where(item2 => item2.PartName == item.Product).FirstOrDefault().Id,
                        PricePaid = (decimal)item.TotalAmount,
                        Quantity = (int)item.Quantity,
                        PaymentMethodId = (await financeService.GetAllPaymentMetdhodsAsync()).Where(item2 => item2.PaymentType == item.PaymentMethod).FirstOrDefault().Id,
                        PurchaseOrderId = (await orderService.GetAllPurchaseOrdersAsync()).Where(item2 => item2.PurchaseOrderNumber == item.PurchaseOrderCode).FirstOrDefault().Id,
                    };
                    await financeService.AddPaymentReportsAsync(reportPayment);
                }

                var report = new CreatePaymentsReport($"{path}\\report_{DateTime.Now:yyyyMMdd_HHmmss}.pdf", orderReportModel);
                report.Create();

                // code here ...
                preloadService.Hide();
                ShowMessage(ToastType.Success, "Success!", "Your report has been created!");
                return;
            }
            ShowMessage(ToastType.Warning, "Warning!", "No path has been chosen!");
            preloadService.Hide();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
            preloadService.Hide();
        }
    }

    #endregion
}
