@page "/inventory"
@using BlazorBootstrap
@using EnterpriseMaster.DbServices.Models.Database;
@using EnterpriseMaster.DesktopApp.Data.Services.AccountingServices;
@using EnterpriseMaster.DesktopApp.Data.Services.Inventory;
@using EnterpriseMaster.DesktopApp.Helpers.PdfCreation;
@using EnterpriseMaster.DesktopApp.Helpers.PdfCreation.Models;
@inherits MainLayout
@inject InventoryService inventoryService
@inject Helpers.Interfaces.IFolderPick _folderPicker
@inject EmployeeService employeeService

<Tabs EnableFadeEffect="true">
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Diagram3" /> Products In Stock
        </TitleTemplate>
        <Content>
            <br />
            <Grid TItem="Products"
                  @ref="gridProducts"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  DataProvider="ProductsDataProvider"
                  Class="table table-hover table-bordered table-striped"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true">
                <GridColumn TItem="Products" HeaderText="Product Name" PropertyName="ProductName" SortKeySelector="item => item.ProductName">
                    @context.ProductName
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Product Code" PropertyName="ProductCode" SortKeySelector="item => item.ProductCode">
                    @context.ProductCode
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Unit Price($)" PropertyName="Price" SortKeySelector="item => item.Price">
                    @context.Price
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Weight" PropertyName="Weight" SortKeySelector="item => item.Weight">
                    @context.Weight
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Description" PropertyName="Description" SortKeySelector="item => item.Description">
                    @context.Description
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Manufacturer" PropertyName="Manufacturer" SortKeySelector="item => item.Manufacturer">
                    @context.Manufacturer
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Units In Stock" PropertyName="UnitsInStock" SortKeySelector="item => item.UnitsInStock">
                    @context.UnitsInStock
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Weight" PropertyName="Weight" SortKeySelector="item => item.Weight">
                    @context.Weight
                </GridColumn>
            </Grid>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Diagram3" /> Add Product to Stock
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <div class="left-panel">
                    <div class="styled-form">
                        <br />
                        <label for="productName">Product Name:</label>
                        <input type="text" id="productName" name="productName" @bind="productNameAdd" />

                        <br />
                        <label for="description">Description:</label>
                        <input type="text" id="description" name="description" @bind="descriptionAdd" />

                        <br />
                        <label for="manufacturer">Manufacturer:</label>
                        <input type="text" id="manufacturer" name="manufacturer" @bind="manufacturerAdd" />

                        <br />
                        <label for="productCode">Product Code:</label>
                        <input type="text" id="productCode" name="productCode" @bind="productCodeAdd" />

                        <br />
                        <label for="price">Price ($):</label>
                        <input type="number" id="price" name="price" step="0.01" @bind="priceAdd" />
                    </div>
                </div>
                <div class="right-panel">
                    <div class="top-right">
                        @if (quantityTypes == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {
                            <label for="quantityTypeId">Quantity Type:</label>
                            <select class="styled-select" @onchange="OnQuantityTypeAddSelected">
                                <option value="">Select a Quantity Type</option>
                                @foreach (var quantityType in quantityTypes)
                                {
                                    <option value="@quantityType.Id">@quantityType.Type</option>
                                }
                            </select>
                        }
                        @if (categories == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {
                            <label for="category">Category:</label>
                            <select class="styled-select" @onchange="OnCategoryAddSelected">
                                <option value="">Select a Category</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id">@category.CategotyDescription</option>
                                }
                            </select>
                        }
                    </div>
                    <div class="bottom-right">
                        <div class="styled-form">
                            <br />
                            <label for="unitsInStock">Units In Stock:</label>
                            <input type="number" id="unitsInStock" name="unitsInStock" step="1" @bind="unitsInStockAdd" />

                            <label for="weight">Weight:</label>
                            <input type="number" id="weight" name="weight" step="0.01" @bind="weightAdd" />
                        </div>
                        <div>
                            <button class="button-36" role="button" @onclick="AddProduct"> Add Product To Inventory </button>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Braces" /> Edit Product
        </TitleTemplate>
        <Content>
            <br />
            <div class="row">
                <div class="col col-dropdown">
                    @if (products == null)
                    {
                        <p>Loading...</p>
                    }
                    else
                    {
                        <select id="employeeDropdown" class="dropdown-style" @onchange="OnProductSelected">
                            <option>Select Product</option>
                            @foreach (var access in products)
                            {
                                <option value="@access.Id">@access.ProductName (Code: @access.ProductCode, Manufacturer: @access.Manufacturer)</option>
                            }
                        </select>
                    }
                </div>
            </div>
            <div class="container">
                <div class="left-panel">
                    <div class="styled-form">
                        <br />
                        <label for="productName">Product Name:</label>
                        <input type="text" id="productName" name="productName" @bind="productNameEdit" />

                        <br />
                        <label for="description">Description:</label>
                        <input type="text" id="description" name="description" @bind="descriptionEdit" />

                        <br />
                        <label for="manufacturer">Manufacturer:</label>
                        <input type="text" id="manufacturer" name="manufacturer" @bind="manufacturerEdit" />

                        <br />
                        <label for="productCode">Product Code:</label>
                        <input type="text" id="productCode" name="productCode" @bind="productCodeEdit" />

                        <br />
                        <label for="price">Price ($):</label>
                        <input type="number" id="price" name="price" step="0.01" @bind="priceEdit" />

                        <br />
                        <label for="discontinued">Discontinued:</label>
                        <input type="checkbox" id="discontinued" name="discontinued" @bind="discontinuedEdit" />

                        <br />
                        <label for="isActive">Is Active:</label>
                        <input type="checkbox" id="isActive" name="isActive" @bind="isActiveEdit" />
                    </div>
                </div>
                <div class="right-panel">
                    <div class="top-right">
                        @if (quantityTypes == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {
                            <label for="quantityTypeId">Quantity Type:</label>
                            <select class="styled-select" @onchange="OnQuantityTypeEditSelected">
                                <option value="">Select a Quantity Type</option>
                                @foreach (var quantityType in quantityTypes)
                                {
                                    if(quantityType.Id == selectedQuantityTypeEditId)
                                    {
                                        <option value="@quantityType.Id" selected>@quantityType.Type</option>
                                    }
                                    <option value="@quantityType.Id">@quantityType.Type</option>
                                }
                            </select>
                        }
                        @if (categories == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {
                            <label for="category">Category:</label>
                            <select class="styled-select" @onchange="OnCategoryEditSelected">
                                <option value="">Select a Category</option>
                                @foreach (var category in categories)
                                {
                                    if (category.Id == selectedCategoryEditId)
                                    {
                                        <option value="@category.Id" selected>@category.CategotyDescription</option>
                                    }
                                    <option value="@category.Id">@category.CategotyDescription</option>
                                }
                            </select>
                        }
                    </div>
                    <div class="bottom-right">
                        <div class="styled-form">
                            <br />
                            <label for="unitsInStock">Units In Stock:</label>
                            <input type="number" id="unitsInStock" name="unitsInStock" step="1" @bind="unitsInStockEdit" />

                            <label for="weight">Weight:</label>
                            <input type="number" id="weight" name="weight" step="0.01" @bind="weightEdit" />
                        </div>
                        <div>
                            <button class="button-36" role="button" @onclick="UpdateProduct"> Update Product </button>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Flag" /> Inventory Reports
        </TitleTemplate>
        <Content>
            <br />
            <Grid TItem="Products"
                  @ref="gridProductsReportViewModel"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  DataProvider="ProductsReportViewModelDataProvider"
                  Class="table table-hover table-bordered table-striped"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true">
                <GridColumn TItem="Products" HeaderText="Product Name" PropertyName="ProductName" SortKeySelector="item => item.ProductName">
                    @context.ProductName
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Units In Stock" PropertyName="UnitsInStock" SortKeySelector="item => item.UnitsInStock">
                    @context.UnitsInStock
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Manufacturer" PropertyName="Manufacturer" SortKeySelector="item => item.Manufacturer">
                    @context.Manufacturer
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Product Code" PropertyName="ProductCode" SortKeySelector="item => item.ProductCode">
                    @context.ProductCode
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Description" PropertyName="Description" SortKeySelector="item => item.Description">
                    @context.Description
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Weight" PropertyName="Weight" SortKeySelector="item => item.Weight">
                    @context.Weight kg
                </GridColumn>
            </Grid>
            <div class="container">
                <div class="containerPanelReports">
                    <div class="topPanelReportsBottom">
                        <div class="container-fluid form-container">
                            <div class="row">
                                <div class="col-md-4 column">
                                    <form>
                                        <div class="form-group classHigh">
                                            <label for="biggestPurchase" class="form-label">Largest Unit In Stock:</label>
                                            <input type="text" class="form-control" id="biggestPurchase" value="@largestUnitInStock" style="width: 100%;" readonly>
                                        </div>
                                    </form>
                                </div>

                                <div class="col-md-4 column">
                                    <form>
                                        <div class="form-group">
                                            <label for="totalCost" class="form-label">Heaviest Item:</label>
                                            <input type="text" class="form-control" id="totalCost" value="@heaviestItem kg" style="width: 100%;" readonly>
                                        </div>

                                        <div class="form-group">
                                            <label for="mostOrderingPart" class="form-label">Total In Stock:</label>
                                            <input type="text" class="form-control" id="mostOrderingPart" value="@totalInStock" style="width: 100%;" readonly>
                                        </div>
                                    </form>
                                </div>

                                <div class="col-md-4 column">
                                    <form>
                                        <div class="form-group">
                                            <label for="biggestQuantity" class="form-label">Most Expensive Item:</label>
                                            <input type="text" class="form-control" id="biggestQuantity" value="$ @mostExpensiveItem" style="width: 100%;" readonly>
                                        </div>
                                    </form>
                                </div>
                            </div>
                            <Dropdown>
                                <DropdownToggleButton Color="ButtonColor.Success"> Generate Report </DropdownToggleButton>
                                <DropdownMenu>
                                    <DropdownItem @onclick="GenerateReportCsv" Type="ButtonType.Link">CSV</DropdownItem>
                                    <DropdownItem @onclick="GenerateReportPdf" Type="ButtonType.Link">PDF</DropdownItem>
                                </DropdownMenu>
                            </Dropdown>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
</Tabs>

<Preload />
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
@code {
    [Inject] protected PreloadService preloadService { get; set; }

    protected async override void OnInitialized()
    {
        try
        {
            preloadService.Show(SpinnerColor.Dark);
            products = await inventoryService.GetAllProductsAsync();
            categories = await inventoryService.GetAllCategoriesAsync();
            quantityTypes = await inventoryService.GetAllQuantityTypesAsync();
            foreach (var product in products)
            {
                product.Category = await inventoryService.GetCategoriesAsync(product.CategoryId.Value);
                product.QuantityType = await inventoryService.GetQuantityTypesAsync(product.QuantityTypeId.Value);
            }
            inventoryReport = products;
            if(inventoryReport.Count > 0)
            {
                largestUnitInStock = products.OrderByDescending(item => item.UnitsInStock).FirstOrDefault().UnitsInStock.ToString();
                heaviestItem = products.OrderByDescending(item => item.Weight).FirstOrDefault().Weight.ToString();
                mostExpensiveItem = products.OrderByDescending(item => item.Price).FirstOrDefault().Price.ToString();
                totalInStock = products.Sum(item => item.UnitsInStock).ToString();
            }
            else
            {
                largestUnitInStock = "0";
                heaviestItem = "0";
                mostExpensiveItem = "0";
                totalInStock = "0";
            }
            await gridProducts.RefreshDataAsync();
            await gridProductsReportViewModel.RefreshDataAsync();
            StateHasChanged();
            preloadService.Hide();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", "Something went wrong!");
            preloadService.Hide();
        }
        
    }

    #region Stock List

    private List<Products> products = new List<Products>();
    private Grid<Products> gridProducts;

    private async Task<GridDataProviderResult<Products>> ProductsDataProvider(GridDataProviderRequest<Products> request)
    {
        if (products is null)
            products = await inventoryService.GetAllProductsAsync();

        return await Task.FromResult(request.ApplyTo(products));
    }

    #endregion

    #region Add Product to Stock

    private List<QuantityTypes> quantityTypes;
    private List<Categories> categories;
    private int selectedQuantityTypeAddId = 0;
    private int selectedCategoryAddId = 0;
    private string productNameAdd = "";
    private string descriptionAdd = "";
    private string manufacturerAdd = "";
    private string productCodeAdd = "";
    private decimal priceAdd = 0.00m;
    private decimal unitsInStockAdd = 0.00m;
    private decimal weightAdd = 0.00m;

    private void OnQuantityTypeAddSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedQuantityTypeAddId = selectedId;
        }
    }

    private void OnCategoryAddSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedCategoryAddId = selectedId;
        }
    }

    private async Task AddProduct()
    {
        preloadService.Show(SpinnerColor.Dark);
        if (!IsValidAdd())
        {
            return;
        }

        var product = new Products()
        {
            CategoryId = selectedCategoryAddId,
            QuantityTypeId = selectedQuantityTypeAddId,
            CreationDate = DateTime.Now,
            Description = descriptionAdd,
            Discontinued = false,
            IsActive = true,
            Manufacturer = manufacturerAdd,
            ModificationDate = DateTime.Now,
            Price = priceAdd,
            ProductCode = productCodeAdd,
            ProductName = productNameAdd,
            UnitsInStock = unitsInStockAdd,
            Weight = weightAdd
        };

        if (await inventoryService.AddProductAsync(product))
        {
            ShowMessage(ToastType.Success, "Success!", "Product added successfully!");
            preloadService.Hide();
            products = await inventoryService.GetAllProductsAsync();
            await gridProducts.RefreshDataAsync();
            return;
        };
        ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while adding a product!");
        preloadService.Hide();
        await gridProducts.RefreshDataAsync();
    }

    #endregion

    #region Edit Product

    private Products productEdit;
    private QuantityTypes quantityTypesEdit;
    private Categories categoryEdit;
    private int selectedProductId;
    private int selectedQuantityTypeEditId;
    private int selectedCategoryEditId;
    private string productNameEdit;
    private string descriptionEdit;
    private string manufacturerEdit;
    private string productCodeEdit;
    private decimal priceEdit;
    private decimal unitsInStockEdit;
    private decimal weightEdit;
    private bool discontinuedEdit;
    private bool isActiveEdit;

    private void OnQuantityTypeEditSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedQuantityTypeEditId = selectedId;
        }
    }

    private void OnCategoryEditSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedCategoryEditId = selectedId;
        }
    }

    private async Task UpdateProduct()
    {
        preloadService.Show(SpinnerColor.Dark);
        if (!IsValidEdit())
        {
            return;
        }

        var productToUpdate = await inventoryService.GetProductAsync(selectedProductId);

        productToUpdate.CategoryId = selectedCategoryEditId;
        productToUpdate.QuantityTypeId = selectedQuantityTypeEditId;
        productToUpdate.CreationDate = DateTime.Now;
        productToUpdate.Description = descriptionEdit;
        productToUpdate.Discontinued = discontinuedEdit;
        productToUpdate.IsActive = isActiveEdit;
        productToUpdate.Manufacturer = manufacturerEdit;
        productToUpdate.ModificationDate = DateTime.Now;
        productToUpdate.Price = priceEdit;
        productToUpdate.ProductCode = productCodeEdit;
        productToUpdate.ProductName = productNameEdit;
        productToUpdate.UnitsInStock = unitsInStockEdit;
        productToUpdate.Weight = weightEdit;
        productToUpdate.ModificationDate = DateTime.Now;

        if (await inventoryService.UpdateProductAsync(productToUpdate))
        {
            ShowMessage(ToastType.Success, "Success!", "Product updated successfully!");
            preloadService.Hide();
            products = await inventoryService.GetAllProductsAsync();
            await gridProducts.RefreshDataAsync();
            return;
        };
        ShowMessage(ToastType.Warning, "Warning!", "Something went wrong while updating a product!");
        preloadService.Hide();
        await gridProducts.RefreshDataAsync();
    }

    private async void OnProductSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedProductId = selectedId;
        }
        productEdit = await inventoryService.GetProductAsync(selectedProductId);
        quantityTypesEdit = await inventoryService.GetQuantityTypesAsync((int)productEdit.QuantityTypeId);
        categoryEdit = await inventoryService.GetCategoriesAsync((int)productEdit.CategoryId);
        productNameEdit = productEdit.ProductName;
        descriptionEdit = productEdit.Description;
        manufacturerEdit = productEdit.Manufacturer;
        productCodeEdit = productEdit.ProductCode;
        priceEdit = productEdit.Price;
        unitsInStockEdit = productEdit.UnitsInStock;
        weightEdit = productEdit.Weight;
        discontinuedEdit = productEdit.Discontinued;
        isActiveEdit = productEdit.IsActive;

        StateHasChanged();
    }

    #endregion

    #region Supplier Management



    #endregion

    #region Inventory Reports

    private List<Products> inventoryReport = new List<Products>();
    private Grid<Products> gridProductsReportViewModel;

    private string largestUnitInStock;
    private string heaviestItem;
    private string mostExpensiveItem;
    private string totalInStock;

    private async Task<GridDataProviderResult<Products>> ProductsReportViewModelDataProvider(GridDataProviderRequest<Products> request)
    {
        if (inventoryReport is null)
        {
            inventoryReport = await inventoryService.GetAllProductsAsync();
            foreach (var product in inventoryReport)
            {
                product.Category = await inventoryService.GetCategoriesAsync(product.CategoryId.Value);
                product.QuantityType = await inventoryService.GetQuantityTypesAsync(product.QuantityTypeId.Value);
            }
        }

        return await Task.FromResult(request.ApplyTo(inventoryReport));
    }

    private async Task GenerateReportPdf()
    {
        try
        {
            if (inventoryReport.Count == 0)
            {
                ShowMessage(ToastType.Warning, "Warning!", "No orders has been found!");
                return;
            }
            var path = _folderPicker.DisplayFolderPicker();
            preloadService.Show(SpinnerColor.Dark);
            var guid = Guid.NewGuid();
            if (path != null)
            {
                var inventoryReportsModel = new InventoryReportModel
                {
                    EmployeeEmail = Config.Email,
                    CreationDate = DateTime.Now,
                    HaviestItem = heaviestItem,
                    LargestUnitInStock = largestUnitInStock,
                    MostExpensiveItem = mostExpensiveItem,
                    Products = inventoryReport,
                    ReportNumber = guid.ToString(),
                    TotalInStock = totalInStock
                };

                foreach (var item in inventoryReport)
                {
                    var inventoryReport = new InventoryReports()
                    {
                        CreationDate = DateTime.Now,
                        ModificationDate = DateTime.Now,
                        EmployeeId = (await employeeService.GetEmployeesAsync()).Where(item2 => item2.UserId == Config.UserId).FirstOrDefault().Id,
                        IsActive = true,
                        HaviestItem = heaviestItem,
                        LargestUnitInStock = largestUnitInStock,
                        MostExpensiveItem = mostExpensiveItem,
                        TotalInStock = totalInStock,
                        ReportNumber = guid.ToString(),
                        ProductId = item.Id,
                        EmployeeEmail = Config.Email
                    };
                    await inventoryService.AddReportAsync(inventoryReport);
                }

                var report = new CreateInventoryReport($"{path}\\report_{DateTime.Now:yyyyMMdd_HHmmss}.pdf", inventoryReportsModel);
                report.Create();

                // code here ...
                preloadService.Hide();
                ShowMessage(ToastType.Success, "Success!", "Your report has been created!");
                return;
            }
            ShowMessage(ToastType.Warning, "Warning!", "No path has been chosen!");
            preloadService.Hide();
        }
        catch (Exception e)
        {
            ShowMessage(ToastType.Warning, "Warning!", e.Message);
            preloadService.Hide();
        }
    }

    private async Task GenerateReportCsv()
    {
        
    }

    #endregion

    #region Helper

    public bool IsValidAdd()
    {
        if (selectedQuantityTypeAddId <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Quantity Type is not selected or is invalid!");
            preloadService.Hide();
            return false;
        }

        if (selectedCategoryAddId <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Category is not selected or is invalid!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(productNameAdd))
        {
            ShowMessage(ToastType.Info, "Warning!", "Product name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(descriptionAdd))
        {
            ShowMessage(ToastType.Info, "Warning!", "Description cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(manufacturerAdd))
        {
            ShowMessage(ToastType.Info, "Warning!", "Manufacturer cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(productCodeAdd))
        {
            ShowMessage(ToastType.Info, "Warning!", "Product Code cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (priceAdd <= 0.00m)
        {
            ShowMessage(ToastType.Info, "Warning!", "Price must be greater than zero!");
            preloadService.Hide();
            return false;
        }

        if (unitsInStockAdd <= 0.00m)
        {
            ShowMessage(ToastType.Info, "Warning!", "Units In Stock must be greater than zero!");
            preloadService.Hide();
            return false;
        }

        if (weightAdd <= 0.00m)
        {
            ShowMessage(ToastType.Info, "Warning!", "Weight must be greater than zero!");
            preloadService.Hide();
            return false;
        }

        // All checks passed, the data is valid
        return true;
    }

    public bool IsValidEdit()
    {
        if (selectedQuantityTypeEditId <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Quantity Type is not selected or is invalid!");
            preloadService.Hide();
            return false;
        }

        if (selectedCategoryEditId <= 0)
        {
            ShowMessage(ToastType.Info, "Warning!", "Category is not selected or is invalid!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(productNameEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Product name cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(descriptionEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Description cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(manufacturerEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Manufacturer cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (string.IsNullOrWhiteSpace(productCodeEdit))
        {
            ShowMessage(ToastType.Info, "Warning!", "Product Code cannot be empty!");
            preloadService.Hide();
            return false;
        }

        if (priceEdit <= 0.00m)
        {
            ShowMessage(ToastType.Info, "Warning!", "Price must be greater than zero!");
            preloadService.Hide();
            return false;
        }

        if (unitsInStockEdit <= 0.00m)
        {
            ShowMessage(ToastType.Info, "Warning!", "Units In Stock must be greater than zero!");
            preloadService.Hide();
            return false;
        }

        if (weightEdit <= 0.00m)
        {
            ShowMessage(ToastType.Info, "Warning!", "Weight must be greater than zero!");
            preloadService.Hide();
            return false;
        }

        // All checks passed, the data is valid
        return true;
    }

    #endregion

}
