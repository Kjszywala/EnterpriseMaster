@page "/inventory"
@using BlazorBootstrap
@using EnterpriseMaster.DbServices.Models.Database;
@using EnterpriseMaster.DesktopApp.Data.Services.Inventory;
@inherits MainLayout
@inject InventoryService inventoryService

<Tabs EnableFadeEffect="true">
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Diagram3" /> Products In Stock
        </TitleTemplate>
        <Content>
            <br />
            <Grid TItem="Products"
                  @ref="gridProducts"
                  AllowFiltering="true"
                  AllowPaging="true"
                  AllowSorting="true"
                  AllowRowClick="true"
                  DataProvider="ProductsDataProvider"
                  Class="table table-hover table-bordered table-striped"
                  FiltersRowCssClass="bg-dark text-white bg-opacity-25 border-bottom-0"
                  HeaderRowCssClass="bg-dark text-white border-bottom-0"
                  PageSize="5"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                  PaginationItemsTextFormat="{0} - {1} of {2} pages"
                  ItemsPerPageText="Items per page"
                  Responsive="true">
                <GridColumn TItem="Products" HeaderText="Product Name" PropertyName="ProductName">
                    @context.ProductName
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Product Code" PropertyName="ProductCode">
                    @context.ProductCode
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Unit Price" PropertyName="Price">
                    @context.Price
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Quantity Type" PropertyName="QuantityType.Type">
                    @context.QuantityType.Type
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Category" PropertyName="Category.CategotyDescription">
                    @context.Category.CategotyDescription
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Manufacturer" PropertyName="Manufacturer">
                    @context.Manufacturer
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Units In Stock" PropertyName="UnitsInStock">
                    @context.UnitsInStock
                </GridColumn>
                <GridColumn TItem="Products" HeaderText="Weight" PropertyName="Weight">
                    @context.Weight
                </GridColumn>
            </Grid>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Diagram3" /> Add Product to Stock
        </TitleTemplate>
        <Content>
            <br />
            <div class="container">
                <!-- First Column -->
                <div class="column left">
                    <label for="productName">Product Name:</label>
                    <input type="text" id="productName" name="productName" @bind="productNameAdd" />

                    <label for="description">Description:</label>
                    <input type="text" id="description" name="description" @bind="descriptionAdd" />

                    <label for="manufacturer">Manufacturer:</label>
                    <input type="text" id="manufacturer" name="manufacturer" @bind="manufacturerAdd" />

                    <label for="productCode">Product Code:</label>
                    <input type="text" id="productCode" name="productCode" @bind="productCodeAdd" />

                    <label for="price">Price:</label>
                    <input type="number" id="price" name="price" step="0.01" @bind="priceAdd" />
                </div>

                <!-- Second Column -->
                <div class="column right">
                    <div class="row">
                        @if (quantityTypes == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {
                            <label for="quantityTypeId">Quantity Type:</label>
                            <select class="styled-select" @onchange="OnQuantityTypeEditSelected">
                                <option value="">Select a Quantity Type</option>
                                @foreach (var quantityType in quantityTypes)
                                {
                                    <option value="@quantityType.Id">@quantityType.Type</option>
                                }
                            </select>
                        }
                    </div>
                    <div class="row">
                        @if (categories == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {
                            <label for="category">Category:</label>
                            <select class="styled-select" @onchange="OnCategoryEditSelected">
                                <option value="">Select a Category</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id">@category.CategotyDescription</option>
                                }
                            </select>
                        }
                    </div>
                    <div class="row">
                        <label for="unitsInStock">Units In Stock:</label>
                        <input type="number" id="unitsInStock" name="unitsInStock" step="1" @bind="unitsInStockAdd" />

                        <label for="weight">Weight:</label>
                        <input type="number" id="weight" name="weight" step="0.01" @bind="weightAdd" />
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Braces" /> Edit Product
        </TitleTemplate>
        <Content>
            <div class="editDiv">
                <div class="container">
                    <!-- Left Div (30%) -->
                    <div class="left-div">
                        <h1>Left Div</h1>
                        <p>This div takes up 30% of the page width.</p>
                    </div>

                    <!-- Right Div (70%) -->
                    <div class="right-div">
                        <div class="container1">
                            <!-- Top Div (30%) -->
                            <div class="top-div">
                                <h1>Top Div</h1>
                                <p>This div takes up 30% of the page height.</p>
                            </div>

                            <!-- Bottom Div (70%) -->
                            <div class="bottom-div">
                                <h1>Bottom Div</h1>
                                <p>This div takes up 70% of the page height.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Diagram2" /> Supplier Management
        </TitleTemplate>
        <Content>
            <p class="mt-2">
                <b>This is some placeholder content the Contact tab's associated content.</b> Clicking another tab will toggle the visibility of this one for the next.
            </p>
        </Content>
    </Tab> 
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Flag" /> Inventory Reports
        </TitleTemplate>
        <Content>
            <p class="mt-2">
                <b>This is some placeholder content the Contact tab's associated content.</b> Clicking another tab will toggle the visibility of this one for the next.
            </p>
        </Content>
    </Tab>
</Tabs>

@code {

    protected async override void OnInitialized()
    {
        products = await inventoryService.GetAllProductsAsync();
        categories = await inventoryService.GetAllCategoriesAsync();
        quantityTypes = await inventoryService.GetAllQuantityTypesAsync();
        await gridProducts.RefreshDataAsync();
    }

    #region Stock List

    private List<Products> products = new List<Products>();
    private Grid<Products> gridProducts;

    private async Task<GridDataProviderResult<Products>> ProductsDataProvider(GridDataProviderRequest<Products> request)
    {
        if (products is null) // pull employees only one time for client-side filtering, sorting, and paging
            products = await inventoryService.GetAllProductsAsync(); // call a service or an API to pull the employees

        return await Task.FromResult(request.ApplyTo(products));
    }

    #endregion

    #region Add Product to Stock

    private List<QuantityTypes> quantityTypes;
    private List<Categories> categories;
    private int selectedQuantityTypeAddId;
    private int selectedCategoryAddId;
    private string productNameAdd = "";
    private string descriptionAdd = "";
    private string manufacturerAdd = "";
    private string productCodeAdd = "";
    private decimal priceAdd = 0.00m;
    private decimal unitsInStockAdd = 0.00m;
    private decimal weightAdd = 0.00m;

    private void OnQuantityTypeEditSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedQuantityTypeAddId = selectedId;
        }
    }

    private void OnCategoryEditSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            selectedCategoryAddId = selectedId;
        }
    }

    #endregion

    #region Edit Product



    #endregion

    #region Supplier Management



    #endregion

    #region Inventory Reports



    #endregion

}
